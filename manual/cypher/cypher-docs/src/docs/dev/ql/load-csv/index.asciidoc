[[query-load-csv]]
= LOAD CSV
:dbms-allow-csv-import-from-file-urls-uri: {operations-manual-base-uri}/reference/#config_dbms.security.allow_csv_import_from_file_urls
:dbms-directories-import-uri: {operations-manual-base-uri}/reference/#config_dbms.directories.import

[abstract]
--
`LOAD CSV` is used to import data from CSV files.
--

* The URL of the CSV file is specified by using `FROM` followed by an arbitrary expression evaluating to the URL in question.
* It is required to specify a variable for the CSV data using `AS`.
* `LOAD CSV` supports resources compressed with _gzip_, _Deflate_, as well as _ZIP_ archives.
* CSV files can be stored on the database server and are then accessible using a `file:///` URL.
  Alternatively, `LOAD CSV` also supports accessing CSV files via _HTTPS_, _HTTP_, and _FTP_.
* `LOAD CSV` will follow _HTTP_ redirects but for security reasons it will not follow redirects that changes the protocol, for example if the redirect is going from _HTTPS_ to _HTTP_.

.Configuration settings for file URLs

link:{dbms-allow-csv-import-from-file-urls-uri}[dbms.security.allow_csv_import_from_file_urls]::
This setting determines if Cypher will allow the use of `file:///` URLs when loading data using `LOAD CSV`.
Such URLs identify files on the filesystem of the database server. Default is _true_.
Setting `dbms.security.allow_csv_import_from_file_urls=false` will completely disable access to the file system for `LOAD CSV`.

link:{dbms-directories-import-uri}[dbms.directories.import]::
Sets the root directory for `file:///` URLs used with the Cypher `LOAD CSV` clause.
This must be set to a single directory on the filesystem of the database server, and will make all requests to load from `file:///` URLs relative to the specified directory (similar to how a unix chroot operates).
The default value is _import_.
This is a security measure which prevents the database from accessing files outside the standard import directory.
Setting `dbms.directories.import` to be empty removes this security measure and instead allows access to any file on the system.
This is not recommended.

File URLs will be resolved relative to the `dbms.directories.import` directory.
For example, a file URL will typically look like `file:///myfile.csv` or `file:///myproject/myfile.csv`.

*  If `dbms.directories.import` is set to the default value _import_, using the above URLs in `LOAD CSV` would read from _<NEO4J_HOME>/import/myfile.csv_ and _<NEO4J_HOME>import/myproject/myfile.csv_ respectively.
*  If it is set to _/data/csv_, using the above URLs in `LOAD CSV` would read from _/data/csv/myfile.csv_ and _/data/csv/myproject/myfile.csv_ respectively.

See the examples below for further details.

There is also a worked example, see <<cypherdoc-importing-csv-files-with-cypher>>.

ifndef::asciidoctor[:leveloffset: 3]

include::csv-file-format.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

include::import-data-from-a-csv-file.asciidoc[]

include::import-data-from-a-csv-file-containing-headers.asciidoc[]

include::import-data-from-a-csv-file-with-a-custom-field-delimiter.asciidoc[]

include::importing-large-amounts-of-data.asciidoc[]

ifndef::asciidoctor[:leveloffset: 2]

include::setting-the-rate-of-periodic-commits.asciidoc[]

ifndef::asciidoctor[:leveloffset: 2]

include::import-data-containing-escaped-characters.asciidoc[]


