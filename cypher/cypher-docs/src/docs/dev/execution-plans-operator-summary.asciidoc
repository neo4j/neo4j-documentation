[[execution-plan-operators-summary]]
= Execution plan operators at a glance

[abstract]
--
This section contains the exection plan operators at a glance.
--

//This is being included in:
//neo4j-manual-modeling/cypherManual/docbook/content-map.xml

This table comprises all the execution plan operators ordered lexicographically.

* _Leaf_ operators, in most cases, locate the starting nodes and relationships required in order to execute the query.

* _Updating_ operators are used in queries that update the graph.

* _Eager_ operators <<eagerness-laziness, accumulate all their rows>> before piping them to the next operator.

[cols="35a,35a,6,10,14", options="header"]
|===
| Name
| Description
| Leaf?
| Updating?
| Considerations

| <<query-plan-all-nodes-scan,AllNodesScan>>
| Reads all nodes from the node store.
| label:yes[]
|
|

| <<query-plan-anti,Anti>>
| Tests for the absence of a pattern.
|
|
|

| <<query-plan-anti-semi-apply,AntiSemiApply>>
a|
Performs a nested loop.
Tests for the absence of a pattern predicate.
|
|
|

| <<query-plan-apply,Apply>>
| Performs a nested loop. Yields rows from both the left-hand and right-hand side operators.
|
|
|

| <<query-plan-argument,Argument>>
| Indicates the variable to be used as an argument to the right-hand side of an `Apply` operator.
| label:yes[]
|
|

| <<query-plan-assert-same-node,AssertSameNode>>
| Used to ensure that no unique constraints are violated.
|
|
|

| <<query-plan-asserting-multi-node-index-seek,AssertingMultiNodeIndexSeek>>
| Used to ensure that no unique constraints are violated.
|
|
|

| <<query-plan-cache-properties,CacheProperties>>
| Reads node or relationship properties and caches them.
|
|
|

| <<query-plan-cartesian-product,CartesianProduct>>
| Produces a cartesian product of the inputs from the left-hand and right-hand operators.
|
|
|

| <<query-plan-create-nodes---relationships,Create>>
| Creates nodes and relationships.
|
| label:yes[]
|

| <<query-plan-create-index,CreateIndex>>
| Creates an index for either nodes or relationships.
|
| label:yes[]
|

| <<query-plan-create-node-key-constraint,CreateNodeKeyConstraint>>
| Creates a node key constraint on a set of properties for all nodes with a certain label.
|
| label:yes[]
|

| <<query-plan-create-node-property-existence-constraint,CreateNodePropertyExistenceConstraint>>
| Creates an existence constraint on a property for all nodes with a certain label.
|
| label:yes[]
|

| <<query-plan-create-relationship-property-existence-constraint,CreateRelationshipPropertyExistenceConstraint>>
| Creates an existence constraint on a property for all relationships of a certain type.
|
| label:yes[]
|

| <<query-plan-create-unique-constraint,CreateUniqueConstraint>>
| Creates a unique constraint on a set of properties for all nodes with a certain label.
|
| label:yes[]
|

| <<query-plan-delete,Delete>>
| Deletes a node or relationship.
|
| label:yes[]
|

| <<query-plan-detach-delete,DetachDelete>>
| Deletes a node and its relationships.
|
| label:yes[]
|

| <<query-plan-directed-relationship-by-id-seek,DirectedRelationshipByIdSeek>>
| Reads one or more relationships by id from the relationship store.
| label:yes[]
|
|

| <<query-plan-directed-relationship-index-contains-scan,DirectedRelationshipIndexContainsScan>>
| Examines all values stored in an index, searching for entries containing a specific string; for example, in queries including `CONTAINS`.
|
|
|

| <<query-plan-directed-relationship-index-ends-with-scan,DirectedRelationshipIndexEndsWithScan>>
| Examines all values stored in an index, searching for entries ending in a specific string; for example, in queries containing `ENDS WITH`.
|
|
|

| <<query-plan-directed-relationship-index-scan,DirectedRelationshipIndexScan>>
| Examines all values stored in an index, returning all relationships and their start and end nodes with a particular relationship type and a specified property.
|
|
|

| <<query-plan-directed-relationship-index-seek,DirectedRelationshipIndexSeek>>
| Finds relationships and their start and end nodes using an index seek.
|
|
|

| <<query-plan-directed-relationship-index-seek-by-range,DirectedRelationshipIndexSeekByRange>>
| Finds relationships and their start and end nodes using an index seek where the value of the property matches a given prefix string.
|
|
|

| <<query-plan-directed-relationship-type-scan,DirectedRelationshipTypeScan>>
| Fetches all relationships and their start and end nodes with a specific type from the relationship type index.
|
|
|

| <<query-plan-distinct,Distinct>>
| Drops duplicate rows from the incoming stream of rows.
|
|
| label:eager[]

| <<query-plan-create-constraint-only-if-it-does-not-already-exist,DoNothingIfExists(CONSTRAINT)>>
| Checks if a constraint already exists, if it does then it stops the execution, if not it continues.
| label:yes[]
|
|

| <<query-plan-create-index-only-if-it-does-not-already-exist,DoNothingIfExists(INDEX)>>
| Checks if an index already exists, if it does then it stops the execution, if not it continues.
| label:yes[]
|
|

| <<query-plan-drop-constraint,DropConstraint>>
| Drops a constraint using its name.
| label:yes[]
| label:yes[]
|

| <<query-plan-drop-index,DropIndex>>
| Drops an index using its name.
| label:yes[]
| label:yes[]
|

| <<query-plan-eager,Eager>>
| For isolation purposes, `Eager` ensures that operations affecting subsequent operations are executed fully for the whole dataset before continuing execution.
|
|
| label:eager[]

| <<query-plan-eager-aggregation,EagerAggregation>>
| Evaluates a grouping expression.
|
|
| label:eager[]

| <<query-plan-empty-result,EmptyResult>>
| Eagerly loads all incoming data and discards it.
|
|
|

| <<query-plan-empty-row,EmptyRow>>
| Returns a single row with no columns.
| label:yes[]
|
|

| <<query-plan-exhaustive-limit,ExhaustiveLimit>>
a|
The `ExhaustiveLimit` operator is similar to the `Limit` operator, but always exhausts the input.
Used when combining `LIMIT` and updates.
|
|
|

| <<query-plan-expand-all,Expand(All)>>
| Traverses incoming or outgoing relationships from a given node.
|
|
|

| <<query-plan-expand-into,Expand(Into)>>
| Finds all relationships between two nodes.
|
|
|

| <<query-plan-filter,Filter>>
| Filters each row coming from the child operator, only passing through rows that evaluate the predicates to `true`.
|
|
|

| <<query-plan-foreach,Foreach>>
a|
Performs a nested loop.
Yields rows from the left-hand operator and discards rows from the right-hand operator.
|
|
|

| <<query-plan-let-anti-semi-apply,LetAntiSemiApply>>
a|
Performs a nested loop.
Tests for the absence of a pattern predicate in queries containing multiple pattern predicates.
|
|
|

| <<query-plan-let-select-or-anti-semi-apply,LetSelectOrAntiSemiApply>>
a|
Performs a nested loop.
Tests for the absence of a pattern predicate that is combined with other predicates.
|
|
|

| <<query-plan-let-select-or-semi-apply,LetSelectOrSemiApply>>
a|
Performs a nested loop.
Tests for the presence of a pattern predicate that is combined with other predicates.
|
|
|

| <<query-plan-let-semi-apply,LetSemiApply>>
a|
Performs a nested loop.
Tests for the presence of a pattern predicate in queries containing multiple pattern predicates.
|
|
|

| <<query-plan-limit,Limit>>
| Returns the first 'n' rows from the incoming input.
|
|
|

| <<query-plan-load-csv,LoadCSV>>
| Loads data from a CSV source into the query.
| label:yes[]
|
|

| <<query-plan-locking-merge,LockingMerge>>
| Similar to the `Merge` operator but will lock the start and end node when creating a relationship if necessary.
|
|
|

| <<query-plan-merge,Merge>>
| The `Merge` operator will either read or create nodes and/or relationships.
|
|
|

| <<query-plan-multi-node-index-seek, MultiNodeIndexSeek>>
| Finds nodes using multiple index seeks.
| label:yes[]
|
|

| <<query-plan-node-by-id-seek,NodeByIdSeek>>
| Reads one or more nodes by ID from the node store.
| label:yes[]
|
|

| <<query-plan-node-by-label-scan,NodeByLabelScan>>
| Fetches all nodes with a specific label from the node label index.
| label:yes[]
|
|

| <<query-plan-node-count-from-count-store,NodeCountFromCountStore>>
| Uses the count store to answer questions about node counts.
| label:yes[]
|
|

| <<query-plan-node-hash-join,NodeHashJoin>>
| Executes a hash join on node ID.
|
|
| label:eager[]

| <<query-plan-node-index-contains-scan,NodeIndexContainsScan>>
| Examines all values stored in an index, searching for entries containing a specific string.
| label:yes[]
|
|

| <<query-plan-node-index-ends-with-scan,NodeIndexEndsWithScan>>
| Examines all values stored in an index, searching for entries ending in a specific string.
| label:yes[]
|
|

| <<query-plan-node-index-scan,NodeIndexScan>>
| Examines all values stored in an index, returning all nodes with a particular label with a specified property.
| label:yes[]
|
|

| <<query-plan-node-index-seek,NodeIndexSeek>>
| Finds nodes using an index seek.
| label:yes[]
|
|

| <<query-plan-node-index-seek-by-range,NodeIndexSeekByRange>>
| Finds nodes using an index seek where the value of the property matches the given prefix string.
| label:yes[]
|
|

| <<query-plan-node-left-right-outer-hash-join,NodeLeftOuterHashJoin>>
| Executes a left outer hash join.
|
|
| label:eager[]

| <<query-plan-node-left-right-outer-hash-join,NodeRightOuterHashJoin>>
| Executes a right outer hash join.
|
|
| label:eager[]

| <<query-plan-node-unique-index-seek,NodeUniqueIndexSeek>>
| Finds nodes using an index seek within a unique index.
| label:yes[]
|
|

| <<query-plan-node-unique-index-seek-by-range,NodeUniqueIndexSeekByRange>>
| Finds nodes using an index seek within a unique index where the value of the property matches the given prefix string.
| label:yes[]
|
|

| <<query-plan-optional,Optional>>
| Yields a single row with all columns set to `null` if no data is returned by its source.
|
|
|

| <<query-plan-optional-expand-all,OptionalExpand(All)>>
| Traverses relationships from a given node, producing a single row with the relationship and end node set to `null` if the predicates are not fulfilled.
|
|
|

| <<query-plan-optional-expand-into,OptionalExpand(Into)>>
| Traverses all relationships between two nodes, producing a single row with the relationship and end node set to `null` if no matching relationships are found (the start node is the node with the smallest degree).
|
|
|

| <<query-plan-ordered-aggregation,OrderedAggregation>>
a|
Like `EagerAggregation` but relies on the ordering of incoming rows.
Is not eager.
|
|
|

| <<query-plan-ordered-distinct,OrderedDistinct>>
| Like `Distinct` but relies on the ordering of incoming rows.
|
|
|

| <<query-plan-partial-sort,PartialSort>>
| Sorts a row by multiple columns if there is already an ordering.
|
|
|

| <<query-plan-partial-top,PartialTop>>
| Returns the first 'n' rows sorted by multiple columns if there is already an ordering.
|
|
|

| <<query-plan-procedure-call,ProcedureCall>>
| Calls a procedure.
|
|
|

| <<query-plan-produce-results,ProduceResults>>
| Prepares the result so that it is consumable by the user.
|
|
|

| <<query-plan-project-endpoints,ProjectEndpoints>>
| Projects the start and end node of a relationship.
|
|
|

| <<query-plan-projection,Projection>>
| Evaluates a set of expressions, producing a row with the results thereof.
| label:yes[]
|
|

| <<query-plan-relationship-count-from-count-store,RelationshipCountFromCountStore>>
| Uses the count store to answer questions about relationship counts.
| label:yes[]
|
|

| <<query-plan-remove-labels,RemoveLabels>>
| Deletes labels from a node.
|
| label:yes[]
|

| <<query-plan-roll-up-apply,RollUpApply>>
a|
Performs a nested loop.
Executes a pattern expression or pattern comprehension.
|
|
|

| <<query-plan-select-or-anti-semi-apply,SelectOrAntiSemiApply>>
a|
Performs a nested loop.
Tests for the absence of a pattern predicate if an expression predicate evaluates to `false`.
|
|
|

| <<query-plan-select-or-semi-apply,SelectOrSemiApply>>
| Performs a nested loop. Tests for the presence of a pattern predicate if an expression predicate evaluates to `false`.
|
|
|

| <<query-plan-semi-apply,SemiApply>>
| Performs a nested loop. Tests for the presence of a pattern predicate.
|
|
|

| <<query-plan-set-labels,SetLabels>>
| Sets labels on a node.
|
| label:yes[]
|

| <<query-plan-set-node-properties-from-map,SetNodePropertiesFromMap>>
| Sets properties from a map on a node.
|
| label:yes[]
|

| <<query-plan-set-property,SetProperty>>
| Sets a property on a node or relationship.
|
| label:yes[]
|

| <<query-plan-set-relationship-properties-from-map,SetRelationshipPropertiesFromMap>>
| Sets properties from a map on a relationship.
|
| label:yes[]
|

| <<query-plan-shortest-path,ShortestPath>>
| Finds one or all shortest paths between two previously matches node variables.
|
|
|

| <<query-plan-listing-constraints,ShowConstraints>>
| Lists the available constraints.
| label:yes[]
|
|

| <<query-plan-listing-functions,ShowFunctions>>
| Lists the available functions.
| label:yes[]
|
|

| <<query-plan-listing-indexes,ShowIndexes>>
| Lists the available indexes.
| label:yes[]
|
|

| <<query-plan-listing-procedures,ShowProcedures>>
| Lists the available procedures.
| label:yes[]
|
|

| <<query-plan-listing-transactions,ShowTransactions>>
| Lists the available transactions on the current server.
| label:yes[]
|
|

| <<query-plan-skip,Skip>>
| Skips 'n' rows from the incoming rows.
|
|
|

| <<query-plan-sort,Sort>>
| Sorts rows by a provided key.
|
|
| label:eager[]

| <<query-plan-terminating-transactions,TerminateTransactions>>
| Terminate transactions with the given IDs.
| label:yes[]
|
|

| <<query-plan-top,Top>>
| Returns the first 'n' rows sorted by a provided key.
|
|
| label:eager[]

| <<query-plan-triadic-build,TriadicBuild>>
| The `TriadicBuild` operator is used in conjunction with `TriadicFilter` to solve triangular queries.
|
|
|

| <<query-plan-triadic-filter,TriadicFilter>>
| The `TriadicFilter` operator is used in conjunction with `TriadicBuild` to solve triangular queries.
|
|
|

| <<query-plan-triadic-selection,TriadicSelection>>
| Solves triangular queries, such as the very common 'find my friend-of-friends that are not already my friend'.
|
|
|

| <<query-plan-undirected-relationship-by-id-seek,UndirectedRelationshipByIdSeek>>
| Reads one or more relationships by ID from the relationship store.
| label:yes[]
|
|

| <<query-plan-undirected-relationship-index-contains-scan,UndirectedRelationshipIndexContainsScan>>
| Examines all values stored in an index, searching for entries containing a specific string; for example, in queries including `CONTAINS`.
|
|
|

| <<query-plan-undirected-relationship-index-ends-with-scan,UndirectedRelationshipIndexEndsWithScan>>
| Examines all values stored in an index, searching for entries ending in a specific string; for example, in queries containing `ENDS WITH`.
|
|
|

| <<query-plan-undirected-relationship-index-scan,UndirectedRelationshipIndexScan>>
| Examines all values stored in an index, returning all relationships and their start and end nodes with a particular relationship type and a specified property.
|
|
|

| <<query-plan-undirected-relationship-index-seek,UndirectedRelationshipIndexSeek>>
| Finds relationships and their start and end nodes using an index seek.
|
|
|

| <<query-plan-undirected-relationship-index-seek-by-range,UndirectedRelationshipIndexSeekByRange>>
| Finds relationships and their start and end nodes using an index seek where the value of the property matches a given prefix string.
|
|
|

| <<query-plan-undirected-relationship-type-scan,UndirectedRelationshipTypeScan>>
| Fetches all relationships and their start and end nodes with a specific type from the relationship type index.
|
|
|

| <<query-plan-directed-union-relationship-types-scan,Directed Union Relationship Types Scan>>
| Fetches all relationships and their start and end nodes with at least one of the provided types from the relationship type index.
|
|
|

| <<query-plan-undirected-union-relationship-types-scan,Undirected Union Relationship Types Scan>>
| Fetches all relationships and their start and end nodes with at least one of the provided types from the relationship type index.
|
|
|

| <<query-plan-union,Union>>
| Concatenates the results from the right-hand operator with the results from the left-hand operator.
|
|
|

| <<query-plan-union-node-by-labels-scan,UnionNodeByLabelsScan>>
| Fetches all nodes that have at least one of the provided labels from the node label index.
|
|
|

| <<query-plan-unwind,Unwind>>
| Returns one row per item in a list.
|
|
|

| <<query-plan-value-hash-join,ValueHashJoin>>
| Executes a hash join on arbitrary values.
|
|
| label:eager[]

| <<query-plan-varlength-expand-all,VarLengthExpand(All)>>
| Traverses variable-length relationships from a given node.
|
|
|

| <<query-plan-varlength-expand-into,VarLengthExpand(Into)>>
| Finds all variable-length relationships between two nodes.
|
|
|

| <<query-plan-varlength-expand-pruning,VarLengthExpand(Pruning)>>
| Traverses variable-length relationships from a given node and only returns unique end nodes.
|
|
|

| <<query-plan-varlength-expand-pruning,VarLengthExpand(Pruning, BFS)>>
| Traverses variable-length relationships much like the <<query-plan-varlength-expand-all, `VarLengthExpand(All)`>> operator.
However, as an optimization, it instead performs a breadth-first search (BFS) and while expanding, some paths are not explored if they are guaranteed to produce an end node that has already been found (by means of a previous path traversal).
|
|
|
|===
