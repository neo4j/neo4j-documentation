[[execution-plan-operators-summary]]
= Execution plan operators at a glance

This table comprises all the execution plan operators ordered lexicographically.

* _Leaf_ operators, in most cases, locate the starting nodes and relationships required in order to execute the query.

* _Updating_ operators are used in queries that update the graph.

* _Eager_ operators <<eagerness-laziness, accumulate all their rows>> before piping them to the next operator.

[cols="35a,35a,6,10,14", options="header"]
|===
|Name                                                                       | Description | Leaf? | Updating? | Considerations
| <<query-plan-all-nodes-scan, AllNodesScan>>                                | Reads all nodes from the node store. | Y | |
| <<query-plan-either, Either>>                | Executes the left-hand side or if that is empty it executes the right-hand side. | | |
| <<query-plan-anti-semi-apply, AntiSemiApply>>                              | Performs a nested loop. Tests for the absence of a pattern predicate. | | |
| <<query-plan-apply, Apply>>                                                | Performs a nested loop. Yields rows from both the left-hand and right-hand side operators.  | | |
| <<query-plan-argument, Argument>>                                | Indicates the variable to be used as an argument to the right-hand side of an `Apply` operator.  | Y | |
| <<query-plan-assert-same-node, AssertSameNode>>                            | Used to ensure that no unique constraints are violated.  | | |
| <<query-plan-cache-properties, CacheProperties>>                 | Reads node or relationship properties and caches them. | | |
| <<query-plan-cartesian-product, CartesianProduct>>                 | Produces a cartesian product of the inputs from the left-hand and right-hand operators.  | | |
| <<query-plan-on-match-apply, OnMatchApply>>                         | Executes the left-hand side and for each row it produces it executes its right-hand side.  | | |
| <<query-plan-create-index, CreateIndex>>              | Creates an index for either nodes or relationships.  | | Y |
| <<query-plan-create-node-key-constraint, CreateNodeKeyConstraint>>     |  Creates a node key constraint on a set of properties for all nodes having a certain label.  | | Y |
| <<query-plan-create-nodes---relationships, Create>>              | Creates nodes and relationships.  | | Y |
| <<query-plan-create-node-property-existence-constraint, CreateNodePropertyExistenceConstraint>>     |  Creates an existence constraint on a property for all nodes having a certain label.  | | Y |
| <<query-plan-create-relationship-property-existence-constraint, CreateRelationshipPropertyExistenceConstraint>>     | Creates an existence constraint on a property for all relationships of a certain type.  | | Y |
| <<query-plan-create-unique-constraint, CreateUniqueConstraint>>                  | Creates a unique constraint on a property for all nodes having a certain label.  | | Y |
| <<query-plan-delete, Delete>>                                          | Deletes a node or relationship.  | | Y |
| <<query-plan-detach-delete, DetachDelete>>               | Deletes a node and its relationships.  | | Y |
| <<query-plan-directed-relationship-by-id-seek, DirectedRelationshipByIdSeek>>  | Reads one or more relationships by id from the relationship store.  | Y | |
| <<query-plan-distinct, Distinct>>                                          | Drops duplicate rows from the incoming stream of rows.  | | | Eager
| <<query-plan-create-constraint-only-if-it-does-not-already-exist, DoNothingIfExists(CONSTRAINT)>> | Checks if a constraint already exists, if it does then it stops the execution, if not it continues | Y | |
| <<query-plan-create-index-only-if-it-does-not-already-exist, DoNothingIfExists(INDEX)>> | Checks if an index already exists, if it does then it stops the execution, if not it continues | Y | |
| <<query-plan-drop-index-by-schema, DropIndex>> (deprecated syntax) | Drops an index from a property for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-drop-index-by-name, DropIndex>> (new syntax) | Drops an index using its name.  | Y | Y |
| <<query-plan-drop-constraint-by-name, DropConstraint>>     |  Drops a constraint using its name.  | Y | Y |
| <<query-plan-drop-node-key-constraint, DropNodeKeyConstraint>>     |  Drops a node key constraint from a set of properties for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-drop-node-property-existence-constraint, DropNodePropertyExistenceConstraint>>     | Drops an existence constraint from a property for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-drop-relationship-property-existence-constraint, DropRelationshipPropertyExistenceConstraint>>     | Drops an existence constraint from a property for all relationships of a certain type.  | Y | Y | Deprecated
| <<query-plan-drop-result, DropResult>>     | Produces zero rows when an expression is guaranteed to produce an empty result.  |  |  |
| <<query-plan-drop-unique-constraint, DropUniqueConstraint>>                  | Drops a unique constraint from a property for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-eager, Eager>>                                                | For isolation purposes, `Eager` ensures that operations affecting subsequent operations are executed fully for the whole dataset before continuing execution.  | | | Eager
| <<query-plan-eager-aggregation, EagerAggregation>>                         | Evaluates a grouping expression. | | | Eager
| <<query-plan-empty-result, EmptyResult>>                                   | Eagerly loads all incoming data and discards it. | | |
| <<query-plan-empty-row, EmptyRow>>                                   | Returns a single row with no columns. | Y | |
| <<query-plan-expand-all, Expand(All) >>                                    | Traverses incoming or outgoing relationships from a given node. | | |
| <<query-plan-expand-into, Expand(Into)>>                                   | Finds all relationships between two nodes. | | |
| <<query-plan-filter, Filter>>                                              | Filters each row coming from the child operator, only passing through rows that evaluate the predicates to `true`. | | |
| <<query-plan-foreach, Foreach>>                                              | Performs a nested loop. Yields rows from the left-hand operator and discards rows from the right-hand operator. | | |
| <<query-plan-let-anti-semi-apply, LetAntiSemiApply>>                       | Performs a nested loop. Tests for the absence of a pattern predicate in queries containing multiple pattern predicates. | | |
| <<query-plan-let-select-or-semi-apply, LetSelectOrSemiApply>>              | Performs a nested loop. Tests for the presence of a pattern predicate that is combined with other predicates. | | |
| <<query-plan-let-select-or-anti-semi-apply, LetSelectOrAntiSemiApply>>     | Performs a nested loop. Tests for the absence of a pattern predicate that is combined with other predicates. | | |
| <<query-plan-let-semi-apply, LetSemiApply>>                                | Performs a nested loop. Tests for the presence of a pattern predicate in queries containing multiple pattern predicates. | | |
| <<query-plan-limit, Limit>>                                                | Returns the first 'n' rows from the incoming input. | | |
| <<query-plan-load-csv, LoadCSV>>                                                  | Loads data from a CSV source into the query. | Y | |
| <<query-plan-lock-nodes, LockNodes>>                                                | Locks the start and end node when creating a relationship. | | |
| <<query-plan-merge-create-node, MergeCreateNode>>            | Creates the node when failing to find the node. | Y | Y |
| <<query-plan-merge-create-relationship, MergeCreateRelationship>>            | Creates the relationship when failing to find the relationship. | | Y |
| <<query-plan-node-by-id-seek, NodeByIdSeek>>                               | Reads one or more nodes by id from the node store. | Y | |
| <<query-plan-node-by-label-scan, NodeByLabelScan>>                         | Fetches all nodes with a specific label from the node label index. | Y | |
| <<query-plan-node-count-from-count-store, NodeCountFromCountStore>>        | Uses the count store to answer questions about node counts. | Y | |
| <<query-plan-node-hash-join, NodeHashJoin>>                                | Executes a hash join on node ids. | | | Eager
| <<query-plan-node-index-contains-scan, NodeIndexContainsScan>>             | Examines all values stored in an index, searching for entries containing a specific string. | Y | |
| <<query-plan-node-index-ends-with-scan, NodeIndexEndsWithScan>>        | Examines all values stored in an index, searching for entries ending in a specific string. | Y | |
| <<query-plan-node-index-scan, NodeIndexScan>>                              | Examines all values stored in an index, returning all nodes with a particular label having a specified property. | Y | |
| <<query-plan-node-index-seek, NodeIndexSeek>>                              | Finds nodes using an index seek. | Y | |
| <<query-plan-node-index-seek-by-range, NodeIndexSeekByRange>>                 | Finds nodes using an index seek where the value of the property matches the given prefix string. | Y | |
| <<query-plan-node-left-right-outer-hash-join, NodeLeftOuterHashJoin>>                 | Executes a left outer hash join. |  |  | Eager
| <<query-plan-node-left-right-outer-hash-join, NodeRightOuterHashJoin>>                 | Executes a right outer hash join. |  |  | Eager
| <<query-plan-node-unique-index-seek, NodeUniqueIndexSeek>>                        | Finds nodes using an index seek within a unique index. | Y | |
| <<query-plan-node-unique-index-seek-by-range, NodeUniqueIndexSeekByRange>>                 | Finds nodes using an index seek within a unique index where the value of the property matches the given prefix string. | Y | |
| <<query-plan-ordered-aggregation, OrderedAggregation>>                    | Like `EagerAggregation` but relies on the ordering of incoming rows. Is not eager. | | |
| <<query-plan-ordered-distinct, OrderedDistinct>>                    | Like `Distinct` but relies on the ordering of incoming rows. | | |
| <<query-plan-optional, Optional>>                    | Yields a single row with all columns set to `null` if no data is returned by its source. | | |
| <<query-plan-optional-expand-all, OptionalExpand(All)>>                    | Traverses relationships from a given node, producing a single row with the relationship and end node set to `null` if the predicates are not fulfilled. | | |
| <<query-plan-optional-expand-into, OptionalExpand(Into)>>                    | Traverses all relationships between two nodes, producing a single row with the relationship and end node set to `null` if no matching relationships are found (the start node will be the node with the smallest degree). | | |
| <<query-plan-partial-sort, PartialSort>>                               | Sorts a row by multiple columns if there is already an ordering.| | |
| <<query-plan-partial-top, PartialTop>>                                 | Returns the first 'n' rows sorted by multiple columns if there is already an ordering.| | |
| <<query-plan-procedure-call, ProcedureCall>>                               | Calls a procedure. | | |
| <<query-plan-produce-results, ProduceResults>>                                   | Prepares the result so that it is consumable by the user. | | |
| <<query-plan-project-endpoints, ProjectEndpoints>>                         | Projects the start and end node of a relationship. | | |
| <<query-plan-projection, Projection>>                                      | Evaluates a set of expressions, producing a row with the results thereof. | Y | |
| <<query-plan-relationship-count-from-count-store, RelationshipCountFromCountStore>>    | Uses the count store to answer questions about relationship counts. | Y | |
| <<query-plan-remove-labels, RemoveLabels>>   | Deletes labels from a node. | | Y |
| <<query-plan-roll-up-apply, RollUpApply>>      | Performs a nested loop. Executes a pattern expression or pattern comprehension. | | |
| <<query-plan-select-or-anti-semi-apply, SelectOrAntiSemiApply>>            | Performs a nested loop. Tests for the absence of a pattern predicate if an expression predicate evaluates to `false`. | | |
| <<query-plan-select-or-semi-apply, SelectOrSemiApply>>                     | Performs a nested loop. Tests for the presence of a pattern predicate if an expression predicate evaluates to `false`. | | |
| <<query-plan-semi-apply, SemiApply>>                                       | Performs a nested loop. Tests for the presence of a pattern predicate. | | |
| <<query-plan-set-labels, SetLabels>>                            | Sets labels on a node. | | Y |
| <<query-plan-set-node-properties-from-map, SetNodePropertiesFromMap>>          | Sets properties from a map on a node. | | Y |
| <<query-plan-set-property, SetProperty>>          | Sets a property on a node or relationship. | | Y |
| <<query-plan-set-relationship-properties-from-map, SetRelationshipPropertiesFromMap>>    | Sets properties from a map on a relationship. | | Y |
| <<query-plan-list-constraints, ShowConstraints>>      | Lists the available constraints. | Y | |
| <<query-plan-list-indexes, ShowIndexes>>              | Lists the available indexes. | Y | |
| <<query-plan-skip, Skip>>                                                  | Skips 'n' rows from the incoming rows. | | |
| <<query-plan-sort, Sort>>                                                  | Sorts rows by a provided key. | | | Eager
| <<query-plan-top, Top>>                                                    | Returns the first 'n' rows sorted by a provided key. | | | Eager
| <<query-plan-triadic-selection, TriadicSelection>>                                            | Solves triangular queries, such as the very common 'find my friend-of-friends that are not already my friend'. | | |
| <<query-plan-undirected-relationship-by-id-seek, UndirectedRelationshipByIdSeek>> | Reads one or more relationships by id from the relationship store. | Y | |
| <<query-plan-union, Union>>                                                | Concatenates the results from the right-hand operator with the results from the left-hand operator. | | |
| <<query-plan-unwind, Unwind>>                                              | Returns one row per item in a list. | | |
| <<query-plan-value-hash-join, ValueHashJoin>>                       | Executes a hash join on arbitrary values. | | | Eager
| <<query-plan-varlength-expand-all, VarLengthExpand(All)>>                                   | Traverses variable-length relationships from a given node. | | |
| <<query-plan-varlength-expand-into, VarLengthExpand(Into)>>                                   | Finds all variable-length relationships between two nodes. | | |
| <<query-plan-varlength-expand-pruning, VarLengthExpand(Pruning)>>                                   | Traverses variable-length relationships from a given node and only returns unique end nodes. | | |
|===
