[[administration-constraints]]
= Constraints

[abstract]
This section explains how to manage constraints used for ensuring data integrity.

* <<administration-constraints-introduction, Introduction>>
* <<administration-constraints-syntax, Syntax>>
* <<administration-constraints-examples, Examples>>
** <<administration-constraints-unique-nodes, Unique node property constraints>>
** <<administration-constraints-prop-exist-nodes, Node property existence constraints>>
** <<administration-constraints-prop-exist-rels, Relationship property existence constraints>>
** <<administration-constraints-node-key, Node key constraints>>
** <<administration-constraints-drop-constraint, Drop a constraint by name>>
** <<administration-constraints-list-constraint, List constraints>>
** <<administration-constraints-deprecated-syntax, Deprecated syntax>>

[[administration-constraints-introduction]]
== Introduction

The following constraint types are available:

*Unique node property constraints*::
Unique property constraints ensure that property values are unique for all nodes with a specific label.
Unique constraints do not mean that all nodes have to have a unique value for the properties -- nodes without the property are not subject to this rule.

*[enterprise-edition]#Node property existence constraints#*::
Node property existence constraints ensure that a property exists for all nodes with a specific label.
Queries that try to create new nodes of the specified label, but without this property, will fail.
The same is true for queries that try to remove the mandatory property.

*[enterprise-edition]#Relationship property existence constraints#*::
Property existence constraints ensure that a property exists for all relationships with a specific type.
All queries that try to create relationships of the specified type, but without this property, will fail.
The same is true for queries that try to remove the mandatory property.

*[enterprise-edition]#Node key constraints#*::
Node key constraints ensure that, for a given label and set of properties:
+
[lowerroman]
. All the properties exist on all the nodes with that label.
. The combination of the property values is unique.

+
Queries attempting to do any of the following will fail:

* Create new nodes without all the properties or where the combination of property values is not unique.
* Remove one of the mandatory properties.
* Update the properties so that the combination of property values is no longer unique.


[NOTE]
Node key constraints, node property existence constraints and relationship property existence constraints are only available in Neo4j Enterprise Edition.
Databases containing one of these constraint types cannot be opened using Neo4j Community Edition.

Creating a constraint has the following implications on indexes:

* Adding a unique property constraint on a property will also add a <<administration-indexes-create-a-single-property-index, single-property index>> on that property, so such an index cannot be added separately.
* Adding a node key constraint for a set of properties will also add a <<administration-indexes-create-a-composite-index, composite index>> on those properties, so such an index cannot be added separately.
* Cypher will use these indexes for lookups just like other indexes.
  Refer to <<administration-indexes-search-performance>> for more details on indexes.
* If a unique property constraint is dropped and the single-property index on the property is still required, the index will need to be created explicitly.
* If a node key constraint is dropped and the composite-property index on the properties is still required, the index will need to be created explicitly.

Additionally, the following is true for constraints:

* A given label can have multiple constraints, and unique and property existence constraints can be combined on the same property.
* Adding constraints is an atomic operation that can take a while -- all existing data has to be scanned before Neo4j can turn the constraint 'on'.
* Best practice is to give the constraint a name when it is created.
If the constraint is not explicitly named, it will get an auto-generated name.
* The constraint name must be unique among both indexes and constraints.
* Constraint creation is by default not idempotent, and an error will be thrown if you attempt to create the same constraint twice.
Using the keyword `IF NOT EXISTS` makes the command idempotent, and no error will be thrown if you attempt to create the same constraint twice.

[[administration-constraints-syntax]]
== Syntax

.Syntax for managing indexes
[options="header", width="100%", cols="5a,3, 3a"]
|===
| Command | Description | Comment

| [source, cypher]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
ON (n:LabelName)
ASSERT n.propertyName IS UNIQUE
[OPTIONS "{" option: value[, ...] "}"]
----
| Create a unique node property constraint.
.4+.^| Best practice is to give the constraint a name when it is created.
If the constraint is not explicitly named, it will get an auto-generated name.

The constraint name must be unique among both indexes and constraints.

The command is optionally idempotent, with the default behavior to throw an error if you attempt to create the same constraint twice.
With `IF NOT EXISTS`, no error is thrown and nothing happens should a constraint with the same name or same schema and constraint type already exist.
It may still throw an error should a conflicting index or constraint exist.

Index provider and configuration for the backing index can be specified using the `OPTIONS` clause.

| [source, cypher]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
ON (n:LabelName)
ASSERT n.propertyName IS NOT NULL
----
| [enterprise-edition]#Create a node property existence constraint.#
| [source, cypher]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
ON ()-"["R:RELATIONSHIP_TYPE"]"-()
ASSERT R.propertyName IS NOT NULL
----
| [enterprise-edition]#Create a relationship property existence constraint.#
| [source, cypher]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
ON (n:LabelName)
ASSERT (n.propertyName_1,
n.propertyName_2,
…
n.propertyName_n)
IS NODE KEY
[OPTIONS "{" option: value[, ...] "}"]
----
| [enterprise-edition]#Create a node key constraint.#
| [source, cypher]
----
DROP CONSTRAINT constraint_name [IF EXISTS]
----
| Drop a constraint.
| The command is optionally idempotent, with the default behavior to throw an error if you attempt to drop the same constraint twice.
With `IF EXISTS`, no error is thrown and nothing happens should the constraint not exist.
| [source, cypher]
----
SHOW [ALL\|UNIQUE\|NODE EXIST[S]\|RELATIONSHIP EXIST[S]\|EXIST[S]\|NODE KEY] CONSTRAINT[S] [BRIEF\|VERBOSE [OUTPUT]]
----
| List constraints in the database, either all or filtered on type.
|
| [source, cypher]
----
DROP CONSTRAINT
ON (n:LabelName)
ASSERT n.propertyName IS UNIQUE
----
| Drop a unique constraint without specifying a name.
.4+.^| [deprecated]#This syntax is deprecated.#
| [source, cypher]
----
DROP CONSTRAINT
ON (n:LabelName)
ASSERT EXISTS (n.propertyName)
----
| Drop an exists constraint without specifying a name.
| [source, cypher]
----
DROP CONSTRAINT
ON ()-"["R:RELATIONSHIP_TYPE"]"-()
ASSERT EXISTS (R.propertyName)
----
| Drop a relationship property existence constraint without specifying a name.
| [source, cypher]
----
DROP CONSTRAINT
ON (n:LabelName)
ASSERT (n.propertyName_1,
n.propertyName_2,
…
n.propertyName_n)
IS NODE KEY
----
| Drop a node key constraint without specifying a name.
|===

[[administration-constraints-examples]]
== Examples

[[administration-constraints-unique-nodes]]
=== Unique node property constraints

include::create-a-unique-constraint.asciidoc[leveloffset=+2]

include::create-a-unique-constraint-only-if-it-does-not-already-exist.asciidoc[leveloffset=+2]

include::create-a-unique-constraint-with-specified-index-provider-and-configuration.asciidoc[leveloffset=+2]

include::create-a-node-that-complies-with-unique-property-constraints.asciidoc[leveloffset=+2]

include::create-a-node-that-violates-a-unique-property-constraint.asciidoc[leveloffset=+2]

include::failure-to-create-a-unique-property-constraint-due-to-conflicting-nodes.asciidoc[leveloffset=+2]


[role=enterprise-edition]
[[administration-constraints-prop-exist-nodes]]
=== Node property existence constraints

include::create-a-node-property-existence-constraint.asciidoc[leveloffset=+2]

include::create-a-node-property-existence-constraint-only-if-it-does-not-already-exist.asciidoc[leveloffset=+2]

include::create-a-node-that-complies-with-property-existence-constraints.asciidoc[leveloffset=+2]

include::create-a-node-that-violates-a-property-existence-constraint.asciidoc[leveloffset=+2]

include::removing-an-existence-constrained-node-property.asciidoc[leveloffset=+2]

include::failure-to-create-a-node-property-existence-constraint-due-to-existing-node.asciidoc[leveloffset=+2]


[role=enterprise-edition]
[[administration-constraints-prop-exist-rels]]
=== Relationship property existence constraints

include::create-a-relationship-property-existence-constraint.asciidoc[leveloffset=+2]

include::create-a-relationship-property-existence-constraint-only-if-it-does-not-already-exist.asciidoc[leveloffset=+2]

include::create-a-relationship-that-complies-with-property-existence-constraints.asciidoc[leveloffset=+2]

include::create-a-relationship-that-violates-a-property-existence-constraint.asciidoc[leveloffset=+2]

include::removing-an-existence-constrained-relationship-property.asciidoc[leveloffset=+2]

include::failure-to-create-a-relationship-property-existence-constraint-due-to-existing-relationship.asciidoc[leveloffset=+2]


[role=enterprise-edition]
[[administration-constraints-node-key]]
=== Node key constraints

include::create-a-node-key-constraint.asciidoc[leveloffset=+2]

include::create-a-node-key-constraint-only-if-it-does-not-already-exist.asciidoc[leveloffset=+2]

include::create-a-node-key-constraint-with-specified-index-provider.asciidoc[leveloffset=+2]

include::create-a-node-key-constraint-with-specified-index-configuration.asciidoc[leveloffset=+2]

include::create-a-node-that-complies-with-node-key-constraints.asciidoc[leveloffset=+2]

include::create-a-node-that-violates-a-node-key-constraint.asciidoc[leveloffset=+2]

include::removing-a-node-key-constrained-property.asciidoc[leveloffset=+2]

include::failure-to-create-a-node-key-constraint-due-to-existing-node.asciidoc[leveloffset=+2]

[[administration-constraints-drop-constraint]]
=== Drop a constraint by name
include::drop-a-constraint.asciidoc[leveloffset=+2]

include::drop-a-non-existing-constraint.asciidoc[leveloffset=+2]

[[administration-constraints-list-constraint]]
=== List constraints

Listing constraints can be done with `SHOW CONSTRAINTS`, which will produce a table with the following columns:

.List constraints output
[options="header", width="100%", cols="1a,4,^.^,^"]
|===
| Column
| Description
| Brief output
| Verbose output

| `id`
| The id of the constraint.
| `+`
| `+`

| `name`
| Name of the constraint (explicitly set by the user or automatically assigned).
| `+`
| `+`

| `type`
| The ConstraintType of this constraint (`UNIQUENESS`, `NODE_PROPERTY_EXISTENCE`, `NODE_KEY`, or `RELATIONSHIP_PROPERTY_EXISTENCE`).
| `+`
| `+`

| `entityType`
| Type of entities this constraint represents (nodes or relationship).
| `+`
| `+`

| `labelsOrTypes`
| The labels or relationship types of this constraint.
| `+`
| `+`

| `properties`
| The properties of this constraint.
| `+`
| `+`

| `ownedIndexId`
| The id of the index associated to the constraint, or `null` if no index is associated with the constraint.
| `+`
| `+`

| `options`
| The options passed to `CREATE` command, for the index associated to the constraint, or `null` if no index is associated with the constraint.
|
| `+`

| `createStatement`
| Statement used to create the constraint.
|
| `+`
|===

[NOTE]
The deprecated built-in procedures for listing constraints, such as `db.constraints`, work as before and are not affected by the <<administration-security-administration-database-constraints, `SHOW CONSTRAINTS` privilege>>.

include::example-of-listing-constraints.asciidoc[leveloffset=+2]


[role=deprecated]
[[administration-constraints-deprecated-syntax]]
=== Deprecated syntax

include::drop-a-unique-constraint.asciidoc[leveloffset=+2]

include::drop-a-node-property-existence-constraint.asciidoc[leveloffset=+2]

include::drop-a-relationship-property-existence-constraint.asciidoc[leveloffset=+2]

include::drop-a-node-key-constraint.asciidoc[leveloffset=+2]
