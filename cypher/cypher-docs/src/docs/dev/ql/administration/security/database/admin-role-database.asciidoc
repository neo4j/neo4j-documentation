The administrators can use the following Cypher commands to manage Neo4j database administrative rights.
The components of the database privilege commands are:

* the command:
** `GRANT` – gives privileges to roles.
** `DENY` – denies privileges to roles.
** `REVOKE` – removes granted or denied privilege from roles.


* _database-privilege_
** `ACCESS` - allows access to a specific database.
** `START` - allows the specified database to be started.
** `STOP` - allows the specified database to be stopped.
** `CREATE INDEX` - allows indexes to be created on the specified database.
** `DROP INDEX` - allows indexes to be deleted on the specified database.
** `SHOW INDEX` - allows indexes to be listed on the specified database.
** `INDEX [MANAGEMENT]` - allows indexes to be created, deleted, and listed on the specified database.
** `CREATE CONSTRAINT` - allows constraints to be created on the specified database.
** `DROP CONSTRAINT` - allows constraints to be deleted on the specified database.
** `SHOW CONSTRAINT` - allows constraints to be listed on the specified database.
** `CONSTRAINT [MANAGEMENT]` - allows constraints to be created, deleted, and listed on the specified database.
** `CREATE NEW [NODE] LABEL` - allows labels to be created so that future nodes can be assigned them.
** `CREATE NEW [RELATIONSHIP] TYPE` - allows relationship types to be created, so that future relationships can be created with these types.
** `CREATE NEW [PROPERTY] NAME` - allows property names to be created, so that nodes and relationships can have properties with these names assigned.
** `NAME [MANAGEMENT]` - allows all of the name management capabilities: node labels, relationship types, and property names.
** `ALL [[DATABASE] PRIVILEGES]` - allows access, index, constraint, and name management for the specified database.
** `SHOW TRANSACTION` -  allows listing transactions and queries for the specified users on the specified database.
** `TERMINATE TRANSACTION` - allows ending transactions and queries for the specified users on the specified database.
** `TRANSACTION [MANAGEMENT]` - allows listing and ending transactions and queries for the specified users on the specified database.

* _name_
** The database to associate the privilege with.
+
[NOTE]
====
If you delete a database and create a new one with the same name, the new one will NOT have the privileges assigned to the deleted database.
====
** The _name_ component can be `+*+`, which means all databases.
Databases created after this command execution will also be associated with these privileges.
** The `DATABASE[S] _name_` part of the command can be replaced by `DEFAULT DATABASE`.
  If you restart the server and choose a new default database after this command execution, the new one will be associated with these privileges.

* _role[, ...]_
** The role or roles to associate the privilege with, comma-separated.

.Privilege command syntax
[options="header", width="100%", cols="3a,2"]
|===
| Command | Description

| [source, cypher]
GRANT database-privilege ON {DEFAULT DATABASE \| DATABASE[S] {name[, ...] \| *}} TO role[, ...]
| Grant a privilege to one or multiple roles.

| [source, cypher]
DENY database-privilege ON {DEFAULT DATABASE \| DATABASE[S] {name[, ...] \| *}} TO role[, ...]
| Deny a privilege to one or multiple roles.

| [source, cypher]
REVOKE GRANT database-privilege ON {DEFAULT DATABASE \| DATABASE[S] {name[, ...] \| *}} FROM role[, ...]
| Revoke a granted privilege from one or multiple roles.

| [source, cypher]
REVOKE DENY database-privilege ON {DEFAULT DATABASE \| DATABASE[S] {name[, ...] \| *}} FROM role[, ...]
| Revoke a denied privilege from one or multiple roles.

| [source, cypher]
REVOKE database-privilege ON {DEFAULT DATABASE \| DATABASE[S] {name[, ...] \| *}} FROM role[, ...]
| Revoke a granted or denied privilege from one or multiple roles.
|===

[NOTE]
====
`DENY` does NOT erase a granted privilege; they both exist.
Use `REVOKE` if you want to remove a privilege.
====
