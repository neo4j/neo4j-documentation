[[administration-security]]
= Security

[abstract]
--
This section explains how to use Cypher to manage Neo4j role-based access control and fine-grained security.
--

* <<administration-security-introduction, Introduction>>
* <<administration-security-syntax-rules, Syntax summaries>>
* <<administration-security-users-and-roles, User and role management>>
** <<administration-security-users, User management>>
*** <<administration-security-users-show, Listing users>>
*** <<administration-security-users-create, Creating users>>
*** <<administration-security-users-alter, Modifying users>>
*** <<administration-security-users-alter-password, Changing the current user's password>>
*** <<administration-security-users-drop, Deleting users>>
** <<administration-security-roles, Role management>>
*** <<administration-security-roles-public, The `PUBLIC` role>>
*** <<administration-security-roles-show, Listing roles>>
*** <<administration-security-roles-create, Creating roles>>
*** <<administration-security-roles-drop, Deleting roles>>
*** <<administration-security-roles-grant, Assigning roles>>
*** <<administration-security-roles-revoke, Revoking roles>>
* <<administration-security-subgraph, Graph and sub-graph access control>>
** <<administration-security-subgraph-introduction, The `GRANT`, `DENY` and `REVOKE` commands>>
** <<administration-security-subgraph-show, Listing privileges>>
** <<administration-security-subgraph-revoke, The `REVOKE` command>>
* <<administration-security-reads, Read privileges>>
** <<administration-security-reads-traverse, The `TRAVERSE` privilege>>
** <<administration-security-reads-read, The `READ` privilege>>
** <<administration-security-reads-match, The `MATCH` privilege>>
* <<administration-security-writes, Write privileges>>
** <<administration-security-writes-create, The `CREATE` privilege>>
** <<administration-security-writes-delete, The `DELETE` privilege>>
** <<administration-security-writes-set-label, The `SET LABEL` privilege>>
** <<administration-security-writes-remove-label, The `REMOVE LABEL` privilege>>
** <<administration-security-writes-set-property, The `SET PROPERTY` privilege>>
** <<administration-security-writes-merge, The `MERGE` privilege>>
** <<administration-security-writes-write, The `WRITE` privilege>>
** <<administration-security-writes-all, The `ALL GRAPH PRIVILEGES` privilege>>
* <<administration-security-administration, Security of administration>>
** <<administration-security-administration-introduction, The `admin` role>>
** <<administration-security-administration-database-privileges, Database administration>>
*** <<administration-security-administration-database-access, The database `ACCESS` privilege>>
*** <<administration-security-administration-database-startstop, The database `START`/`STOP` privileges>>
*** <<administration-security-administration-database-indexes, The `INDEX MANAGEMENT` privileges>>
*** <<administration-security-administration-database-constraints, The `CONSTRAINT MANAGEMENT` privileges>>
*** <<administration-security-administration-database-tokens, The `NAME MANAGEMENT` privileges>>
*** <<administration-security-administration-database-all, Granting `ALL DATABASE PRIVILEGES`>>
*** <<administration-security-administration-database-transaction, Granting `TRANSACTION MANAGEMENT` privileges>>
** <<administration-security-administration-dbms-privileges, DBMS administration>>
*** <<administration-security-administration-dbms-custom, Creating custom roles with DBMS privileges>>
*** <<administration-security-administration-dbms-privileges-role-management, The dbms `ROLE MANAGEMENT` privileges>>
*** <<administration-security-administration-dbms-privileges-user-management, The dbms `USER MANAGEMENT` privileges>>
*** <<administration-security-administration-dbms-privileges-database-management, The dbms `DATABASE MANAGEMENT` privileges>>
*** <<administration-security-administration-dbms-privileges-privilege-management, The dbms `PRIVILEGE MANAGEMENT` privileges>>
*** <<administration-security-administration-dbms-privileges-all, Granting `ALL DBMS PRIVILEGES`>>
* <<administration-built-in-roles, Built-in roles>>
* <<administration-security-limitations, Known limitations of security>>
** <<administration-security-limitations-indexes, Security and indexes>>
** <<administration-security-limitations-labels, Security and labels>>
** <<administration-security-limitations-db-operations, Security and count store operations>>

[[administration-security-introduction]]
== Introduction

[abstract]
--
This section introduces the sections on how to manage Neo4j role-based access control and fine-grained security.
--

Neo4j has a complex security model stored in the system graph, maintained in a special database called the `system` database.
All administrative commands need to be executing against the `system` database.
When connected to the DBMS over bolt, administrative commands are automatically routed to the `system` database.
For more information on how to manage multiple databases, refer to the section on <<administration-databases, administering databases>>.

Neo4j 3.1 introduced the concept of _role-based access control_.
It was possible to create users and assign them to roles to control whether the users could read, write and administer the database.
In Neo4j 4.0 this model was enhanced significantly with the addition of _privileges_, which are the underlying access-control rules by which the users rights are defined.

The original built-in roles still exist with almost the exact same access rights, but they are no-longer statically defined (see <<administration-built-in-roles, Built-in roles>>).
Instead they are defined in terms of their underlying _privileges_ and they can be modified by adding an removing these access rights.

In addition, any new roles created can by assigned any combination of _privileges_ to create the specific access control desired.
A major additional capability is _sub-graph_ access control whereby read-access to the graph can be limited to specific combinations of label, relationship-type and property.

[[administration-security-syntax-rules]]
== Syntax summaries
Almost all administration commands have variations in the commands. Parts of the command that are optional or can have multiple values are most common.
To show all versions of a command, a summary of the syntax will be presented. These summaries will use some special characters to indicate such variations.

The special characters and their meaning are as follows:

.Special characters in syntax summeries
[options="header", width="100%", cols="1a,3,3"]
|===
| Character | Meaning | Example

| `\|`
| Or, used to indicate alternative parts of a command. Needs to be part of a grouping.
| If the syntax needs to specify either a name or `*`, this can be indicated with `* \| name`.

| `{` and `}`
| Used to group parts of the command, common together with `\|`.
| To use the `or` in the syntax summary it needs to be in a group, `{* \| name}`.

| `[` and `]`
| Used to indicate an optional part of the command. It also groups alternatives together, when there can be either of the alternatives or nothing.
| If a keyword in the syntax can either be in singular or plural, we can indicate that the `S` is optional with `GRAPH[S]`.

| `...`
| Repeated pattern, the command part immediately before this is repeated.
| A comma separated list of names would be `name[, ...]`.

| `"`
| When a special character is part of the syntax itself, we surround it with `"` to indicate this.
| To include `{` in the syntax use `"{" { * \| name } "}"`, here we get either `{*}` or `{name}`.

|===

Any other characters do not have any special meaning, therefore not needing to be escaped.
An example that uses all special characters is granting the `READ` privilege:

[source, cypher]
----
GRANT READ
    "{" { * | property[, ...] } "}"
    ON GRAPH[S] { * | name[, ...] }
        [
            ELEMENT[S] { * | label-or-rel-type[, ...] }
            | NODE[S] { * | label[, ...] }
            | RELATIONSHIP[S] { * | rel-type[, ...] }
        ]
    TO role[, ...]
----

Some things to notice about this command is that it includes `{` and `}` in the syntax, and between them has a grouping of either a list of properties or the character `*`.
It also has multiple optional parts, including the entity part of the command which is the grouping following the graph name.

In difference, there is no need to escape any characters in the node property existence constraint creation command.
This since `(` and `)` are not special characters and `[` and `]` are not part of the command,
but indicate that the constraint name and `IF NOT EXISTS` are optional.

[source, cypher]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
ON (n:LabelName)
ASSERT EXISTS (n.propertyName)
----

include::administration-security-users-and-roles.adoc[leveloffset=+1]

[role=enterprise-edition]
include::administration-security-subgraph.adoc[leveloffset=+1]

[role=enterprise-edition]
include::administration-security-reads.adoc[leveloffset=+1]

[role=enterprise-edition]
include::administration-security-writes.adoc[leveloffset=+1]

[role=enterprise-edition]
include::administration-security-administration.adoc[leveloffset=+1]

[role=enterprise-edition]
include::administration-built-in-roles.adoc[leveloffset=+1]

[role=enterprise-edition]
include::administration-security-limitations.adoc[leveloffset=+1]
