The `GRANT` command allows an administrator to grant a privilege to a role in order to access an entity.
The `DENY` command allows an administrator to deny a privilege to a role in order to prevent access to an entity.
The `REVOKE` command allows an administrator to remove a previously granted or denied privilege.
The syntax is:

.Privilege command syntax
[options="header", width="100%", cols="3a,2"]
|===
| Command | Description

| [source, cypher]
GRANT graph-privilege ON GRAPH[S] {* \| name} [entity] TO role[, ...]
| Grant a privilege to one or multiple roles

| [source, cypher]
DENY graph-privilege ON GRAPH[S] {* \| name} [entity] TO role[, ...]
| Deny a privilege to one or multiple roles

| [source, cypher]
REVOKE GRANT graph-privilege ON GRAPH[S] {* \| name} [entity] FROM role[, ...]
| Revoke a granted privilege from one or multiple roles

| [source, cypher]
REVOKE DENY graph-privilege ON GRAPH[S] {* \| name} [entity] FROM role[, ...]
| Revoke a denied privilege from one or multiple roles

| [source, cypher]
REVOKE graph-privilege ON GRAPH[S] {* \| name} [entity] FROM role[, ...]
| Revoke a granted or denied privilege from one or multiple roles
|===

[NOTE]
These commands are almost identical to the <<administration-security-administration-introduction, database-privileges>> except for the use of the term `GRAPH`, the addition of an `entity` term, and the set of available _database-privileges_ differs from the _graph-privileges_.

Where the components are:

* _graph-privilege_
** `TRAVERSE`
+
allows the specified entities to be found
+
** `READ`
+
allows the specified properties to be read on the found entities.
Note that granting property READ access does not imply that the entities with that property can be found.
For example if there is also a DENY on it, the entity will not be found.
The props can be `+*+` which means all properties.
+
** `MATCH`
+
this combines both TRAVERSE and READ allowing an entity to be found and its properties read.
+
** `WRITE`
+
this privilege can only be assigned to all nodes, relationships and properties in the entire graph (this means that the entity part of the command must also be `ELEMENTS +*+` and cannot be more specific).
+
* _name_
** The graph or graphs to associate the privilege with. In {neo4j-version} there can be only one graph per database, and therefore this command uses the database name to refer to that graph.
   Note that if you delete a database and create a new one with the same name, the new one will _NOT_ have any of the privileges specifically assigned to the deleted graph.
** It can be `+*+` which means all graphs.
  Any new databases created after this command will also be associated with these privileges.
* _entity_
** The graph elements this privilege applies to:
*** `NODES` label (nodes with the specified label(s)).
*** `RELATIONSHIPS` type (relationships of the specific type(s)).
*** `ELEMENTS` label (both nodes and relationships).
** The label or type can be `+*+` which means all labels or types.
** Multiple labels or types can be specified, comma-separated.
** Defaults to `ELEMENTS` `+*+` if omitted.
* _roles_
** The role or roles to associate the privilege with, comma-separated.


NOTE: It is important to note that using DENY does NOT erase a GRANT command; they both exist.
The only way to erase a privilege is with REVOKE.
