The administrators can use Cypher commands to manage Neo4j graph administrative rights.
The components of the graph privilege commands are:

* the command:
** `GRANT` – gives privileges to roles.
** `DENY` – denies privileges to roles.
** `REVOKE` – removes granted or denied privilege from roles.

* _graph-privilege_
** Can be either a <<administration-security-reads, read privilege>> or <<administration-security-writes, write privilege>>.

* _name_
** The graph or graphs to associate the privilege with.
Because in Neo4j {neo4j-version} you can have only one graph per database, this command uses the database name to refer to that graph.
+
[NOTE]
====
If you delete a database and create a new one with the same name, the new one will _NOT_ have the privileges assigned to the deleted graph.
====
** It can be `+*+` which means all graphs.
Graphs created after this command execution will also be associated with these privileges.

** `HOME GRAPH` refers to the graph associated with the home database for that user. The default database will be used as home database if a user does not have a home database configured.
If the user's home database changes for any reason after privileges have been created then these privileges will be associated with the graph attached to the new database.
This can be quite powerful as it allows permissions to be switched from one graph to another simply by changing a user's home database.

* _entity_
** The graph elements this privilege applies to:
*** `NODES` label (nodes with the specified label(s)).
*** `RELATIONSHIPS` type (relationships of the specific type(s)).
*** `ELEMENTS` label (both nodes and relationships).
** The label or type can be `+*+` which means all labels or types.
** Multiple labels or types can be specified, comma-separated.
** Defaults to `ELEMENTS` `+*+` if omitted.
** Some of the commands for write privileges do not allow an _entity_ part, see  <<administration-security-writes, Write privileges>> for details.

* _role[, ...]_
** The role or roles to associate the privilege with, comma-separated.

.General graph privilege command syntax
[options="header", width="100%", cols="3a,2"]
|===
| Command | Description

| [source, cypher, role=noplay]
GRANT graph-privilege ON {HOME GRAPH \| GRAPH[S] {* \| name[, ...]}} [entity] TO role[, ...]
| Grant a privilege to one or multiple roles.

| [source, cypher, role=noplay]
DENY graph-privilege ON {HOME GRAPH \| GRAPH[S] {* \| name[, ...]}} [entity] TO role[, ...]
| Deny a privilege to one or multiple roles.

| [source, cypher, role=noplay]
REVOKE GRANT graph-privilege ON {HOME GRAPH \| GRAPH[S] {* \| name[, ...]}} [entity] FROM role[, ...]
| Revoke a granted privilege from one or multiple roles.

| [source, cypher, role=noplay]
REVOKE DENY graph-privilege ON {HOME GRAPH \| GRAPH[S] {* \| name[, ...]}} [entity] FROM role[, ...]
| Revoke a denied privilege from one or multiple roles.

| [source, cypher, role=noplay]
REVOKE graph-privilege ON {HOME GRAPH \| GRAPH[S] {* \| name[, ...]}} [entity] FROM role[, ...]
| Revoke a granted or denied privilege from one or multiple roles.
|===


[NOTE]
====
`DENY` does NOT erase a granted privilege; they both exist.
Use `REVOKE` if you want to remove a privilege.
====
