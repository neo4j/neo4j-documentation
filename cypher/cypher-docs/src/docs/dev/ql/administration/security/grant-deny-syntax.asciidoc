The administrators can use Cypher commands to manage Neo4j graph administrative rights.
The components of the graph privilege commands are:

* the command:
** `GRANT` – gives privileges to roles.
** `DENY` – denies privileges to roles.
** `REVOKE` – removes granted or denied privilege from roles.

* _graph-privilege_
** `TRAVERSE` - allows the specified entities to be found.
** `READ +{props}+` - allows the specified properties on the found entities to be read.
+
[NOTE]
====
Granting property `READ` access does not imply that the entities with that property can be found.
For example, if there is also a `DENY` on it, the entity will not be found.
The props can be `+*+`, which means all properties.
====
** `MATCH +{props}+` - combines both `TRAVERSE` and `READ`, allowing an entity to be found and its properties read.
** `WRITE` - this privilege can only be assigned to all nodes, relationships, and properties in the entire graph.
This means that the entity part of the command must also be `ELEMENTS` `+*+` and cannot be specific.

* _name_
** The graph or graphs to associate the privilege with.
Because in {neo4j.version} you can have only one graph per database, this command uses the database name to refer to that graph.
+
[NOTE]
====
If you delete a database and create a new one with the same name, the new one will _NOT_ have the privileges assigned to the deleted graph.
====
** It can be `+*+` which means all graphs.
Graphs created after this command execution will also be associated with these privileges.

* _entity_
** The graph elements this privilege applies to:
*** `NODES` label (nodes with the specified label(s)).
*** `RELATIONSHIPS` type (relationships of the specific type(s)).
*** `ELEMENTS` label (both nodes and relationships).
** The label or type can be `+*+` which means all labels or types.
** Multiple labels or types can be specified, comma-separated.
** Defaults to `ELEMENTS` `+*+` if omitted.

* _roles_
** The role or roles to associate the privilege with, comma-separated.

.Privilege command syntax
[options="header", width="100%", cols="3a,2"]
|===
| Command | Description

| [source, cypher]
GRANT graph-privilege ON GRAPH[S] {name \| *} [entity] TO roles
| Grant a privilege to one or multiple roles.

| [source, cypher]
DENY graph-privilege ON GRAPH[S] {name \| *} [entity] TO roles
| Deny a privilege to one or multiple roles.

| [source, cypher]
REVOKE GRANT graph-privilege ON GRAPH[S] {name \| *} [entity] FROM roles
| Revoke a granted privilege from one or multiple roles.

| [source, cypher]
REVOKE DENY graph-privilege ON GRAPH[S] {name \| *} [entity] FROM roles
| Revoke a denied privilege from one or multiple roles.

| [source, cypher]
REVOKE graph-privilege ON GRAPH[S] {name \| *} [entity] FROM roles
| Revoke a granted or denied privilege from one or multiple roles.
|===


[NOTE]
====
`DENY` does NOT erase a granted privilege; they both exist.
Use `REVOKE` if you want to remove a privilege.
====
