[[administration-indexes-search-performance]]
= Indexes for search performance

[abstract]
--
This section explains how to manage indexes used for search performance.
--

* <<administration-indexes-introduction, Introduction>>
* <<administration-indexes-syntax, Syntax>>
* <<administration-indexes-single-vs-composite-index, Composite index limitations>>
* <<administration-indexes-examples, Examples>>
** <<administration-indexes-create-a-single-property-index-for-nodes, Create a single-property index for nodes>>
** <<administration-indexes-create-a-single-property-index-for-relationships, Create a single-property index for relationships>>
** <<administration-indexes-create-a-single-property-index-only-if-it-does-not-already-exist, Create a single-property index only if it does not already exist>>
** <<administration-indexes-create-a-single-property-index-with-specified-index-provider, Create a single-property index with specified index provider>>
** <<administration-indexes-create-a-single-property-index-with-specified-index-configuration, Create a single-property index with specified index configuration>>
** <<administration-indexes-create-a-composite-index-for-nodes, Create a composite index for nodes>>
** <<administration-indexes-create-a-composite-index-for-relationships, Create a composite index for relationships>>
** <<administration-indexes-create-a-composite-index-with-specified-index-provider-and-configuration, Create a composite index with specified index provider and configuration>>
** <<administration-indexes-create-a-lookup-index-for-nodes, Create a lookup index for nodes>>
** <<administration-indexes-create-a-lookup-index-for-relationships, Create a lookup index for relationships>>
** <<administration-indexes-drop-an-index, Drop an index>>
** <<administration-indexes-drop-a-non-existing-index, Drop a non-existing index>>
** <<administration-indexes-list-indexes, Listing indexes>>
** <<administration-indexes-examples-deprecated-syntax, Deprecated syntax>>

This section describes how to manage indexes.
For query performance purposes, it is important to also understand how the indexes are used by the Cypher planner.
Refer to <<query-tuning>> for examples and in-depth discussions on how query plans result from different index and query scenarios.
See specifically <<query-tuning-indexes>> for examples of how various index scenarios result in different query plans.

For information on index configuration and limitations, refer to <<operations-manual#index-configuration, Operations Manual -> Index configuration>>.


[[administration-indexes-introduction]]
== Introduction

A database index is a redundant copy of some of the data in the database for the purpose of making searches of related data more efficient.
This comes at the cost of additional storage space and slower writes, so deciding what to index and what not to index is an important and often non-trivial task.

Once an index has been created, it will be managed and kept up to date by the DBMS.
Neo4j will automatically pick up and start using the index once it has been created and brought online.

Cypher enables the creation of indexes on one or more properties for all nodes or relationships that have a given label or relationship type:

* An index that is created on a single property for any given label or relationship type is called a _single-property index_.
* An index that is created on more than one property for any given label or relationship type is called a _composite index_.

Differences in the usage patterns between composite and single-property indexes are described in <<administration-indexes-single-vs-composite-index>>.

The following is true for indexes:

* Best practice is to give the index a name when it is created.
If the index is not explicitly named, it will get an auto-generated name.
* The index name must be unique among both indexes and constraints.
* Index creation is by default not idempotent, and an error will be thrown if you attempt to create the same index twice.
Using the keyword `IF NOT EXISTS` makes the command idempotent, and no error will be thrown if you attempt to create the same index twice.


[[administration-indexes-syntax]]
== Syntax

.Syntax for managing indexes
[options="header", width="100%", cols="5a,3, 3a"]
|===
| Command | Description | Comment

| [source, cypher, role=noplay]
----
CREATE [BTREE] INDEX [index_name] [IF NOT EXISTS]
FOR (n:LabelName)
ON (n.propertyName)
[OPTIONS "{" option: value[, ...] "}"]
----
| Create a single-property index on nodes.

Index provider and configuration can be specified using the `OPTIONS` clause.
.6+.^| Best practice is to give the index a name when it is created.
If the index is not explicitly named, it will get an auto-generated name.

The index name must be unique among both indexes and constraints.

The command is optionally idempotent, with the default behavior to throw an error if you attempt to create the same index twice.
With `IF NOT EXISTS`, no error is thrown and nothing happens should an index with the same name, schema or both already exist.
It may still throw an error should a constraint with the same name exist.

| [source, cypher, role=noplay]
----
CREATE [BTREE] INDEX [index_name] [IF NOT EXISTS]
FOR ()-"["r:TYPE_NAME"]"-()
ON (r.propertyName)
[OPTIONS "{" option: value[, ...] "}"]
----
| Create a single-property index on relationships.

Index provider and configuration can be specified using the `OPTIONS` clause.

| [source, cypher, role=noplay]
----
CREATE [BTREE] INDEX [index_name] [IF NOT EXISTS]
FOR (n:LabelName)
ON (n.propertyName_1,
    n.propertyName_2,
    …
    n.propertyName_n)
[OPTIONS "{" option: value[, ...] "}"]
----
| Create a composite index on nodes.

Index provider and configuration can be specified using the `OPTIONS` clause.

| [source, cypher, role=noplay]
----
CREATE [BTREE] INDEX [index_name] [IF NOT EXISTS]
FOR ()-"["r:TYPE_NAME"]"-()
ON (r.propertyName_1,
    r.propertyName_2,
    …
    r.propertyName_n)
[OPTIONS "{" option: value[, ...] "}"]
----
| Create a composite index on relationships.

Index provider and configuration can be specified using the `OPTIONS` clause.

| [source, cypher, role=noplay]
----
CREATE LOOKUP INDEX [index_name] [IF NOT EXISTS]
FOR (n)
ON EACH labels(n)
----
| Create a lookup index on nodes.

Lookup indexes do not support any `OPTIONS` values.

| [source, cypher, role=noplay]
----
CREATE LOOKUP INDEX [index_name] [IF NOT EXISTS]
FOR ()-"["r"]"-()
ON [EACH] type(r)
----
| Create a lookup index on relationships.

Lookup indexes do not support any `OPTIONS` values.

| [source, cypher, role=noplay]
----
DROP INDEX index_name [IF EXISTS]
----
| Drop an index, either a node, a relationship, or a lookup index.
| The command is optionally idempotent, with the default behavior to throw an error if you attempt to drop the same index twice.
With `IF EXISTS`, no error is thrown and nothing happens should the index not exist.

| [source, cypher, role=noplay]
----
SHOW [ALL\|BTREE\|FULLTEXT\|LOOKUP] INDEX[ES]
    [YIELD { * \| field[, ...] } [ORDER BY field[, ...]] [SKIP n] [LIMIT n]]
    [WHERE expression]
    [RETURN field[, ...] [ORDER BY field[, ...]] [SKIP n] [LIMIT n]]
----
| List indexes in the database, either all or filtered on B-tree, fulltext, or lookup indexes.
| When using the `RETURN` clause, the `YIELD` clause is mandatory and may not be omitted.

| [source, cypher, role=noplay]
----
DROP INDEX ON :LabelName(propertyName)
----
| Drop a single-property index on nodes without specifying a name.
.2+.^| [deprecated]#This syntax is deprecated.#

| [source, cypher, role=noplay]
----
DROP INDEX ON :LabelName (n.propertyName_1,
n.propertyName_2,
…
n.propertyName_n)
----
| Drop a composite index on nodes without specifying a name.
|===

<<query-using>> describes how to make the Cypher planner use specific indexes (especially in cases where the planner would not necessarily have used them).


[[administration-indexes-single-vs-composite-index]]
== Composite index limitations

Like single-property indexes, composite indexes support all predicates:

* equality check: `n.prop = value`
* list membership check: `n.prop IN list`
* existence check: `n.prop IS NOT NULL`
* range search: `n.prop > value`
* prefix search: `STARTS WITH`
* suffix search: `ENDS WITH`
* substring search: `CONTAINS`

However, predicates might be planned as existence check and a filter.
For most predicates, this can be avoided by following these restrictions:

* If there is any `equality check` and `list membership check` predicates,
they need to be for the first properties defined by the index.
* There can be up to one `range search` or `prefix search` predicate.
* There can be any number of `existence check` predicates.
* Any predicate after a `range search`, `prefix search` or `existence check` predicate has to be an `existence check` predicate.

However, the `suffix search` and `substring search` predicates are always planned as existence check and a filter and
any predicates following after will therefore also be planned as such.

For example, an index on nodes with `:Label(prop1,prop2,prop3,prop4,prop5,prop6)` and predicates:

```
WHERE n.prop1 = 'x' AND n.prop2 = 1 AND n.prop3 > 5 AND n.prop4 < 'e' AND n.prop5 = true AND n.prop6 IS NOT NULL
```

will be planned as:

```
WHERE n.prop1 = 'x' AND n.prop2 = 1 AND n.prop3 > 5 AND n.prop4 IS NOT NULL AND n.prop5 IS NOT NULL AND n.prop6 IS NOT NULL
```

with filters on `n.prop4 < 'e'` and `n.prop5 = true`, since `n.prop3` has a `range search` predicate.

And an index on nodes with `:Label(prop1,prop2)` with predicates:

```
WHERE n.prop1 ENDS WITH 'x' AND n.prop2 = false
```

will be planned as:

```
WHERE n.prop1 IS NOT NULL AND n.prop2 IS NOT NULL
```

with filters on `n.prop1 ENDS WITH 'x'` and `n.prop2 = false`, since `n.prop1` has a `suffix search` predicate.

Composite indexes require predicates on all properties indexed.
If there are predicates on only a subset of the indexed properties, it will not be possible to use the composite index.
To get this kind of fallback behavior, it is necessary to create additional indexes on the relevant sub-set of properties or on single properties.


[[administration-indexes-examples]]
== Examples

include::../indexes/create-a-single-property-index-for-nodes.asciidoc[leveloffset=+1]

include::../indexes/create-a-single-property-index-for-relationships.asciidoc[leveloffset=+1]

include::../indexes/create-a-single-property-index-only-if-it-does-not-already-exist.asciidoc[leveloffset=+1]

include::../indexes/create-a-single-property-index-with-specified-index-provider.asciidoc[leveloffset=+1]

include::../indexes/create-a-single-property-index-with-specified-index-configuration.asciidoc[leveloffset=+1]

include::../indexes/create-a-composite-index-for-nodes.asciidoc[leveloffset=+1]

include::../indexes/create-a-composite-index-for-relationships.asciidoc[leveloffset=+1]

include::../indexes/create-a-composite-index-with-specified-index-provider-and-configuration.asciidoc[leveloffset=+1]

include::../indexes/create-a-lookup-index-for-nodes.asciidoc[leveloffset=+1]

include::../indexes/create-a-lookup-index-for-relationships.asciidoc[leveloffset=+1]

include::../indexes/drop-an-index.asciidoc[leveloffset=+1]

include::../indexes/drop-a-non-existing-index.asciidoc[leveloffset=+1]

[[administration-indexes-list-indexes]]
=== Listing indexes

Listing indexes can be done with `SHOW INDEXES`, which will produce a table with the following columns:

.List indexes output
[options="header", width="100%", cols="1a,4,^.^,^"]
|===
| Column
| Description
| Default output
| Full output

| `id`
| The id of the index.
| `+`
| `+`

| `name`
| Name of the index (explicitly set by the user or automatically assigned).
| `+`
| `+`

| `state`
| Current state of the index.
| `+`
| `+`

| `populationPercent`
| % of index population.
| `+`
| `+`

| `uniqueness`
| Tells if the index is only meant to allow one value per key.
| `+`
| `+`

| `type`
| The IndexType of this index (`BTREE`, `FULLTEXT`, or `LOOKUP`).
| `+`
| `+`

| `entityType`
| Type of entities this index represents (nodes or relationship).
| `+`
| `+`

| `labelsOrTypes`
| The labels or relationship types of this index.
| `+`
| `+`

| `properties`
| The properties of this index.
| `+`
| `+`

| `indexProvider`
| The index provider for this index.
| `+`
| `+`

| `options`
| The options passed to `CREATE` command.
|
| `+`

| `failureMessage`
| The failure description of a failed index.
|
| `+`

| `createStatement`
| Statement used to create the index.
|
| `+`
|===

Listing indexes also allows for `WHERE` and `YIELD` clauses to filter the returned rows and columns.

[NOTE]
The deprecated built-in procedures for listing indexes, such as `db.indexes`, work as before and are not affected by the <<administration-security-administration-database-indexes, `SHOW INDEXES` privilege>>.

==== Listing indexes examples

include::../indexes/listing-all-indexes.asciidoc[leveloffset=+4]

include::../indexes/listing-indexes-with-filtering.asciidoc[leveloffset=+4]

[role=deprecated]
[[administration-indexes-examples-deprecated-syntax]]
=== Deprecated syntax

[NOTE]
This syntax does not support dropping relationship property indexes, these can only be dropped by name.

include::../indexes/drop-a-single-property-index.asciidoc[leveloffset=+2]

include::../indexes/drop-a-composite-index.asciidoc[leveloffset=+2]
