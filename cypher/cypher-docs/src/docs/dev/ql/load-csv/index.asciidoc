[[query-load-csv]]
= LOAD CSV

[abstract]
--
`LOAD CSV` is used to import data from CSV files.
--

* <<query-load-csv-introduction, Introduction>>
* <<csv-file-format, CSV file format>>
* <<load-csv-import-data-from-a-csv-file, Import data from a CSV file>>
* <<load-csv-import-data-from-a-remote-csv-file, Import data from a remote CSV file>>
* <<load-csv-import-data-from-a-csv-file-containing-headers, Import data from a CSV file containing headers>>
* <<load-csv-import-data-from-a-csv-file-with-a-custom-field-delimiter, Import data from a CSV file with a custom field delimiter>>
* <<load-csv-importing-large-amounts-of-data, Importing large amounts of data>>
* <<load-csv-setting-the-rate-of-periodic-commits, Setting the rate of periodic commits>>
* <<load-csv-import-data-containing-escaped-characters, Import data containing escaped characters>>


[[query-load-csv-introduction]]
== Introduction

* The URL of the CSV file is specified by using `FROM` followed by an arbitrary expression evaluating to the URL in question.
* It is required to specify a variable for the CSV data using `AS`.
* CSV files can be stored on the database server and are then accessible using a `+file:///+` URL.
  Alternatively, `LOAD CSV` also supports accessing CSV files via _HTTPS_, _HTTP_, and _FTP_.
* `LOAD CSV` supports resources compressed with _gzip_ and _Deflate_. Additionally `LOAD CSV` supports locally stored CSV files compressed with _ZIP_.
* `LOAD CSV` will follow _HTTP_ redirects but for security reasons it will not follow redirects that changes the protocol, for example if the redirect is going from _HTTPS_ to _HTTP_.
* `LOAD CSV` is often used in conjunction with the query hint `PERIODIC COMMIT`; more information on this may be found in <<query-using-periodic-commit-hint>>.

.Configuration settings for file URLs
<<operations-manual#config_dbms.security.allow_csv_import_from_file_urls, dbms.security.allow_csv_import_from_file_urls>>::
This setting determines if Cypher will allow the use of `+file:///+` URLs when loading data using `LOAD CSV`.
Such URLs identify files on the filesystem of the database server.
Default is _true_.
Setting `dbms.security.allow_csv_import_from_file_urls=false` will completely disable access to the file system for `LOAD CSV`.

<<operations-manual#config_dbms.directories.import, dbms.directories.import>>::
Sets the root directory for `+file:///+` URLs used with the Cypher `LOAD CSV` clause.
This should be set to a single directory relative to the Neo4j installation path on the database server.
All requests to load from `+file:///+` URLs will then be relative to the specified directory.
The default value set in the config settings is _import_.
This is a security measure which prevents the database from accessing files outside the standard <<operations-manual#file-locations, import directory>>,
similar to how a Unix `chroot` operates.
Setting this to an empty field will allow access to all files within the Neo4j installation folder.
Commenting out this setting will disable the security feature, allowing all files in the local system to be imported.
This is definitely not recommended.

File URLs will be resolved relative to the `dbms.directories.import` directory.
For example, a file URL will typically look like `+file:///myfile.csv+` or `+file:///myproject/myfile.csv+`.

* When using `+file:///+` URLs, spaces and other non-alphanumeric characters need to be URL encoded. footnote:[See https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding].
*  If `dbms.directories.import` is set to the default value _import_, using the above URLs in `LOAD CSV` would read from _<NEO4J_HOME>/import/myfile.csv_ and _<NEO4J_HOME>/import/myproject/myfile.csv_ respectively.
*  If it is set to _/data/csv_, using the above URLs in `LOAD CSV` would read from _<NEO4J_HOME>/data/csv/myfile.csv_ and _<NEO4J_HOME>/data/csv/myproject/myfile.csv_ respectively.

[NOTE]
====
The file location is relative to the import.
The config setting `dbms.directories.import` only applies to local disc and **not** to remote URLs.
====

See the examples below for further details.

include::csv-file-format.asciidoc[leveloffset=+1]

include::import-data-from-a-csv-file.asciidoc[]

include::import-data-from-a-remote-csv-file.asciidoc[]

include::import-data-from-a-csv-file-containing-headers.asciidoc[]

include::import-data-from-a-csv-file-with-a-custom-field-delimiter.asciidoc[]

include::importing-large-amounts-of-data.asciidoc[]

include::setting-the-rate-of-periodic-commits.asciidoc[]

include::import-data-containing-escaped-characters.asciidoc[]
