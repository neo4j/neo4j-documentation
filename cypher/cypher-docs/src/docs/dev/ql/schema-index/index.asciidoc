[[query-schema-index]]
= Indexes

[abstract]
--
This section explains how to work with indexes in Neo4j and Cypher.
--

* <<query-schema-index-introduction, Introduction>>
* <<schema-index-create-a-single-property-index, Create a single-property index>>
* <<schema-index-create-a-composite-index, Create a composite index>>
* <<schema-index-get-a-list-of-all-indexes-in-the-database, Get a list of all indexes in the database>>
* <<schema-index-drop-a-single-property-index, Drop a single-property index>>
* <<schema-index-drop-a-composite-index, Drop a composite index>>
* <<schema-index-use-index, Use index>>
 ** <<schema-index-equality-check-using-where-single-property-index, Equality check using `WHERE` (single-property index)>>
 ** <<schema-index-equality-check-using-where-composite-index, Equality check using `WHERE` (composite index)>>
 ** <<schema-index-range-comparisons-using-where-single-property-index, Range comparisons using `WHERE` (single-property index)>>
 ** <<schema-index-multiple-range-comparisons-using-where-single-property-index, Multiple range comparisons using `WHERE` (single-property index)>>
 ** <<schema-index-list-membership-check-using-in-single-property-index, List membership using `IN` (single-property index)>>
 ** <<schema-index-list-membership-check-using-in-composite-index, List membership check using `IN` (composite index)>>
 ** <<schema-index-prefix-search-using-starts-with-single-property-index, Prefix search using `STARTS WITH` (single-property index)>>
 ** <<schema-index-suffix-search-using-ends-with-single-property-index, Suffix search using `ENDS WITH` (single-property index)>>
 ** <<schema-index-substring-search-using-contains-single-property-index, Substring search using `CONTAINS` (single-property index)>>
 ** <<schema-index-existence-check-using-exists-single-property-index, Existence check using `exists` (single-property index)>>
 ** <<schema-index-spatial-distance-searches-single-property-index, Use index when executing a spatial distance search>>
 ** <<schema-index-spatial-bounding-box-searches-single-property-index, Use index when executing a spatial bounding box search>>
* <<explicit-indexes-procedures, Use built-in procedures to manage and use explicit indexes>>


[[query-schema-index-introduction]]
== Introduction

A database index is a redundant copy of some of the data in the database for the purpose of making searches of related data more efficient.
This comes at the cost of additional storage space and slower writes, so deciding what to index and what not to index is an important and often non-trivial task.

Cypher enables the creation of indexes on one or more properties for all nodes that have a given label:

* An index that is created on a single property for any given label is called a _single-property index_.
* An index that is created on more than one property for any given label is called a _composite index_.
  Differences in the usage patterns between composite and single-property indexes are detailed in the examples below.

[NOTE]
<<query-using>> describes how to make the Cypher planner use specific indexes (especially in cases where the planner would not necessarily have used them).

Once an index has been created, it will automatically be managed and kept up to date by the database when the graph is changed.
Neo4j will automatically pick up and start using the index once it has been created and brought online.

include::create-a-single-property-index.asciidoc[]

include::create-a-composite-index.asciidoc[]

include::get-a-list-of-all-indexes-in-the-database.asciidoc[]

include::drop-a-single-property-index.asciidoc[]

include::drop-a-composite-index.asciidoc[]

include::use-index.asciidoc[]

include::equality-check-using-where-single-property-index.asciidoc[]

include::equality-check-using-where-composite-index.asciidoc[]

include::range-comparisons-using-where-single-property-index.asciidoc[]

include::multiple-range-comparisons-using-where-single-property-index.asciidoc[]

include::list-membership-check-using-in-single-property-index.asciidoc[]

include::list-membership-check-using-in-composite-index.asciidoc[]

include::prefix-search-using-starts-with-single-property-index.asciidoc[]

include::suffix-search-using-ends-with-single-property-index.asciidoc[]

include::substring-search-using-contains-single-property-index.asciidoc[]

include::existence-check-using-exists-single-property-index.asciidoc[]

include::spatial-distance-searches-single-property-index.asciidoc[]

include::spatial-bounding-box-searches-single-property-index.asciidoc[]

include::explicit-index-procedures.adoc[leveloffset=+1]
