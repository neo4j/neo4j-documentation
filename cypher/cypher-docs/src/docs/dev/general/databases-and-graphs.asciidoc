[[neo4j-databases-graphs]]
= Neo4j databases and graphs

[abstract]
--
This section describes databases and graphs in Neo4j.
--

Cypher queries are executed against a Neo4j database, but normally apply to specific graphs.
It is important to understand the meaning of these terms and exactly when a graph is not a database.

DBMS::
A Neo4j Database Management System is capable of containing and managing multiple graphs contained in databases.
Client applications will connect to the DBMS and open sessions against it.
A client session provides access to any graph in the DBMS.

Graph::
This is a data model within a database.
Normally there is only one graph within each database, and many <<cypher-querying-updating-administering, administrative>> commands that refer to a specific graph do so using the database name.
+
Cypher queries executed in a session may declare which graph they apply to, or use a default, given by the session.
+
<<composite-databases, Composite databases>> may contain multiple graphs, by means of aliases to other databases.
Queries submitted to composite databases may refer to multiple graphs within the same query.

Database::
A database is a storage and retrieval mechanism for collecting data in a defined space on disk and in memory.

Most of the time Cypher queries are <<cypher-querying-updating-administering, reading or updating queries>>, which are run against a graph.
There are also administrative commands that apply to a database, or to the entire DBMS.
Administrative commands cannot be run in a session connected to a normal user database, but instead need to be run within a session connected to the _system_ database.
Administrative commands execute on the _system_ database. If an administrative command is submitted to a user database, it is rerouted to the _system_ database.

== The system database and the default database

All Neo4j servers contain a built-in database called `system`, which behaves differently than all other databases.
The `system` database stores system data and you can not perform graph queries against it.

A fresh installation of Neo4j includes two databases:

* `system` - the system database described above, containing meta-data on the DBMS and security configuration.
* `neo4j` - the default database, named using the config option `dbms.default_database=neo4j`.

For more information about the _system_ database, see the sections on <<administration-databases, Database management>> and <<access-control,Access control>>.

== Different editions of Neo4j

Neo4j has two editions, a commercial Enterprise Edition with additional performance and administrative features, and an open-source Community Edition.
Cypher works almost identically between the two editions, and as such most of this manual will not differentiate between them.
In the few cases where there is a difference in Cypher language support or behaviour between editions, these are highlighted as described below in <<cypher-limited-support>>.

However, it is worth listing up-front the key areas that are not supported in the open-source edition:

[options="header"]
|===
| Feature | Enterprise | Community
| <<administration-databases, Multi-database>> | Any number of user databases | Only `system` and one user database
| Role-based security | User, role, and privilege management for flexible <<access-control,access control>> and <<access-control-manage-privileges, sub-graph access control>>. | <<access-control-manage-users, Multi-user management>>. All users have full access rights.
| Constraints | <<administration-constraints-prop-exist-nodes, Existence constraints>>, <<administration-constraints-unique-nodes, uniqueness constraints>>, and <<administration-constraints-node-key, `NODE KEY` constraints>>.  | Only <<administration-constraints-unique-nodes, uniqueness constraints>>
|===


[[cypher-limited-support]]
== Limited Support Features

Some elements of Cypher do not work in all deployments of Neo4j, and we use specific markers to highlight these cases:

[options="header"]
|===
| Marker                | Description | Example
| `deprecated` | This feature is deprecated and will be removed in a future version
| [deprecated]#`DROP INDEX ON :Label(property)`#
| `enterprise-only`     | This feature only works in the enterprise edition of Neo4j
| [enterprise-edition]#`CREATE DATABASE foo`#
|===
