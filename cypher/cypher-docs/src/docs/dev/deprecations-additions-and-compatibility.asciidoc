[[cypher-deprecations-additions-removals-compatibility]]
= Deprecations, additions and compatibility

[abstract]
--
Cypher is a language that is constantly evolving.
New features are added to the language continuously, and occasionally, some features become deprecated and are subsequently removed.
--

This section list all of the features that have been removed, deprecated, added, or extended in different Cypher versions.
Replacement syntax for deprecated and removed features are also indicated.

[[cypher-deprecations-additions-removals-5.2]]
== Version 5.2

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH ()-[r*]-()-[r*]-()
----
----
MATCH p = ()-[r*]-(), q = ()-[r*]-()
----

----
MATCH ()-[r*]-() MATCH ()-[r*]-()
----
a|

The use of the same relationship variable for multiple variable length relationships is deprecated.

|===

[[cypher-deprecations-additions-removals-5.1]]
== Version 5.1

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE TEXT INDEX ... OPTIONS {indexProvider: `text-1.0`}
----
a|

The text index provider `text-1.0` is deprecated and replaced by `text-2.0`.

|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
CREATE TEXT INDEX ... OPTIONS {indexProvider: `text-2.0`}
----
a|

A new text index provider is available, `text-2.0`. 
This is also the default provider if none is given.

|===

[[cypher-deprecations-additions-removals-5.0]]
== Version 5.0

=== Removed features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW EXISTS CONSTRAINTS
----
[source, cypher, role="noheader"]
----
SHOW NODE EXISTS CONSTRAINTS
----
[source, cypher, role="noheader"]
----
SHOW RELATIONSHIP EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
[source, cypher, role="noheader"]
----
SHOW NODE [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
[source, cypher, role="noheader"]
----
SHOW REL[ATIONSHIP] [PROPERTY] EXIST[ENCE] CONSTRAINTS
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW INDEXES BRIEF
----
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS BRIEF
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW INDEXES
----
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW INDEXES VERBOSE
----
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS VERBOSE
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW INDEXES YIELD *
----
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS YIELD *
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
DROP INDEX ON :Label(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
DROP INDEX name
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS NODE KEY
----
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS UNIQUE
----
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT exists(n.prop)
----
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON ()-[r:Type]-() ASSERT exists(r.prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
DROP CONSTRAINT name
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE INDEX ON :Label(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE INDEX FOR (n:Label) ON (n.prop)
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ON ... ASSERT ...
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT FOR ... REQUIRE ...
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE BTREE INDEX ...
----
.2+.^a|
B-tree indexes are removed.

B-tree indexes used for string queries are replaced by:
[source, cypher, role="noheader"]
----
CREATE TEXT INDEX ...
----

B-tree indexes used for spatial queries are replaced by:
[source, cypher, role="noheader"]
----
CREATE POINT INDEX ...
----

B-tree indexes used for general queries or property value types are replaced by:
[source, cypher, role="noheader"]
----
CREATE [RANGE] INDEX ...
----

These new indexes may be combined for multiple use cases.

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE INDEX
...
OPTIONS "{" btree-option: btree-value[, ...] "}"
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW BTREE INDEXES
----
a|
B-tree indexes are removed.

Replaced by:
[source, cypher, role="noheader"]
----
SHOW {POINT \| RANGE \| TEXT} INDEXES

----
a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
USING BTREE INDEXES
----
a|
B-tree indexes are removed.

Replaced by:
[source, cypher, role="noheader"]
----
USING {POINT \| RANGE \| TEXT} INDEX
----


a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT
...
OPTIONS "{" btree-option: btree-value[, ...] "}"
----
a|
Node key and uniqueness constraints backed by B-tree indexes are removed.

Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ...
----
Constraints used for string properties require an additional text index to cover the string queries properly.
Constraints used for point properties require an additional point index to cover the spatial queries properly.

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW INDEXES YIELD uniqueness
----
a|
The `uniqueness` output has been removed along with the concept of index uniqueness, as it actually belongs to the constraint and not the index.

The new column `owningConstraint` was introduced to indicate whether an index belongs to a constraint or not.

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS YIELD ownedIndexId
----
a|
The `ownedIndexId` output has been removed and replaced by the new `ownedIndex` column.

a|
label:syntax[]
label:removed[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON DEFAULT DATABASE
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
ON HOME DATABASE
----


a|
label:syntax[]
label:removed[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON DEFAULT GRAPH
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
ON HOME GRAPH
----


a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
SHOW TRANSACTIONS YIELD allocatedBytes
----
a|
The `allocatedBytes` output has been removed, because it was never tracked and thus was always 0.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
exists(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
prop IS NOT NULL
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
NOT exists(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
prop IS NULL
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
0...
----
a|
Replaced by `+0o...+`.


a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
0X...
----
a|
Only `+0x...+` (lowercase x) is supported.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH ()-[r]-()
RETURN [ ()-[r]-()-[r]-() \| r ] AS rs
----
a|
Remaining support for repeated relationship variables is removed.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
WHERE [1,2,3]
----
a|
Automatic coercion of a list to a boolean is removed.

Replaced by:
[source, cypher, role="noheader"]
----
WHERE NOT isEmpty([1, 2, 3])
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
distance(n.prop, point({x:0, y:0})
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
point.distance(n.prop, point({x:0, y:0})
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
point({x:0, y:0}) <= point({x:1, y:1}) <= point({x:2, y:2})
----
a|
The ability to use operators `<`, `<=`, `>`, and `>=` on spatial points is removed.
Instead, use:
[source, cypher, role="noheader"]
----
point.withinBBox(point({x:1, y:1}), point({x:0, y:0}), point({x:2, y:2}))
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
USING PERIODIC COMMIT ...
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CALL {
  ...
} IN TRANSACTIONS
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE (a {prop:7})-[r:R]->(b {prop: a.prop})
----
a|
It is no longer allowed to have `CREATE` clauses in which a variable introduced in the pattern is also referenced from the same pattern.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
CALL { RETURN 1 }
----
a|
Unaliased expressions are no longer supported in subquery `RETURN` clauses. Replaced by:
[source, cypher, role="noheader"]
----
CALL { RETURN 1 AS one }
----

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (a) RETURN (a)--()
----
a|
Pattern expressions producing lists of paths are no longer supported, but they can still be used as existence predicates, for example in `WHERE` clauses.
Instead, use a pattern comprehension:
[source, cypher, role="noheader"]
----
MATCH (a) RETURN [p=(a)--() \| p]
----

a|
label:functionality[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n) RETURN n.propertyName_1, n.propertyName_2 + count(*)
----
a|
Implied grouping keys are no longer supported.
Only expressions that do _not_ contain aggregations are still considered grouping keys.
In expressions that contain aggregations, the leaves must be either:

- An aggregation
- A literal
- A parameter
- A variable, *ONLY IF* it is either:
1) A projection expression on its own (e.g. the `n` in `RETURN n AS myNode, n.value + count(*)`) +
2) A local variable in the expression (e.g the `x` in `RETURN n, n.prop + size([ x IN range(1, 10) \| x ]`)
- Property access, *ONLY IF* it is also a projection expression on its own (e.g. the `n.prop` in `RETURN n.prop, n.prop + count(*)`) +
- Map access, *ONLY IF* it is also a projection expression on its own (e.g. the `map.prop` in `WITH {prop: 2} AS map RETURN map.prop, map.prop + count(*)`)


|===

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (n)-[r:REL]->(m) SET n=r
----
a|
Use the `properties()` function instead to get the map of properties of nodes/relationships that
can then be used in a `SET` clause:
[source, cypher, role="noheader"]
----
MATCH (n)-[r:REL]->(m) SET n=properties(r)
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (a), (b), allShortestPaths((a)-[r]->(b)) RETURN b

MATCH (a), (b), shortestPath((a)-[r]->(b)) RETURN b
----
a|
`shortestPath` and `allShortestPaths` without <<cypher-pattern-varlength, variable-length relationship>> are deprecated. Instead, use a `MATCH` with a `LIMIT` of 1 or:
[source, cypher, role="noheader"]
----
MATCH (a), (b), shortestPath((a)-[r*1..1]->(b)) RETURN b
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE DATABASE databaseName.withDot ...
----
a|
Creating a database with unescaped dots in the name has been deprecated, instead escape the database name:

[source, cypher, role="noheader"]
----
CREATE DATABASE `databaseName.withDot` ...
----

|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
CREATE INDEX ...
----
a|
The default index type is changed from B-tree to range index.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW INDEXES
----
a|
The new column `owningConstraint` was added and will be returned by default from now on.
It will list the name of the constraint that the index is associated with or `null`, in case it is not associated with any constraint.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS
----
a|
The new column `ownedIndex` was added and will be returned by default from now on.
It will list the name of the index associated with the constraint or `null`, in case no index is associated with it.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW TRANSACTIONS YIELD *
----
a|
New columns for the current query are added:

* `currentQueryStartTime`
* `currentQueryStatus`
* `currentQueryActiveLockCount`
* `currentQueryElapsedTime`
* `currentQueryCpuTime`
* `currentQueryWaitTime`
* `currentQueryIdleTime`
* `currentQueryAllocatedBytes`
* `currentQueryPageHits`
* `currentQueryPageFaults`

These columns are only returned in the full set (with `YIELD`) and not by default.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
TERMINATE TRANSACTIONS transaction-id[,...]
YIELD { * \| field[, ...] }
[ORDER BY field[, ...]]
[SKIP n]
[LIMIT n]
[WHERE expression]
[RETURN field[, ...] [ORDER BY field[, ...]] [SKIP n] [LIMIT n]]
----
a|
Terminate transaction now allows `YIELD`.
The `WHERE` clause is not allowed on its own, as it is for `SHOW`, but needs the `YIELD` clause.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW TRANSACTIONS [transaction-id[,...]]
----
[source, cypher, role="noheader"]
----
TERMINATE TRANSACTIONS transaction-id[,...]
----
a|
`transaction-id` now allows general expressions resolving to a string or a list of strings instead of just parameters.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW TRANSACTIONS [transaction-id[,...]]
YIELD field[, ...]
  [ORDER BY field[, ...]]
  [SKIP n]
  [LIMIT n]
  [WHERE expression]
TERMINATE TRANSACTIONS transaction-id[,...]
YIELD field[, ...]
  [ORDER BY field[, ...]]
  [SKIP n]
  [LIMIT n]
  [WHERE expression]
RETURN field[, ...]
  [ORDER BY field[, ...]]
  [SKIP n]
  [LIMIT n]
----
a|
The `SHOW` and `TERMINATE TRANSACTIONS` commands can be combined in the same query.
The query does not require a specific order and there can be zero or more of each command type, however at least one command is needed.

When the command is not in standalone mode, the `YIELD` and `RETURN` clauses are mandatory.
`YIELD *` is not allowed.

`transaction-id` is a comma-separated list of one or more quoted strings.
It could also be an expression resolving to a string or a list of strings (for example the output column from `SHOW`).

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
GRANT EXECUTE BOOSTED PROCEDURE ...
GRANT EXECUTE BOOSTED FUNCTION ...
----
a|
Not a syntax change but a semantic one.
The `EXECUTE BOOSTED` privilege will no longer include an implicit `EXECUTE` privilege when granted.
That means that to execute a procedure or a function with boosted privileges both `EXECUTE` and `EXECUTE BOOSTED` are needed.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
[GRANT\|DENY] [IMMUTABLE] ...
----
a|
Privileges can be specified as `IMMUTABLE`, which means that they cannot be altered by users with Privilege Management.
They can only be administered with auth disabled.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
REVOKE [IMMUTABLE] ...
----
a|
`IMMUTABLE` can now be specified with the `REVOKE` command to specify that only immutable privileges should be revoked.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW DATABASES
----
a|
Changes to the default columns in the result:

* The `writer`, `type`, and `constituents` columns have been added.
* The values returned in the `role` column have changes to be just `primary`, `secondary`, or `unknown`.
* The `error` column has been renamed to `statusMessage`.

The following columns have been added to the full result set (with `YIELD`) and not by default:

* `creationTime`
* `lastStartTime`
* `lastStopTime`
* `store`
* `currentPrimariesCount`
* `currentSecondariesCount`
* `requestedPrimariesCount`
* `requestedSecondariesCount`

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
MATCH (n)
RETURN
CASE n.prop
    WHEN null THEN 'one'
    ELSE 'two'
END
----
a|
Previously, if `n.prop` is `null`, `'one'` would be returned.
Now, `'two'` is returned.

This is a semantic change only.
Since `null = null` returns `false` in Cypher, a `WHEN` expression no longer matches on `null`.

If matching on `null` is required, please use `IS NULL` instead:
[source, cypher, role="noheader"]
----
MATCH (n)
RETURN
CASE
    WHEN n.prop IS NULL THEN 'one'
    ELSE 'two'
END
----

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
RETURN round(val, precision)
----
a|
Rounding infinity and NaN values will now return the original value instead of
returning an integer approximation for precision 0 and throwing an exception for precision > 0:

[cols="1,1,1"]
!===
! !old value !new value

!round(Inf)
!9223372036854776000.0
!Inf

!round(Inf, 1)
!exception
!Inf

!round(NaN)
!0
!NaN

!round(Inf, 1)
!exception
!NaN

!===
To get an integer value use the `toInteger` function.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
CREATE [OR REPLACE] ALIAS compositeDatabase.aliasName ...
ALTER ALIAS compositeDatabase.aliasName
DROP ALIAS compositeDatabase.aliasName
----
a| The alias commands can now handle aliases in composite databases.

a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW ALIAS[ES] aliasName FOR DATABASE[S]
SHOW ALIAS[ES] compositeDatabase.aliasName FOR DATABASE[S]
----
a| `SHOW ALIAS` now allows for easy filtering on alias name.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
CREATE [OR REPLACE] ALIAS compositeDatabase.aliasName ...
ALTER ALIAS compositeDatabase.aliasName
DROP ALIAS compositeDatabase.aliasName
----
a| The alias commands can now handle aliases in composite databases.

a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW ALIAS[ES] aliasName FOR DATABASE[S]
SHOW ALIAS[ES] compositeDatabase.aliasName FOR DATABASE[S]
----
a| `SHOW ALIAS` now allows for easy filtering on alias name.

|===

=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE [OR REPLACE] COMPOSITE DATABASE databaseName [IF NOT EXISTS] [WAIT [n [SEC[OND[S]]]]\|NOWAIT]
DROP COMPOSITE DATABASE databaseName [IF EXISTS] [DUMP DATA \| DESTROY DATA] [WAIT [n [SEC[OND[S]]]]\|NOWAIT]
----
a| New Cypher command for creating and dropping composite databases.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
CREATE COMPOSITE DATABASE
DROP COMPOSITE DATABASE
COMPOSITE DATABASE MANAGEMENT
----
a|
New privileges that allow a user to `CREATE` and/or `DROP` composite databases.

a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
1_000_000, 0x_FF_FF, 0o_88_88
----
a|
Cypher now supports number literals with underscores between digits.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
isNaN(n.prop)
----
a|
New function which returns whether the given number is `NaN`.
`NaN` is a special floating point number defined in the Floating-Point Standard IEEE 754.
This function was introduced since comparisons including `NaN = NaN` returns false.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
NaN, Inf, Infinity
----
a|
Cypher now supports float literals for the values `Infinity` and `NaN`.
`NaN` defines a quiet not-a-number value and does not throw any exceptions in arithmetic operations.
Both values are implemented according to the Floating-Point Standard IEEE 754.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
COUNT { (n) WHERE n.foo = "bar" }
----
a|
New expression which returns the number of results of a subquery.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE DATABASE ... TOPOLOGY n PRIMAR{Y\|IES} [m SECONDAR{Y\|IES}]
----
a|
New sub-clause for `CREATE DATABASE`, to specify the number of servers hosting a database, when creating a database in cluster environments.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
ALTER DATABASE ... SET TOPOLOGY n PRIMAR{Y\|IES} [m SECONDAR{Y\|IES}]
----
a|
New sub-clause for `ALTER DATABASE`, which allows modifying the number of servers hosting a database in cluster environments.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
ENABLE SERVER ...
----
a|
New Cypher command for enabling servers.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
ALTER SERVER ... SET OPTIONS ...
----
a|
New Cypher command for setting options for a server.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
RENAME SERVER ... TO ...
----
a|
New Cypher command for changing the name of a server.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
REALLOCATE DATABASES
----
a|
New Cypher command for re-balancing what servers host which databases.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
DEALLOCATE DATABASE[S] FROM SERVER[S] ...
----
a|
New Cypher command for moving all databases from servers.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
DROP SERVER ...
----
a|
New Cypher command for dropping servers.

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW SERVERS
----
a|
New Cypher command for listing servers.

a|
label:functionality[]
label:new[] +
New privileges:
[source, cypher, role="noheader"]
----
SERVER MANAGEMENT
----
[source, cypher, role="noheader"]
----
SHOW SERVERS
----
a|
New privileges that allow a user to create, modify, reallocate, deallocate, drop and list servers.

|===

[[cypher-deprecations-additions-removals-4.4]]
== Version 4.4

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (n) RETURN n.propertyName_1, n.propertyName_2 + count(*)
----
a|
Implied grouping keys are deprecated.
Only expressions that do _not_ contain aggregations are still considered grouping keys.
In expressions that contain aggregations, the leaves must be either:

- An aggregation
- A literal
- A parameter
- A variable, *ONLY IF* it is either: +
1) A projection expression on its own (e.g. the `n` in `RETURN n AS myNode, n.value + count(*)`) +
2) A local variable in the expression (e.g the `x` in `RETURN n, n.prop + size([ x IN range(1, 10) \| x ]`)
- Property access, *ONLY IF* it is also a projection expression on its own (e.g. the `n.prop` in `RETURN n.prop, n.prop + count(*)`) +
- Map access, *ONLY IF* it is also a projection expression on its own (e.g. the `map.prop` in `WITH {prop: 2} AS map RETURN map.prop, map.prop + count(*)`)

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
USING PERIODIC COMMIT ...
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CALL {
  ...
} IN TRANSACTIONS
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE (a {prop:7})-[r:R]->(b {prop: a.prop})
----
a|
`CREATE` clauses in which a variable introduced in the pattern is also referenced from the same pattern are deprecated.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ON ... ASSERT ...
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT FOR ... REQUIRE ...
----

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE BTREE INDEX ...
----
.2+.^a|
B-tree indexes are deprecated.

B-tree indexes used for string queries are replaced by:
[source, cypher, role="noheader"]
----
CREATE TEXT INDEX ...
----

B-tree indexes used for spatial queries are replaced by:
[source, cypher, role="noheader"]
----
CREATE POINT INDEX ...
----

B-tree indexes used for general queries or property value types are replaced by:
[source, cypher, role="noheader"]
----
CREATE RANGE INDEX ...
----

These new indexes may be combined for multiple use cases.

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE INDEX
...
OPTIONS "{" btree-option: btree-value[, ...] "}"
----


a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW BTREE INDEXES
----
a|
B-tree indexes are deprecated.

Replaced by:
[source, cypher, role="noheader"]
----
SHOW {POINT \| RANGE \| TEXT} INDEXES
----

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
USING BTREE INDEX
----
a|
B-tree indexes are deprecated.

Replaced by:
[source, cypher, role="noheader"]
----
USING {POINT \| RANGE \| TEXT} INDEX
----

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT
...
OPTIONS "{" btree-option: btree-value[, ...] "}"
----
a|
Node key and uniqueness constraints with B-tree options are deprecated.

Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT
...
OPTIONS "{" range-option: range-value[, ...] "}"
----
Constraints used for string properties will also require an additional text index to cover the string queries properly.
Constraints used for point properties will also require an additional point index to cover the spatial queries properly.


a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
distance(n.prop, point({x:0, y:0})
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
point.distance(n.prop, point({x:0, y:0})
----

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
point({x:0, y:0}) <= point({x:1, y:1}) <= point({x:2, y:2})
----
a|
The ability to use the inequality operators `<`, `<=`, `>`, and `>=` on spatial points is deprecated.
Instead, use:
[source, cypher, role="noheader"]
----
point.withinBBox(point({x:1, y:1}), point({x:0, y:0}), point({x:2, y:2}))
----

a|
label:functionality[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (n)
RETURN
CASE n.prop
    WHEN null THEN 'one'
    ELSE 'two'
END
----
a|
Currently, if `n.prop` is `null`, `'one'` would be returned.
Since `null = null` returns `false` in Cypher, a `WHEN` expression will no longer match in future versions.

Please use `IS NULL` instead:
[source, cypher, role="noheader"]
----
MATCH (n)
RETURN
CASE
    WHEN n.prop IS NULL THEN 'one'
    ELSE 'two'
END
----
|===

=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CALL {
  ...
} IN TRANSACTIONS
----
a|
New clause for evaluating a subquery in separate transactions.
Typically used when modifying or importing large amounts of data.
See <<subquery-call-in-transactions, CALL +++{ ... }+++ IN TRANSACTIONS>>.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT FOR ... REQUIRE ...
----
a|
New syntax for creating constraints, applicable to all constraint types.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
FOR (n:LabelName)
REQUIRE (n.propertyName_1, …, n.propertyName_n) IS UNIQUE
[OPTIONS "{" option: value[, ...] "}"]
----
a|
Unique property constraints now allow multiple properties, ensuring that the combination of property values are unique.

a|
label:functionality[]
label:new[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT
ON (n:LabelName)
ASSERT (n.propertyName_1, …, n.propertyName_n) IS UNIQUE
----
a|
Unique property constraints now allow multiple properties.

Replaced by:
[source, cypher, role="noheader"]
----
DROP CONSTRAINT name [IF EXISTS]
----

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [constraint_name] [IF NOT EXISTS]
FOR ...
REQUIRE ... IS NOT NULL
OPTIONS "{" "}"
----
a|
Existence constraints now allow an `OPTIONS` map, however, at this point there are no available values for the map.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE LOOKUP INDEX [index_name] [IF NOT EXISTS]
FOR ... ON ...
OPTIONS "{" option: value[, ...] "}"
----
a|
Token lookup indexes now allow an `OPTIONS` map to specify the index provider.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE TEXT INDEX ...
----
a|
Allows creating text indexes on nodes or relationships with a particular label or relationship type, and property combination.
They can be dropped by using their name.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE RANGE INDEX ...
----
a|
Allows creating range indexes on nodes or relationships with a particular label or relationship type, and properties combination.
They can be dropped by using their name.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT
...
OPTIONS "{" indexProvider: 'range-1.0' "}"
----
a|
Allows creating node key and uniqueness constraints backed by range indexes by providing the range index provider in the `OPTIONS` map.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE POINT INDEX ...
----
a|
Allows creating point indexes on nodes or relationships with a particular label or relationship type, and property combination.
They can be dropped by using their name.

a|
label:syntax[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
IMPERSONATE
----
a|
New privilege that allows a user to assume privileges of another one.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW TRANSACTION[S] [transaction-id[,...]]
[YIELD { * \| field[, ...] } [ORDER BY field[, ...]] [SKIP n] [LIMIT n]]
[WHERE expression]
[RETURN field[, ...] [ORDER BY field[, ...]] [SKIP n] [LIMIT n]]
----
a|
List transactions on the current server.

The `transaction-id` is a comma-separated list of one or more quoted strings, a string parameter, or a list parameter.

This replaces the procedures `dbms.listTransactions` and `dbms.listQueries`.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
TERMINATE TRANSACTION[S] transaction-id[,...]
----
a|
Terminate transactions on the current server.

The `transaction-id` is a comma-separated list of one or more quoted strings, a string parameter, or a list parameter.

This replaces the procedures `dbms.killTransaction`, `dbms.killTransactions`, `dbms.killQuery`, and `dbms.killQueries`.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
ALTER DATABASE ...  [IF EXISTS]
SET ACCESS {READ ONLY \| READ WRITE}
----
a|
New Cypher command for modifying a database by changing its access mode.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
ALTER DATABASE
----
a|
New privilege that allows a user to modify databases.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
SET DATABASE ACCESS
----
a|
New privilege that allows a user to modify database access mode.
a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE ALIAS ... [IF NOT EXISTS]
FOR DATABASE ...
----
a|
New Cypher command for creating an alias for a database name. Remote aliases are only supported from version 4.4.8.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE OR REPLACE ALIAS ...
FOR DATABASE ...
----
a|
New Cypher command for creating or replacing an alias for a database name. Remote aliases are only supported from version 4.4.8.
a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
ALTER ALIAS ... [IF EXISTS]
SET DATABASE ...
----
a|
New Cypher command for altering an alias. Remote aliases are only supported from version 4.4.8.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
DROP ALIAS ... [IF EXISTS] FOR DATABASE
----
a|
New Cypher command for dropping a database alias.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW ALIASES FOR DATABASE
----
a|
New Cypher command for listing database aliases. Only supported since version 4.4.8.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
ALIAS MANAGEMENT
----
a|
New privilege that allows a user to create, modify, delete and list aliases. Only supported since version 4.4.8.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
CREATE ALIAS
----
a|
New privilege that allows a user to create aliases. Only supported since version 4.4.8.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
ALTER ALIAS
----
a|
New privilege that allows a user to modify aliases. Only supported since version 4.4.8.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
DROP ALIAS
----
a|
New privilege that allows a user to delete aliases. Only supported since version 4.4.8.

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
SHOW ALIAS
----
a|
New privilege that allows a user to show aliases. Only supported since version 4.4.8.
|===


[[cypher-deprecations-additions-removals-4.3]]
== Version 4.3

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON (node:Label)
ASSERT exists(node.property)
----
a| Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON (node:Label)
ASSERT node.property IS NOT NULL
----


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON ()-[rel:REL]-()
ASSERT exists(rel.property)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON ()-[rel:REL]-()
ASSERT rel.property IS NOT NULL
----


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
exists(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
prop IS NOT NULL
----


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
NOT exists(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
prop IS NULL
----

a|
label:syntax[]
label:deprecated[] +
`BRIEF [OUTPUT]` for `SHOW INDEXES` and `SHOW CONSTRAINTS`.
a|
Replaced by default output columns.


a|
label:syntax[]
label:deprecated[] +
`VERBOSE [OUTPUT]` for `SHOW INDEXES` and `SHOW CONSTRAINTS`.
a|
Replaced by:
[source, cypher, role="noheader"]
----
YIELD *
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
Still allows `BRIEF` and `VERBOSE` but not `YIELD` or `WHERE`.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW NODE EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW NODE [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
Still allows `BRIEF` and `VERBOSE` but not `YIELD` or `WHERE`.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW RELATIONSHIP EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW RELATIONSHIP [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
Still allows `BRIEF` and `VERBOSE` but not `YIELD` or `WHERE`.

a|
label:syntax[]
label:deprecated[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON DEFAULT DATABASE
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
ON HOME DATABASE
----


a|
label:syntax[]
label:deprecated[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON DEFAULT GRAPH
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
ON HOME GRAPH
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (a) RETURN (a)--()
----
a|
Pattern expressions producing lists of paths are deprecated, but they can still be used as existence predicates, for example in `WHERE` clauses.
Instead, use a pattern comprehension:
[source, cypher, role="noheader"]
----
MATCH (a) RETURN [p=(a)--() \| p]
----
|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW INDEXES WHERE ...
----
a|
Now allows filtering for:
[source, cypher, role="noheader"]
----
SHOW INDEXES
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS WHERE ...
----
a|
Now allows filtering for:
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW INDEXES YIELD ...
[WHERE ...]
[RETURN ...]
----
a|
Now allows `YIELD`, `WHERE`, and `RETURN` clauses to `SHOW INDEXES` to change the output.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS YIELD ...
[WHERE ...]
[RETURN ...]
----
a|
Now allows `YIELD`, `WHERE`, and `RETURN` clauses to `SHOW CONSTRAINTS` to change the output.


a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
a|
New syntax for filtering `SHOW CONSTRAINTS` on property existence constraints. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW NODE [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
a|
New syntax for filtering `SHOW CONSTRAINTS` on node property existence constraints. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW REL[ATIONSHIP] [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
a|
New syntax for filtering `SHOW CONSTRAINTS` on relationship property existence constraints. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW FULLTEXT INDEXES
----
a|
Now allows easy filtering for `SHOW INDEXES` on fulltext indexes. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW LOOKUP INDEXES
----
a|
Now allows easy filtering for `SHOW INDEXES` on token lookup indexes. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.
|===

=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE DATABASE ...
[OPTIONS {...}]
----
a|
New syntax to pass options to `CREATE DATABASE`.
This can be used to specify a specific cluster node to seed data from.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON (node:Label)
ASSERT node.property IS NOT NULL
----
a|
New syntax for creating node property existence constraints.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON ()-[rel:REL]-()
ASSERT rel.property IS NOT NULL
----
a|
New syntax for creating relationship property existence constraints.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
ALTER USER name IF EXISTS ...
----
a|
Makes altering users idempotent.
If the specified name does not exists, no error is thrown.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
ALTER USER ...
SET HOME DATABASE ...
----
a|
Now allows setting home database for user.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
ALTER USER ...
REMOVE HOME DATABASE
----
a|
Now allows removing home database for user.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE USER ...
SET HOME DATABASE ...
----
a|
`CREATE USER` now allows setting home database for user.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW HOME DATABASE
----
a|
New syntax for showing the home database of the current user.


a|
label:syntax[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
SET USER HOME DATABASE
----
a|
New Cypher command for administering privilege for changing users home database.


a|
label:syntax[]
label:new[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON HOME DATABASE
----
a|
New syntax for privileges affecting home database.


a|
label:syntax[]
label:new[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON HOME GRAPH
----
a|
New syntax for privileges affecting home graph.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE FULLTEXT INDEX ...
----
a|
Allows creating fulltext indexes on nodes or relationships.
They can be dropped by using their name.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE INDEX FOR ()-[r:TYPE]-() ...
----
a|
Allows creating indexes on relationships with a particular relationship type and property combination.
They can be dropped by using their name.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE LOOKUP INDEX ...
----
a|
Create token lookup index for nodes with any labels or relationships with any relationship type.
They can be dropped by using their name.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
RENAME ROLE
----
a|
New Cypher command for changing the name of a role.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
RENAME USER
----
a|
New Cypher command for changing the name of a user.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW PROCEDURE[S]
[EXECUTABLE [BY {CURRENT USER \| username}]]
[YIELD ...]
[WHERE ...]
[RETURN ...]
----
a|
New Cypher commands for listing procedures.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW [ALL \| BUILT IN \| USER DEFINED] FUNCTION[S]
[EXECUTABLE [BY {CURRENT USER \| username}]]
[YIELD ...]
[WHERE ...]
[RETURN ...]
----
a|
New Cypher commands for listing functions.

|===

[[cypher-deprecations-additions-removals-4.2]]
== Version 4.2

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
0...
----
a|
Replaced by `+0o...+`.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
0X...
----
a|
Only `+0x...+` (lowercase x) is supported.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CALL { RETURN 1 }
----
a|
Unaliased expressions are deprecated in subquery `RETURN` clauses. Replaced by:
[source, cypher, role="noheader"]
----
CALL { RETURN 1 AS one }
----
|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW ROLE name PRIVILEGES
----
a|
Can now handle multiple roles.
[source, cypher, role="noheader"]
----
SHOW ROLES n1, n2, ... PRIVILEGES
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW USER name PRIVILEGES
----
a|
Can now handle multiple users.
[source, cypher, role="noheader"]
----
SHOW USERS n1, n2, ... PRIVILEGES
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
round(expression, precision)
----
a|
The `round()` function can now take an additional argument to specify rounding precision.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
round(expression, precision, mode)
----
a|
The `round()` function can now take two additional arguments to specify rounding precision and rounding mode.
|===

=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW PRIVILEGES [AS [REVOKE] COMMAND[S]]
----
a|
Privileges can now be shown as Cypher commands.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DEFAULT GRAPH
----
a|
New optional part of the Cypher commands for <<access-control-database-administration,database privileges>>.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
0o...
----
a|
Cypher now interprets literals with prefix `0o` as an octal integer literal.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
SET [PLAINTEXT \| ENCRYPTED] PASSWORD
----
a|
For `CREATE USER` and `ALTER USER`, it is now possible to set (or update) a password when the plaintext password is unknown, but the encrypted password is available.


a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
EXECUTE
----
a|
New Cypher commands for administering privileges for executing procedures and user defined functions.
See <<access-control-dbms-administration-execute>>.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE [BTREE] INDEX ... [OPTIONS {...}]
----
a|
Allows setting index provider and index configuration when creating an index.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ... IS NODE KEY [OPTIONS {...}]
----
a|
Allows setting index provider and index configuration for the backing index when creating a node key constraint.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ... IS UNIQUE [OPTIONS {...}]
----
a|
Allows setting index provider and index configuration for the backing index when creating a uniqueness constraint.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW CURRENT USER
----
a|
New Cypher command for showing current logged-in user and roles.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW [ALL \| BTREE] INDEX[ES] [BRIEF \| VERBOSE [OUTPUT]]
----
a|
New Cypher commands for listing indexes.

Replaces the procedures `db.indexes`, `db.indexDetails` (verbose), and partially `db.schemaStatements` (verbose).

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW [ALL \| UNIQUE \| NODE EXIST[S] \| RELATIONSHIP EXIST[S] \| EXIST[S] \| NODE KEY] CONSTRAINT[S] [BRIEF \| VERBOSE [OUTPUT]]
----
a|
New Cypher commands for listing constraints.

Replaces the procedures `db.constraints` and partially `db.schemaStatements` (verbose).

a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
SHOW INDEX
----
a|
New Cypher command for administering privilege for listing indexes.


a|
label:functionality[]
label:new[] +
New privilege:
[source, cypher, role="noheader"]
----
SHOW CONSTRAINT
----
a|
New Cypher command for administering privilege for listing constraints.
|===

[[cypher-deprecations-additions-removals-4.1.3]]
== Version 4.1.3


=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE INDEX [name] IF NOT EXISTS FOR ...
----
a|
Makes index creation idempotent. If an index with the name or schema already exists no error will be thrown.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DROP INDEX name IF EXISTS
----
a|
Makes index deletion idempotent. If no index with the name exists no error will be thrown.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name] IF NOT EXISTS ON ...
----
a|
Makes constraint creation idempotent. If a constraint with the name or type and schema already exists no error will be thrown.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT name IF EXISTS
----
a|
Makes constraint deletion idempotent. If no constraint with the name exists no error will be thrown.

|===

[[cypher-deprecations-additions-removals-4.1]]
== Version 4.1

=== Restricted features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:restricted[]
[source, cypher, role="noheader"]
----
REVOKE ...
----
a|
No longer revokes sub-privileges when revoking a compound privilege, e.g. when revoking `INDEX MANAGEMENT`, any `CREATE INDEX` and `DROP INDEX` privileges will no longer be revoked.

a|
label:functionality[]
label:restricted[]
[source, cypher, role="noheader"]
----
ALL DATABASE PRIVILEGES
----
a|
No longer includes the privileges `START DATABASE` and `STOP DATABASE`.
|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:procedure[]
label:updated[]
[source, cypher, role="noheader"]
----
queryId
----
a|
The `queryId` procedure format has changed, and no longer includes the database name. For example, `mydb-query-123` is now `query-123`. This change affects built-in procedures `dbms.listQueries()`, `dbms.listActiveLocks(queryId)`, `dbms.killQueries(queryIds)` `and dbms.killQuery(queryId)`.

a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW PRIVILEGES
----
a|
The returned privileges are a closer match to the original grants and denies, e.g. if granted `MATCH` the command will show that specific privilege and not the `TRAVERSE` and `READ` privileges. Added support for `YIELD` and `WHERE` clauses to allow filtering results.
|===

=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:new[] +
New role:
[source, cypher, role="noheader"]
----
PUBLIC
----
a|
The `PUBLIC` role is automatically assigned to all users, giving them a set of base privileges.

a|
label:syntax[]
label:new[] +
For privileges:
[source, cypher, role="noheader"]
----
REVOKE MATCH
----
a|
The `MATCH` privilege can now be revoked.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW USERS
----
a|
New support for `YIELD` and `WHERE` clauses to allow filtering results.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW ROLES
----
a|
New support for `YIELD` and `WHERE` clauses to allow filtering results.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
SHOW DATABASES
----
a|
New support for `YIELD` and `WHERE` clauses to allow filtering results.

a|
label:functionality[]
label:new[] +
<<access-control-database-administration-transaction,TRANSACTION MANAGEMENT>> privileges
a|
New Cypher commands for administering transaction management.

a|
label:functionality[]
label:new[] +
DBMS <<access-control-dbms-administration-user-management,USER MANAGEMENT>> privileges
a|
New Cypher commands for administering user management.

a|
label:functionality[]
label:new[] +
DBMS <<access-control-dbms-administration-database-management,DATABASE MANAGEMENT>> privileges
a|
New Cypher commands for administering database management.


a|
label:functionality[]
label:new[] +
DBMS <<access-control-dbms-administration-privilege-management,PRIVILEGE MANAGEMENT>> privileges
a|
New Cypher commands for administering privilege management.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
ALL DBMS PRIVILEGES
----
a|
New Cypher command for administering role, user, database and privilege management.


a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
ALL GRAPH PRIVILEGES
----
a|
New Cypher command for administering read and write privileges.

a|
label:functionality[]
label:new[] +
Write privileges
a|
New Cypher commands for administering write privileges.

a|
label:functionality[]
label:new[]
[source, cypher, role="noheader"]
----
ON DEFAULT DATABASE
----
a|
New optional part of the Cypher commands for <<access-control-database-administration,database privileges>>.
|===

[[cypher-deprecations-additions-removals-4.0]]
== Version 4.0

=== Removed features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
rels()
----
a|
Replaced by <<functions-relationships,relationships()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
toInt()
----
a|
Replaced by <<functions-tointeger,toInteger()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
lower()
----
a|
Replaced by <<functions-tolower,toLower()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
upper()
----
a|
Replaced by <<functions-toupper,toUpper()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
extract()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
filter()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.

a|
label:functionality[]
label:removed[] +
For Rule planner:
[source, cypher, role="noheader"]
----
CYPHER planner=rule
----
a|
The `RULE` planner was removed in 3.2, but still possible to trigger using `START` or `CREATE UNIQUE` clauses. Now it is completely removed.


a|
label:functionality[]
label:removed[] +
Explicit indexes
a|
The removal of the `RULE` planner in 3.2 was the beginning of the end for explicit indexes. Now they are completely removed, including the removal of the link:https://neo4j.com/docs/cypher-manual/3.5/schema/index/#explicit-indexes-procedures[built-in procedures for Neo4j 3.3 to 3.5].


a|
label:functionality[]
label:removed[] +
For compiled runtime:
[source, cypher, role="noheader"]
----
CYPHER runtime=compiled
----
a|
Replaced by the new `pipelined` runtime which covers a much wider range of queries.


a|
label:clause[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE UNIQUE
----
a|
Running queries with this clause will cause a syntax error.

a|
label:clause[]
label:removed[]
[source, cypher, role="noheader"]
----
START
----
a|
Running queries with this clause will cause a syntax error.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n
----
a|
Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n)-[x:A\|:B\|:C]-() RETURN n
----
a|
Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`.


a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n)-[x:A\|:B\|:C*]-() RETURN n
----
a|
Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`.


a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
{parameter}
----
a|
Replaced by <<cypher-parameters,$parameter>>.
|===

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (n)-[rs*]-() RETURN rs
----
a|
As in Cypher 3.2, this is replaced by:
[source, cypher, role="noheader"]
----
MATCH p=(n)-[*]-() RETURN relationships(p) AS rs
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE INDEX ON :Label(prop)
----
a|
Replaced by `CREATE INDEX FOR (n:Label) ON (n.prop)`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP INDEX ON :Label(prop)
----
a|
Replaced by `DROP INDEX name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS NODE KEY
----
a|
Replaced by `DROP CONSTRAINT name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS UNIQUE
----
a|
Replaced by `DROP CONSTRAINT name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT exists(n.prop)
----
a|
Replaced by `DROP CONSTRAINT name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON ()-[r:Type]-() ASSERT exists(r.prop)
----
a|
Replaced by `DROP CONSTRAINT name`.

|===

=== Restricted features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:function[]
label:restricted[]
[source, cypher, role="noheader"]
----
length()
----
a|
Restricted to only work on paths. See <<functions-length,length()>> for more details.

a|
label:function[]
label:restricted[]
[source, cypher, role="noheader"]
----
size()
----
a|
No longer works for paths. Only works for strings, lists and pattern expressions. See <<query-functions-scalar,size()>> for more details.
|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:extended[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name] ON ...
----
a|
The create constraint syntax can now include a name.

The `IS NODE KEY` and `IS UNIQUE` versions of this command replace the procedures `db.createNodeKey` and `db.createUniquePropertyConstraint`, respectively.

|===
=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:new[] +
Pipelined runtime:
[source, cypher, role="noheader"]
----
CYPHER runtime=pipelined
----
a|
This Neo4j Enterprise Edition only feature involves a new runtime that has many performance enhancements.

a|
label:functionality[]
label:new[] +
<<administration-databases,Multi-database administration>>
a|
New Cypher commands for administering multiple databases.

a|
label:functionality[]
label:new[] +
<<access-control,Access control>>
a|
New Cypher commands for administering role-based access control.

a|
label:functionality[]
label:new[] +
<<access-control-manage-privileges,Fine-grained security>>
a|
New Cypher commands for administering dbms, database, graph and sub-graph access control.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE INDEX [name] FOR (n:Label) ON (n.prop)
----
a|
New syntax for creating indexes, which can include a name.

Replaces the `db.createIndex` procedure.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DROP INDEX name
----
a|
<<administration-indexes-drop-an-index,New command>> for dropping an index by name.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT name
----
a|
<<administration-constraints-syntax-drop,New command>> for dropping a constraint by name, no matter the type.


a|
label:clause[]
label:new[]
[source, cypher, role="noheader"]
----
WHERE EXISTS {...}
----
a|
`EXISTS` subqueries are subclauses used to filter the results of a `MATCH`, `OPTIONAL MATCH`, or `WITH` clause.

a|
label:clause[]
label:new[]
[source, cypher, role="noheader"]
----
USE neo4j
----
a|
New clause to specify which graph a query, or query part, is executed against.

|===


[[cypher-deprecations-additions-removals-3.5]]
== Version 3.5

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:deprecated[] +
Compiled runtime:
[source, cypher, role="noheader"]
----
CYPHER runtime=compiled
----
a|
The compiled runtime will be discontinued in the next major release. It might still be used for default queries in order to not cause regressions, but explicitly requesting it will not be possible.

a|
label:function[]
label:deprecated[]
[source, cypher, role="noheader"]
----
extract()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.

a|
label:function[]
label:deprecated[]
[source, cypher, role="noheader"]
----
filter()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.
|===


[[cypher-deprecations-additions-removals-3.4]]
== Version 3.4
[options="header"]
|===
| Feature          | Type | Change | Details
| <<cypher-spatial,Spatial point types>> | Functionality | Amendment | A point -- irrespective of which Coordinate Reference System is used -- can be stored as a property and is able to be backed by an index. Prior to this, a point was a virtual property only.
| <<functions-point-cartesian-3d,point() - Cartesian 3D>> | Function | Added |
| <<functions-point-wgs84-3d,point() - WGS 84 3D>> | Function | Added |
| <<functions-randomuuid,randomUUID()>> | Function | Added |
| <<cypher-temporal,Temporal types>>  | Functionality | Added | Supports storing, indexing and working with the following temporal types: Date, Time, LocalTime, DateTime, LocalDateTime and Duration.
| <<query-functions-temporal-instant-types,Temporal functions>>  | Functionality | Added | Functions allowing for the creation and manipulation of values for each temporal type -- _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ and _Duration_.
| <<query-operators-temporal,Temporal operators>>  | Functionality | Added | Operators allowing for the manipulation of values for each temporal type -- _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ and _Duration_.
|  <<functions-tostring,toString()>>   | Function  | Extended | Now also allows temporal values as input (i.e. values of type _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ or _Duration_).
|===


[[cypher-deprecations-additions-removals-3.3]]
== Version 3.3
[options="header"]
|===
| Feature          | Type | Change | Details
| `START`          | Clause | Removed | As in Cypher 3.2, any queries using the `START` clause will revert back to Cypher 3.1 `planner=rule`.
However, there are link:https://neo4j.com/docs/cypher-manual/3.5/schema/index/#explicit-indexes-procedures[built-in procedures for Neo4j versions 3.3 to 3.5] for accessing explicit indexes. The procedures will enable users to use the current version of Cypher and the cost planner together with these indexes.
An example of this is `CALL db.index.explicit.searchNodes('my_index','email:me*')`.
| `CYPHER runtime=slotted` (Faster interpreted runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-max,max()>>, <<functions-min,min()>> | Function  | Extended | Now also supports aggregation over sets containing lists of strings and/or numbers, as well as over sets containing strings, numbers, and lists of strings and/or numbers
|===


[[cypher-deprecations-additions-removals-3.2]]
== Version 3.2
[options="header"]
|===
| Feature          | Type | Change | Details
| `CYPHER planner=rule` (Rule planner)    | Functionality | Removed | All queries now use the cost planner. Any query prepended thus will fall back to using Cypher 3.1.
| `CREATE UNIQUE`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `START`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `MATCH (n)-[rs*]-() RETURN rs`     | Syntax | Deprecated | Replaced by `MATCH p=(n)-[*]-() RETURN relationships(p) AS rs`
| `MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C*]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`
| <<java-reference#extending-neo4j-aggregation-functions, User-defined aggregation functions>> | Functionality | Added |
| <<administration-indexes-search-performance, Composite indexes>> | Index | Added |
| <<administration-constraints-node-key, Node Key>> | Index | Added | Neo4j Enterprise Edition only
| `CYPHER runtime=compiled` (Compiled runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-reverse-list,reverse()>> | Function  | Extended | Now also allows a list as input
| <<functions-max, max()>>, <<functions-min, min()>> | Function  | Extended | Now also supports aggregation over a set containing both strings and numbers
|===


[[cypher-deprecations-additions-removals-3.1]]
== Version 3.1
[options="header"]
|===
| Feature     | Type | Change | Details
| `rels()`    | Function  | Deprecated | Replaced by <<functions-relationships,relationships()>>
| `toInt()`   | Function  | Deprecated | Replaced by <<functions-tointeger,toInteger()>>
| `lower()`   | Function  | Deprecated | Replaced by <<functions-tolower,toLower()>>
| `upper()`   | Function  | Deprecated | Replaced by <<functions-toupper,toUpper()>>
| <<functions-toboolean,toBoolean()>> | Function | Added |
| <<cypher-map-projection,Map projection>> | Syntax | Added |
| <<cypher-pattern-comprehension,Pattern comprehension>> | Syntax | Added |
| <<java-reference#extending-neo4j-functions,User-defined functions>> | Functionality | Added |
| <<query-call,CALL\...YIELD\...WHERE>>   | Clause  | Extended  | Records returned by `YIELD` may be filtered further using `WHERE`
|===


[[cypher-deprecations-additions-removals-3.0]]
== Version 3.0
[options="header"]
|===
| Feature          | Type | Change | Details
| `has()`  | Function  | Removed | Replaced by <<functions-exists,exists()>>
| `str()`  | Function  | Removed | Replaced by <<functions-tostring,toString()>>
| `+{parameter}+` | Syntax | Deprecated | Replaced by <<cypher-parameters,$parameter>>
| <<functions-properties,properties()>>  | Function  | Added  |
| <<query-call,CALL [\...YIELD]>>   | Clause  | Added  |
| <<functions-point-cartesian-2d,point() - Cartesian 2D>> | Function | Added |
| <<functions-point-wgs84-2d,point() - WGS 84 2D>> | Function | Added |
| <<functions-distance,distance()>> | Function | Added |
| <<java-reference#extending-neo4j-procedures,User-defined procedures>> | Functionality | Added |
| <<functions-tostring,toString()>>   | Function  | Extended | Now also allows Boolean values as input
|===
