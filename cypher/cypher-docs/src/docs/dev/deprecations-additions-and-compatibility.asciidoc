[[cypher-deprecations-additions-removals-compatibility]]
= Deprecations, additions and compatibility

[abstract]
--
Cypher is a language that is constantly evolving.
New features get added to the language continuously, and occasionally, some features become deprecated and are subsequently removed.
--

This section list all of the features that have been removed, deprecated, added, or extended in different Cypher versions.
Replacement syntax for deprecated and removed features are also indicated.

[[cypher-deprecations-additions-removals-4.0]]
== Version 4.0

=== Removed features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
rels()
----
a|
Replaced by <<functions-relationships,relationships()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
toInt()
----
a|
Replaced by <<functions-tointeger,toInteger()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
lower()
----
a|
Replaced by <<functions-tolower,toLower()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
upper()
----
a|
Replaced by <<functions-toupper,toUpper()>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
extract()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.

a|
label:function[]
label:removed[]
[source, cypher, role="noheader"]
----
filter()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.

a|
label:functionality[]
label:removed[] +
For Rule planner:
[source, cypher, role="noheader"]
----
CYPHER planner=rule  
----
a|
The `RULE` planner was removed in 3.2, but still possible to trigger using `START` or `CREATE UNIQUE` clauses. Now it is completely removed.


a|
label:functionality[]
label:removed[] +
Explicit indexes
a|
The removal of the `RULE` planner in 3.2 was the beginning of the end for explicit indexes. Now they are completely removed, including the removal of the link:https://neo4j.com/docs/cypher-manual/3.5/schema/index/#explicit-indexes-procedures[built-in procedures for Neo4j 3.3 to 3.5].


a|
label:functionality[]
label:removed[] +
For compiled runtime:
[source, cypher, role="noheader"]
----
CYPHER runtime=compiled
----
a|
Replaced by the new `pipelined` runtime which covers a much wider range of queries.


a|
label:clause[]
label:removed[]
[source, cypher, role="noheader"]
----
CREATE UNIQUE
----
a|
Running queries with this clause will cause a syntax error. Running with `CYPHER 3.5` will cause a runtime error due to the removal of the rule planner.

a|
label:clause[]
label:removed[]
[source, cypher, role="noheader"]
----
START
----
a|
Running queries with this clause will cause a syntax error. Running with `CYPHER 3.5` will cause a runtime error due to the removal of the rule planner.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n
----
a|
Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`.

a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n)-[x:A\|:B\|:C]-() RETURN n
----
a|
Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`.


a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
MATCH (n)-[x:A\|:B\|:C*]-() RETURN n
----
a|
Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`.


a|
label:syntax[]
label:removed[]
[source, cypher, role="noheader"]
----
{parameter}
----
a|
Replaced by <<cypher-parameters,$parameter>>.
|===

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
MATCH (n)-[rs*]-() RETURN rs
----
a|
As in Cypher 3.2, this is replaced by: 
[source, cypher, role="noheader"]
----
MATCH p=(n)-[*]-() RETURN relationships(p) AS rs
----

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE INDEX ON :Label(prop)
----
a|
Replaced by `CREATE INDEX FOR (n:Label) ON (n.prop)`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP INDEX ON :Label(prop)
----
a|
Replaced by `DROP INDEX name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS NODE KEY
----
a|
Replaced by `DROP CONSTRAINT name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS UNIQUE
----
a|
Replaced by `DROP CONSTRAINT name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON (n:Label) ASSERT exists(n.prop)
----
a|
Replaced by `DROP CONSTRAINT name`.

a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT ON ()-[r:Type]-() ASSERT exists(r.prop)
----
a|
Replaced by `DROP CONSTRAINT name`.

|===

=== Restricted features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:function[]
label:restricted[]
[source, cypher, role="noheader"]
----
length()
----
a|
Restricted to only work on paths. See <<functions-length,length()>> for more details.

a|
label:function[]
label:restricted[]
[source, cypher, role="noheader"]
----
size()
----
a|
No longer works for paths. Only works for strings, lists and pattern expressions. See <<query-functions-scalar,size()>> for more details.
|===

=== Updated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:syntax[]
label:extended[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name] ON ...
----
a|
The create constraint syntax can now include a name.

|===
=== New features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:new[] +
Pipelined runtime:
[source, cypher, role="noheader"]
----
CYPHER runtime=pipelined
----
a|
This Neo4j Enterprise Edition only feature involves a new runtime that has many performance enhancements.

a|
label:functionality[]
label:new[] +
<<administration-databases,Multi-database administration>>
a|
New Cypher commands for administering multiple databases.

a|
label:functionality[]
label:new[] +
<<administration-security,Security administration>>
a|
New Cypher commands for administering role-based access-control.

a|
label:functionality[]
label:new[] +
<<access-control-manage-privileges,Fine-grained security>>
a|
New Cypher commands for administering dbms, database, graph and sub-graph access control.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
CREATE INDEX [name] FOR (n:Label) ON (n.prop)
----
a|
New syntax for creating indexes, which can include a name.

a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DROP INDEX name
----
a|
<<administration-indexes-drop-an-index,New command>> for dropping an index by name.


a|
label:syntax[]
label:new[]
[source, cypher, role="noheader"]
----
DROP CONSTRAINT name
----
a|
<<administration-constraints-syntax-drop,New command>> for dropping a constraint by name, no matter the type.


a|
label:clause[]
label:new[]
[source, cypher, role="noheader"]
----
WHERE EXISTS {...} 
----
a|
Existential sub-queries are sub-clauses used to filter the results of a `MATCH`, `OPTIONAL MATCH`, or `WITH` clause.

a|
label:clause[]
label:new[]
[source, cypher, role="noheader"]
----
USE neo4j
----
a|
New clause to specify which graph a query, or query part, is executed against.

|===


[[cypher-deprecations-additions-removals-3.5]]
== Version 3.5

=== Deprecated features

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:deprecated[] +
Compiled runtime:
[source, cypher, role="noheader"]
----
CYPHER runtime=compiled
----
a|
The compiled runtime will be discontinued in the next major release. It might still be used for default queries in order to not cause regressions, but explicitly requesting it will not be possible.

a|
label:function[]
label:deprecated[]
[source, cypher, role="noheader"]
----
extract()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.

a|
label:function[]
label:deprecated[]
[source, cypher, role="noheader"]
----
filter()
----
a|
Replaced by <<cypher-list-comprehension,list comprehension>>.
|===


[[cypher-deprecations-additions-removals-3.4]]
=== Version 3.4
[options="header"]
|===
| Feature          | Type | Change | Details
| <<cypher-spatial, Spatial point types>> | Functionality | Amendment | A point -- irrespective of which Coordinate Reference System is used -- can be stored as a property and is able to be backed by an index. Prior to this, a point was a virtual property only.
| <<functions-point-cartesian-3d, point() - Cartesian 3D>> | Function | Added |
| <<functions-point-wgs84-3d, point() - WGS 84 3D>> | Function | Added |
| <<functions-randomuuid, randomUUID()>> | Function | Added |
| <<cypher-temporal, Temporal types>>  | Functionality | Added | Supports storing, indexing and working with the following temporal types: Date, Time, LocalTime, DateTime, LocalDateTime and Duration.
| <<query-functions-temporal, Temporal functions>>  | Functionality | Added | Functions allowing for the creation and manipulation of values for each temporal type -- _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ and _Duration_.
| <<query-operators-temporal, Temporal operators>>  | Functionality | Added | Operators allowing for the manipulation of values for each temporal type -- _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ and _Duration_.
|  <<functions-tostring, toString()>>   | Function  | Extended | Now also allows temporal values as input (i.e. values of type _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ or _Duration_).
|===


[[cypher-deprecations-additions-removals-3.3]]
=== Version 3.3
[options="header"]
|===
| Feature          | Type | Change | Details
| `START`          | Clause | Removed | As in Cypher 3.2, any queries using the `START` clause will revert back to Cypher 3.1 `planner=rule`.
However, there are link:https://neo4j.com/docs/cypher-manual/3.5/schema/index/#explicit-indexes-procedures[built-in procedures for Neo4j versions 3.3 to 3.5] for accessing explicit indexes. The procedures will enable users to use the current version of Cypher and the cost planner together with these indexes.
An example of this is `CALL db.index.explicit.searchNodes('my_index','email:me*')`.
| `CYPHER runtime=slotted` (Faster interpreted runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-max, max()>>, <<functions-min, min()>> | Function  | Extended | Now also supports aggregation over sets containing lists of strings and/or numbers, as well as over sets containing strings, numbers, and lists of strings and/or numbers
|===


[[cypher-deprecations-additions-removals-3.2]]
=== Version 3.2
[options="header"]
|===
| Feature          | Type | Change | Details
| `CYPHER planner=rule` (Rule planner)    | Functionality | Removed | All queries now use the cost planner. Any query prepended thus will fall back to using Cypher 3.1.
| `CREATE UNIQUE`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `START`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `MATCH (n)-[rs*]-() RETURN rs`     | Syntax | Deprecated | Replaced by `MATCH p=(n)-[*]-() RETURN relationships(p) AS rs`
| `MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C*]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`
| <<java-reference#extending-neo4j-aggregation-functions, User-defined aggregation functions>> | Functionality | Added |
| <<administration-indexes-search-performance, Composite indexes>> | Index | Added |
| <<administration-constraints-node-key, Node Key>> | Index | Added | Neo4j Enterprise Edition only
| `CYPHER runtime=compiled` (Compiled runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-reverse-list,reverse()>> | Function  | Extended | Now also allows a list as input
| <<functions-max, max()>>, <<functions-min, min()>> | Function  | Extended | Now also supports aggregation over a set containing both strings and numbers
|===


[[cypher-deprecations-additions-removals-3.1]]
=== Version 3.1
[options="header"]
|===
| Feature          | Type | Change | Details
| `rels()`   | Function  | Deprecated | Replaced by <<functions-relationships, relationships()>>
| `toInt()`   | Function  | Deprecated | Replaced by <<functions-tointeger, toInteger()>>
| `lower()`   | Function  | Deprecated | Replaced by <<functions-tolower, toLower()>>
| `upper()`   | Function  | Deprecated | Replaced by <<functions-toupper, toUpper()>>
| <<functions-toboolean,toBoolean()>> | Function | Added |
| <<cypher-map-projection, Map projection>> | Syntax | Added |
| <<cypher-pattern-comprehension, Pattern comprehension>> | Syntax | Added |
| <<java-reference#extending-neo4j-functions, User-defined functions>> | Functionality | Added |
| <<query-call, CALL\...YIELD\...WHERE>>   | Clause  | Extended  | Records returned by `YIELD` may be filtered further using `WHERE`
|===


[[cypher-deprecations-additions-removals-3.0]]
=== Version 3.0
[options="header"]
|===
| Feature          | Type | Change | Details
| `has()`  | Function  | Removed | Replaced by <<functions-exists, exists()>>
| `str()`  | Function  | Removed | Replaced by <<functions-tostring, toString()>>
| `+{parameter}+` | Syntax | Deprecated | Replaced by <<cypher-parameters, $parameter>>
| <<functions-properties, properties()>>  | Function  | Added  |
| <<query-call,CALL [\...YIELD]>>   | Clause  | Added  |
| <<functions-point-cartesian-2d,point() - Cartesian 2D>> | Function | Added |
| <<functions-point-wgs84-2d,point() - WGS 84 2D>> | Function | Added |
| <<functions-distance,distance()>> | Function | Added |
| <<java-reference#extending-neo4j-procedures, User-defined procedures>> | Functionality | Added |
| <<functions-tostring, toString()>>   | Function  | Extended | Now also allows Boolean values as input
|===


[[cypher-compatibility]]
== Compatibility

NOTE: The ability of Neo4j to support multiple older versions of the Cypher language has been changing.
In versions of Neo4j before 3.5 the backwards compatibility layer included the Cypher language parser, planner and runtime.
All supported versions of Cypher would run on the same Neo4j kernel.
In Neo4j 3.4, however, this was changed such that the compatibility layer no longer included the runtime.
This meant that running, for example, a `CYPHER 3.1` query inside Neo4j 3.5 would plan the query using the 3.1 planner, and run it using the 3.5 runtime and kernel.
In Neo4j 4.0 this was changed again, such that the compatibility layer includes only the parser.
For example, running a `CYPHER 3.5` query inside Neo4j will parse older language features, but plan using the {neo4j-version} planner, and run using the {neo4j-version} runtime and kernel.
The primary reason for this change has been optimizations in the Cypher runtime to allow Cypher query to perform better.

Older versions of the language can still be accessed if required.
There are two ways to select which version to use in queries.

. Setting a version for all queries:
You can configure your database with the configuration parameter `cypher.default_language_version`, and enter which version you'd like to use (see <<cypher-versions>>).
Every Cypher query will use this version, provided the query hasn't explicitly been configured as described in the next item below.

. Setting a version on a query by query basis:
The other method is to set the version for a particular query.
Prepending a query with `CYPHER 3.5` will execute the query with the version of Cypher included in Neo4j 3.5.

Below is an example using the older parameter syntax `+{param}+`:

[source, cypher]
----
CYPHER 3.5
MATCH (n:Person)
WHERE n.age > {agelimit}
RETURN n.name, n.age
----

Without the `CYPHER 3.5` prefix this query would fail with a syntax error. With `CYPHER 3.5` however, it will only generate a warning and still work.

WARNING: In Neo4j {neo4j-version} some older language features are understood by the Cypher parser even if they are no longer supported by the Neo4j kernel.
These features will result in runtime errors. See the table at <<cypher-deprecations-additions-removals-4.0, Cypher Version 4.0>> for the list of affected features.

[[cypher-versions]]
== Supported language versions

Neo4j {neo4j-version} supports the following versions of the Cypher language:

* Neo4j Cypher 3.5
* Neo4j Cypher 4.0

[TIP]
Each release of Neo4j supports a limited number of old Cypher Language Versions.
When you upgrade to a new release of Neo4j, please make sure that it supports the Cypher language version you need.
If not, you may need to modify your queries to work with a newer Cypher language version.
