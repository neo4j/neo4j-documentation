[[cypher-deprecations-additions-removals-compatibility]]
= Deprecations, additions and compatibility

[abstract]
--
Cypher is a language that is constantly evolving.
New features are added to the language continuously, and occasionally, some features become deprecated and are subsequently removed.
--

This section list all of the features that have been removed, deprecated, added, or extended in different Cypher versions.
Replacement syntax for deprecated and removed features are also indicated.

[[cypher-deprecations-additions-removals-4.4]]
== Version 4.4
[cols="2", options="header"]
|===
| Feature
| Details
|===


[[cypher-deprecations-additions-removals-4.3]]
== Version 4.3
[cols="2", options="header"]
|===
| Feature
| Details


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON (node:Label)
ASSERT node.property IS NOT NULL
----
a|
New syntax for creating node property existence constraints.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON ()-[rel:REL]-()
ASSERT rel.property IS NOT NULL
----
a|
New syntax for creating relationship property existence constraints.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON (node:Label)
ASSERT exists(node.property)
----
a| Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON (node:Label)
ASSERT node.property IS NOT NULL
----


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON ()-[rel:REL]-()
ASSERT exists(rel.property)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT [name]
ON ()-[rel:REL]-()
ASSERT rel.property IS NOT NULL
----


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
exists(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
prop IS NOT NULL
----


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
NOT exists(prop)
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
prop IS NULL
----


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
ALTER USER name IF EXISTS ...
----
a|
Makes altering users idempotent.
If the specified name does not exists, no error is thrown.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW INDEXES WHERE ...
----
a|
Now allows filtering for:
[source, cypher, role="noheader"]
----
SHOW INDEXES
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS WHERE ...
----
a|
Now allows filtering for:
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW INDEXES YIELD ...
[WHERE ...]
[RETURN ...]
----
a|
Now allows `YIELD`, `WHERE`, and `RETURN` clauses to `SHOW INDEXES` to change the output.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS YIELD ...
[WHERE ...]
[RETURN ...]
----
a|
Now allows `YIELD`, `WHERE`, and `RETURN` clauses to `SHOW CONSTRAINTS` to change the output.


a|
label:syntax[]
label:deprecated[] +
`BRIEF [OUTPUT]` for `SHOW INDEXES` and `SHOW CONSTRAINTS`.
a|
Replaced by default output columns.


a|
label:syntax[]
label:deprecated[] +
`VERBOSE [OUTPUT]` for `SHOW INDEXES` and `SHOW CONSTRAINTS`.
a|
Replaced by:
[source, cypher, role="noheader"]
----
YIELD *
----


a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
a|
New syntax for filtering `SHOW CONSTRAINTS` on property existence constraints. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW NODE [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
a|
New syntax for filtering `SHOW CONSTRAINTS` on node property existence constraints. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:syntax[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW REL[ATIONSHIP] [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
a|
New syntax for filtering `SHOW CONSTRAINTS` on relationship property existence constraints. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
Still allows `BRIEF` and `VERBOSE` but not `YIELD` or `WHERE`.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW NODE EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW NODE [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
Still allows `BRIEF` and `VERBOSE` but not `YIELD` or `WHERE`.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
SHOW RELATIONSHIP EXISTS CONSTRAINTS
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW RELATIONSHIP [PROPERTY] EXIST[ENCE] CONSTRAINTS
----
Still allows `BRIEF` and `VERBOSE` but not `YIELD` or `WHERE`.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
ALTER USER ...
SET HOME DATABASE ...
----
a|
Now allows setting home database for user.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
ALTER USER ...
REMOVE HOME DATABASE
----
a|
Now allows removing home database for user.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE USER ...
SET HOME DATABASE ...
----
a|
`CREATE USER` now allows setting home database for user.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW HOME DATABASE
----
a|
New syntax for showing the home database of the current user.


a|
label:syntax[]
label:added[] +
New privilege:
[source, cypher, role="noheader"]
----
SET USER HOME DATABASE
----
a|
New Cypher command for administering privilege for changing users home database.


a|
label:syntax[]
label:added[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON HOME DATABASE
----
a|
New syntax for privileges affecting home database.


a|
label:syntax[]
label:added[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON HOME GRAPH
----
a|
New syntax for privileges affecting home graph.


a|
label:syntax[]
label:deprecated[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON DEFAULT DATABASE
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
ON HOME DATABASE
----


a|
label:syntax[]
label:deprecated[] +
For privilege commands:
[source, cypher, role="noheader"]
----
ON DEFAULT GRAPH
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
ON HOME GRAPH
----


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE INDEX FOR ()-[r:TYPE]-() ...
----
a|
Allows creating indexes on relationships with a particular relationship type and property combination.
They can be dropped by using their name.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE LOOKUP INDEX ...
----
a|
Create token lookup index for nodes with any labels or relationships with any relationship type.
They can be dropped by using their name.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW FULLTEXT INDEXES
----
a|
Now allows easy filtering for `SHOW INDEXES` on fulltext indexes. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW LOOKUP INDEXES
----
a|
Now allows easy filtering for `SHOW INDEXES` on token lookup indexes. +
Allows `YIELD` and `WHERE` but not `BRIEF` or `VERBOSE`.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE DATABASE ...
[OPTIONS {...}]
----
a|
New syntax to pass options to `CREATE DATABASE`.
This can be used to specify a specific cluster node to seed data from.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
RENAME ROLE
----
a|
New Cypher command for changing the name of a role.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
RENAME USER
----
a|
New Cypher command for changing the name of a user.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW PROCEDURE[S]
[EXECUTABLE [BY {CURRENT USER \| username}]]
[YIELD ...]
[WHERE ...]
[RETURN ...]
----
a|
New Cypher commands for listing procedures.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW [ALL \| BUILT IN \| USER DEFINED] FUNCTION[S]
[EXECUTABLE [BY {CURRENT USER \| username}]]
[YIELD ...]
[WHERE ...]
[RETURN ...]
----
a|
New Cypher commands for listing functions.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE FULLTEXT INDEX ...
----
a|
Allows creating fulltext indexes on nodes or relationships.
They can be dropped by using their name.
|===


[[cypher-deprecations-additions-removals-4.2]]
== Version 4.2

[cols="2", options="header"]
|===
| Feature
| Details

a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW PRIVILEGES [AS [REVOKE] COMMAND[S]]
----
a|
Privileges can now be shown as Cypher commands.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW ROLE name PRIVILEGES
----
a|
Can now handle multiple roles.
[source, cypher, role="noheader"]
----
SHOW ROLES n1, n2, ... PRIVILEGES
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
SHOW USER name PRIVILEGES
----
a|
Can now handle multiple users.
[source, cypher, role="noheader"]
----
SHOW USERS n1, n2, ... PRIVILEGES
----


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
round(expression, precision)
----
a|
The `round()` function can now take an additional argument to specify rounding precision.


a|
label:functionality[]
label:updated[]
[source, cypher, role="noheader"]
----
round(expression, precision, mode)
----
a|
The `round()` function can now take two additional arguments to specify rounding precision and rounding mode.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
DEFAULT GRAPH
----
a|
New optional part of the Cypher commands for <<administration-security-administration-database-privileges,database privileges>>.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
0o...
----
a|
Cypher now interprets literals with prefix `0o` as an octal integer literal.


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
0...
----
a|
Replaced by `+0o...+` (see above).


a|
label:syntax[]
label:deprecated[]
[source, cypher, role="noheader"]
----
0X...
----
a|
Only `+0x...+` (lowercase x) is supported.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
SET [PLAINTEXT \| ENCRYPTED] PASSWORD
----
a|
For `CREATE USER` and `ALTER USER`, it is now possible to set (or update) a password when the plaintext password is unknown, but the encrypted password is available.


a|
label:functionality[]
label:added[] +
New privilege:
[source, cypher, role="noheader"]
----
EXECUTE
----
a|
New Cypher commands for administering privileges for executing procedures and user defined functions.
See <<administration-security-administration-dbms-privileges-execute>>.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE [BTREE] INDEX ... [OPTIONS {...}]
----
a|
Allows setting index provider and index configuration when creating an index.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ... IS NODE KEY [OPTIONS {...}]
----
a|
Allows setting index provider and index configuration for the backing index when creating a node key constraint.


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ... IS UNIQUE [OPTIONS {...}]
----
a|
Allows setting index provider and index configuration for the backing index when creating a uniqueness constraint.


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.createIndex
----
a|
Replaced by `CREATE INDEX` command.


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.createNodeKey
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ... IS NODE KEY
----


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.createUniquePropertyConstraint
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
CREATE CONSTRAINT ... IS UNIQUE
----


a|
label:syntax[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW CURRENT USER
----
a|
New Cypher command for showing current logged-in user and roles.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW [ALL \| BTREE] INDEX[ES] [BRIEF \| VERBOSE [OUTPUT]]
----
a|
New Cypher commands for listing indexes.


a|
label:functionality[]
label:added[]
[source, cypher, role="noheader"]
----
SHOW [ALL \| UNIQUE \| NODE EXIST[S] \| RELATIONSHIP EXIST[S] \| EXIST[S] \| NODE KEY] CONSTRAINT[S] [BRIEF \| VERBOSE [OUTPUT]]
----
a|
New Cypher commands for listing constraints.


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.indexes
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW INDEXES
----


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.indexDetails
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW INDEXES YIELD *
----


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.constraints
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS
----


a|
label:procedure[]
label:deprecated[]
[source, cypher, role="noheader"]
----
db.schemaStatements
----
a|
Replaced by:
[source, cypher, role="noheader"]
----
SHOW INDEXES YIELD *
----
[source, cypher, role="noheader"]
----
SHOW CONSTRAINTS YIELD *
----


a|
label:functionality[]
label:added[] +
New privilege:
[source, cypher, role="noheader"]
----
SHOW INDEX
----
a|
New Cypher command for administering privilege for listing indexes.


a|
label:functionality[]
label:added[] +
New privilege:
[source, cypher, role="noheader"]
----
SHOW CONSTRAINT
----
a|
New Cypher command for administering privilege for listing constraints.
|===


[[cypher-deprecations-additions-removals-4.1.3]]
== Version 4.1.3
[options="header"]
|===
| Feature     | Type | Change | Details
| `CREATE INDEX [name] IF NOT EXISTS FOR ...` | Syntax | Added | Makes index creation idempotent. If an index with the name or schema already exists no error will be thrown
| `DROP INDEX name IF EXISTS` | Syntax | Added | Makes index deletion idempotent. If no index with the name exists no error will be thrown
| `CREATE CONSTRAINT [name] IF NOT EXISTS ON ...` | Syntax | Added | Makes constraint creation idempotent. If a constraint with the name or type and schema already exists no error will be thrown
| `DROP CONSTRAINT name IF EXISTS` | Syntax | Added | Makes constraint deletion idempotent. If no constraint with the name exists no error will be thrown
|===

[[cypher-deprecations-additions-removals-4.1]]
== Version 4.1
[options="header"]
|===
| Feature     | Type | Change | Details
| `queryId` | Procedure | Updated | The `queryId` procedure format has changed, and no longer includes the database name. For example, `mydb-query-123` is now `query-123`. This change affects built-in procedures `dbms.listQueries()`, `dbms.listActiveLocks(queryId)`, `dbms.killQueries(queryIds)` `and dbms.killQuery(queryId)` 
| `PUBLIC` role | Functionality | Added | The `PUBLIC` role is automatically assigned to all users, giving them a set of base privileges
| `REVOKE MATCH` | Syntax | Added | The `MATCH` privilege can now be revoked
| `REVOKE ...` | Functionality | Restricted | No longer revokes sub-privileges when revoking a compound privilege, e.g. when revoking `INDEX MANAGEMENT`, any `CREATE INDEX` and `DROP INDEX` privileges will no longer be revoked
| `SHOW PRIVILEGES` | Functionality | Updated | The returned privileges are a closer match to the original grants and denies, e.g. if granted `MATCH` the command will show that specific privilege and not the `TRAVERSE` and `READ` privileges. Added support for `YIELD` and `WHERE` clauses to allow filtering results.
| `SHOW USERS` | Functionality | Added | New support for `YIELD` and `WHERE` clauses to allow filtering results.
| `SHOW ROLES` | Functionality | Added | New support for `YIELD` and `WHERE` clauses to allow filtering results.
| `SHOW DATABASES` | Functionality | Added | New support for `YIELD` and `WHERE` clauses to allow filtering results.
| `ALL DATABASE PRIVILEGES` | Functionality | Restricted | No longer includes the privileges `START DATABASE` and `STOP DATABASE`
| <<administration-security-administration-database-transaction,TRANSACTION MANAGEMENT>> privileges | Functionality | Added | New Cypher commands for administering transaction management
| DBMS <<administration-security-administration-dbms-privileges-user-management,USER MANAGEMENT>> privileges | Functionality | Added | New Cypher commands for administering user management
| DBMS <<administration-security-administration-dbms-privileges-database-management,DATABASE MANAGEMENT>> privileges | Functionality | Added | New Cypher commands for administering database management
| DBMS <<administration-security-administration-dbms-privileges-privilege-management,PRIVILEGE MANAGEMENT>> privileges | Functionality | Added | New Cypher commands for administering privilege management
| `ALL DBMS PRIVILEGES` | Functionality | Added | New Cypher command for administering role, user, database and privilege management
| `ALL GRAPH PRIVILEGES` | Functionality | Added | New Cypher command for administering read and write privileges
| Write privileges | Functionality | Added | New Cypher commands for administering write privileges
| `ON DEFAULT DATABASE` | Syntax | Added | New optional part of the Cypher commands for <<administration-security-administration-database-privileges,database privileges>>
|===

[[cypher-deprecations-additions-removals-4.0]]
== Version 4.0
[options="header"]
|===
| Feature     | Type | Change | Details
| `rels()`    | Function  | Removed | Replaced by <<functions-relationships,relationships()>>
| `toInt()`   | Function  | Removed | Replaced by <<functions-tointeger,toInteger()>>
| `lower()`   | Function  | Removed | Replaced by <<functions-tolower,toLower()>>
| `upper()`   | Function  | Removed | Replaced by <<functions-toupper,toUpper()>>
| `extract()` | Function  | Removed | Replaced by <<cypher-list-comprehension,list comprehension>>
| `filter()`  | Function  | Removed | Replaced by <<cypher-list-comprehension,list comprehension>>
| `length()`  | Function  | Restricted | Restricted to only work on paths. See <<functions-length,length()>> for more details.
| `size()`    | Function  | Restricted | No longer works for paths. Only works for strings, lists and pattern expressions. See <<query-functions-scalar,size()>> for more details.
| `CYPHER planner=rule` (Rule planner)    | Functionality | Removed | The `RULE` planner was removed in 3.2, but still possible to trigger using `START` or `CREATE UNIQUE` clauses. Now it is completely removed.
| `CREATE UNIQUE`     | Clause | Removed | Running queries with this clause will cause a syntax error. Running with `CYPHER 3.5` will cause a runtime error due to the removal of the rule planner.
| `START`     | Clause | Removed | Running queries with this clause will cause a syntax error. Running with `CYPHER 3.5` will cause a runtime error due to the removal of the rule planner.
| Explicit indexes |  Functionality | Removed | The removal of the `RULE` planner in 3.2 was the beginning of the end for explicit indexes. Now they are completely removed, including the removal of the link:https://neo4j.com/docs/cypher-manual/3.5/schema/index/#explicit-indexes-procedures[built-in procedures for Neo4j 3.3 to 3.5].
| `MATCH (n)-[rs*]-() RETURN rs`     | Syntax | Deprecated | As in Cypher 3.2, this is replaced by `MATCH p=(n)-[*]-() RETURN relationships(p) AS rs`
| `MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n`     | Syntax | Removed | Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C]-() RETURN n`     | Syntax | Removed | Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C*]-() RETURN n`     | Syntax | Removed | Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`
| `+{parameter}+` | Syntax | Removed | Replaced by <<cypher-parameters,$parameter>>
| `CYPHER runtime=pipelined` (Pipelined runtime) | Functionality | Added| This Neo4j Enterprise Edition only feature involves a new runtime that has many performance enhancements.
| `CYPHER runtime=compiled` (Compiled runtime) | Functionality | Removed| Replaced by the new `pipelined` runtime which covers a much wider range of queries.
| `CREATE INDEX [name] FOR (n:Label) ON (n.prop)` | Syntax | Added | New syntax for creating indexes, which can include a name.
| `CREATE CONSTRAINT [name] ON ...` | Syntax | Extended | The create constraint syntax can now include a name.
| `DROP INDEX name` | Syntax | Added | New command for dropping an index by name.
| `DROP CONSTRAINT name` | Syntax | Added | New command for dropping a constraint by name, no matter the type.
| `CREATE INDEX ON :Label(prop)` | Syntax | Deprecated | Replaced by `CREATE INDEX FOR (n:Label) ON (n.prop)`
| `DROP INDEX ON :Label(prop)` | Syntax | Deprecated | Replaced by `DROP INDEX name`
| `DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS NODE KEY` | Syntax | Deprecated | Replaced by `DROP CONSTRAINT name`
| `DROP CONSTRAINT ON (n:Label) ASSERT (n.prop) IS UNIQUE` | Syntax | Deprecated | Replaced by `DROP CONSTRAINT name`
| `DROP CONSTRAINT ON (n:Label) ASSERT exists(n.prop)` | Syntax | Deprecated | Replaced by `DROP CONSTRAINT name`
| `DROP CONSTRAINT ON ()-[r:Type]-() ASSERT exists(r.prop)` | Syntax | Deprecated | Replaced by `DROP CONSTRAINT name`
| `WHERE EXISTS {...}` | Clause | Added | Existential sub-queries are sub-clauses used to filter the results of a `MATCH`, `OPTIONAL MATCH`, or `WITH` clause.
| <<administration-databases,Multi-database administration>> | Functionality | Added | New Cypher commands for administering multiple databases
| <<administration-security,Security administration>> | Functionality | Added | New Cypher commands for administering role-based access-control
| <<administration-security-subgraph,Fine-grained security>> | Functionality | Added | New Cypher commands for administering dbms, database, graph and sub-graph access control
| `USE neo4j` | Clause| Added | New clause to specify which graph a query, or query part, is executed against.
|===


[[cypher-deprecations-additions-removals-3.5]]
== Version 3.5
[options="header"]
|===
| Feature     | Type | Change | Details
| `CYPHER runtime=compiled` (Compiled runtime)    | Functionality | Deprecated | The compiled runtime will be discontinued in the next major release. It might still be used for default queries in order to not cause regressions, but explicitly requesting it will not be possible.
| `extract()` | Function  | Deprecated | Replaced by <<cypher-list-comprehension,list comprehension>>
| `filter()`  | Function  | Deprecated | Replaced by <<cypher-list-comprehension,list comprehension>>
|===


[[cypher-deprecations-additions-removals-3.4]]
== Version 3.4
[options="header"]
|===
| Feature          | Type | Change | Details
| <<cypher-spatial,Spatial point types>> | Functionality | Amendment | A point -- irrespective of which Coordinate Reference System is used -- can be stored as a property and is able to be backed by an index. Prior to this, a point was a virtual property only.
| <<functions-point-cartesian-3d,point() - Cartesian 3D>> | Function | Added |
| <<functions-point-wgs84-3d,point() - WGS 84 3D>> | Function | Added |
| <<functions-randomuuid,randomUUID()>> | Function | Added |
| <<cypher-temporal,Temporal types>>  | Functionality | Added | Supports storing, indexing and working with the following temporal types: Date, Time, LocalTime, DateTime, LocalDateTime and Duration.
| <<query-functions-temporal-instant-types,Temporal functions>>  | Functionality | Added | Functions allowing for the creation and manipulation of values for each temporal type -- _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ and _Duration_.
| <<query-operators-temporal,Temporal operators>>  | Functionality | Added | Operators allowing for the manipulation of values for each temporal type -- _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ and _Duration_.
|  <<functions-tostring,toString()>>   | Function  | Extended | Now also allows temporal values as input (i.e. values of type _Date_, _Time_, _LocalTime_, _DateTime_, _LocalDateTime_ or _Duration_).
|===


[[cypher-deprecations-additions-removals-3.3]]
== Version 3.3
[options="header"]
|===
| Feature          | Type | Change | Details
| `START`          | Clause | Removed | As in Cypher 3.2, any queries using the `START` clause will revert back to Cypher 3.1 `planner=rule`.
However, there are link:https://neo4j.com/docs/cypher-manual/3.5/schema/index/#explicit-indexes-procedures[built-in procedures for Neo4j versions 3.3 to 3.5] for accessing explicit indexes. The procedures will enable users to use the current version of Cypher and the cost planner together with these indexes.
An example of this is `CALL db.index.explicit.searchNodes('my_index','email:me*')`.
| `CYPHER runtime=slotted` (Faster interpreted runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-max,max()>>, <<functions-min,min()>> | Function  | Extended | Now also supports aggregation over sets containing lists of strings and/or numbers, as well as over sets containing strings, numbers, and lists of strings and/or numbers
|===


[[cypher-deprecations-additions-removals-3.2]]
== Version 3.2
[options="header"]
|===
| Feature          | Type | Change | Details
| `CYPHER planner=rule` (Rule planner)    | Functionality | Removed | All queries now use the cost planner. Any query prepended thus will fall back to using Cypher 3.1.
| `CREATE UNIQUE`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `START`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `MATCH (n)-[rs*]-() RETURN rs`     | Syntax | Deprecated | Replaced by `MATCH p=(n)-[*]-() RETURN relationships(p) AS rs`
| `MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C*]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`
| <<java-reference#extending-neo4j-aggregation-functions, User-defined aggregation functions>> | Functionality | Added |
| <<administration-indexes-search-performance, Composite indexes>> | Index | Added |
| <<administration-constraints-node-key, Node Key>> | Index | Added | Neo4j Enterprise Edition only
| `CYPHER runtime=compiled` (Compiled runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-reverse-list,reverse()>> | Function  | Extended | Now also allows a list as input
| <<functions-max, max()>>, <<functions-min, min()>> | Function  | Extended | Now also supports aggregation over a set containing both strings and numbers
|===


[[cypher-deprecations-additions-removals-3.1]]
== Version 3.1
[options="header"]
|===
| Feature     | Type | Change | Details
| `rels()`    | Function  | Deprecated | Replaced by <<functions-relationships,relationships()>>
| `toInt()`   | Function  | Deprecated | Replaced by <<functions-tointeger,toInteger()>>
| `lower()`   | Function  | Deprecated | Replaced by <<functions-tolower,toLower()>>
| `upper()`   | Function  | Deprecated | Replaced by <<functions-toupper,toUpper()>>
| <<functions-toboolean,toBoolean()>> | Function | Added |
| <<cypher-map-projection,Map projection>> | Syntax | Added |
| <<cypher-pattern-comprehension,Pattern comprehension>> | Syntax | Added |
| <<java-reference#extending-neo4j-functions,User-defined functions>> | Functionality | Added |
| <<query-call,CALL\...YIELD\...WHERE>>   | Clause  | Extended  | Records returned by `YIELD` may be filtered further using `WHERE`
|===


[[cypher-deprecations-additions-removals-3.0]]
== Version 3.0
[options="header"]
|===
| Feature          | Type | Change | Details
| `has()`  | Function  | Removed | Replaced by <<functions-exists,exists()>>
| `str()`  | Function  | Removed | Replaced by <<functions-tostring,toString()>>
| `+{parameter}+` | Syntax | Deprecated | Replaced by <<cypher-parameters,$parameter>>
| <<functions-properties,properties()>>  | Function  | Added  |
| <<query-call,CALL [\...YIELD]>>   | Clause  | Added  |
| <<functions-point-cartesian-2d,point() - Cartesian 2D>> | Function | Added |
| <<functions-point-wgs84-2d,point() - WGS 84 2D>> | Function | Added |
| <<functions-distance,distance()>> | Function | Added |
| <<java-reference#extending-neo4j-procedures,User-defined procedures>> | Functionality | Added |
| <<functions-tostring,toString()>>   | Function  | Extended | Now also allows Boolean values as input
|===


[[cypher-compatibility]]
== Compatibility

[NOTE]
====
Neo4j’s ability to support multiple older versions of the Cypher language has changed over time.
In versions prior to Neo4j 3.4, the backwards compatibility layer included the Cypher language parser, planner, and runtime.
All supported versions of Cypher ran on the same Neo4j kernel.
However, this changed in Neo4j 3.4 when the runtime was excluded from the compatibility layer.
When you run, e.g. a `CYPHER 3.1` query in Neo4j 3.5, the query is planned with the 3.1 planner, but run with 3.5 runtime and kernel.
The compatibility layer changed again in Neo4j 4.0 and it now includes only the Cypher language parser.
When you run a `CYPHER 3.5` query, e.g., in Neo4j 4.4, Neo4j parses the older language features, but uses the 4.4 planner, runtime, and kernel to plan and run the query.
The primary reason for these changes is the optimizations in the Cypher runtime to allow Cypher queries to perform better.
====

Older versions of the language can still be accessed if required.
There are two ways to select which version to use in queries.

. Setting a version for all queries:
You can configure your database with the configuration parameter `cypher.default_language_version`, and enter which version you'd like to use (see <<cypher-versions>>).
Every Cypher query will use this version, provided the query hasn't explicitly been configured as described in the next item below.

. Setting a version on a query by query basis:
The other method is to set the version for a particular query.
Prepending a query with `CYPHER 3.5` will execute the query with the version of Cypher included in Neo4j 3.5.

Below is an example using the older parameter syntax `+{param}+`:

[source, cypher, role="nocopy,norun"]
----
CYPHER 3.5
MATCH (n:Person)
WHERE n.age > {agelimit}
RETURN n.name, n.age
----

Without the `CYPHER 3.5` prefix this query would fail with a syntax error. With `CYPHER 3.5` however, it will only generate a warning and still work.

[WARNING]
====
In Neo4j {neo4j-version} the Cypher parser understands some older language features, even if they are no longer supported by the Neo4j kernel.
These features result in runtime errors.
See the table at <<cypher-deprecations-additions-removals-4.0,Cypher Version 4.0>> for the list of affected features.
====


[[cypher-versions]]
== Supported language versions

Neo4j {neo4j-version} supports the following versions of the Cypher language:

* Neo4j Cypher 3.5
* Neo4j Cypher 4.3
* Neo4j Cypher 4.4

[TIP]
====
Each release of Neo4j supports a limited number of old Cypher Language Versions.
When you upgrade to a new release of Neo4j, please make sure that it supports the Cypher language version you need.
If not, you may need to modify your queries to work with a newer Cypher language version.
====
