[[cypher-working-with-null]]
= Working with `null`

[abstract]
--
This section describes working with the `null` value.
--

* <<cypher-null-intro, Introduction to `null` in Cypher>>
* <<cypher-null-logical-operators, Logical operations with `null`>>
* <<cypher-null-in-operator, The `IN` operator and `null`>>
* <<cypher-null-bracket-operator, The `[]` operator and `null`>>
* <<cypher-expressions-and-null, Expressions that return `null`>>
* <<is-null-is-not-null, `IS NULL` and `IS NOT NULL`>>


[[cypher-null-intro]]
== Introduction to `null` in Cypher

In Cypher, `null` is used to represent missing or undefined values.
Conceptually, `null` means **a missing unknown value** and it is treated somewhat differently from other values.
For example getting a property from a node that does not have said property produces `null`.
Most expressions that take `null` as input will produce `null`.
This includes boolean expressions that are used as predicates in the `WHERE` clause.
In this case, anything that is not `true` is interpreted as being false.

`null` is not equal to `null`.
Not knowing two values does not imply that they are the same value.
So the expression `null` = `null` yields `null` and not `true`.


[[cypher-null-logical-operators]]
== Logical operations with `null`

The logical operators (`AND`, `OR`, `XOR`, `NOT`) treat `null` as the **unknown value** of three-valued logic.

include::boolean-operator-table.asciidoc[]


[[cypher-null-in-operator]]
== The `IN` operator and `null`

The `IN` operator follows similar logic.
If Cypher knows that something exists in a list, the result will be `true`.
Any list that contains a `null` and doesn't have a matching element will return `null`.
Otherwise, the result will be `false`.
Here is a table with examples:

[options="header", cols="^,^", width="60%"]
|====
|Expression  | Result
|2 IN [1, 2, 3] | `true`
|2 IN [1, `null`, 3] | `null`
|2 IN [1, 2, `null`] | `true`
|2 IN [1] | `false`
|2 IN [] | `false`
|`null` IN [1, 2, 3] | `null`
|`null` IN [1, `null`, 3] | `null`
|`null` IN [] | `false`
|====

Using `all`, `any`, `none`, and `single` follows a similar rule.
If the result can be calculated definitely, `true` or `false` is returned.
Otherwise `null` is produced.

[[cypher-null-bracket-operator]]
== The `[]` operator and `null`

Accessing a list or a map with `null` will result in `null`:

[options="header", cols="^,^", width="60%"]
|====
|Expression  | Result
|[1, 2, 3][`null`] | `null`
|[1, 2, 3, 4][`null`..2] | `null`
|[1, 2, 3][1..`null`] | `null`
|{age: 25}[`null`] | `null`
|====

Using parameters to pass in the bounds, such as `a[$lower..$upper]`, may result in a `null` for the lower or upper bound (or both).
The following workaround will prevent this from happening by setting the absolute minimum and maximum bound values:
[source, cypher, role=noplay]
----
a[coalesce($lower,0)..coalesce($upper,size(a))]
----


[[cypher-expressions-and-null]]
== Expressions that return `null`

* Getting a missing element from a list: `[][0]`, `head([])`
* Trying to access a property that does not exist on a node or relationship: `n.missingProperty`
* Comparisons when either side is `null`: `1 < null`
* Arithmetic expressions containing `null`: `1 + null`
* Function calls where any arguments are `null`: `sin(null)`

[[is-null-is-not-null]]
== Using `IS NULL` and `IS NOT NULL`
Testing any value against `null`, either with the `=` operator or with the `<>` operator, always evaluates to `null`.
Therefore,  use the special equality operators `IS NULL` or `IS NOT NULL` instead (see <<cypher-comparison>>).
