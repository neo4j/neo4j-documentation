[[cypher-parameters]]
= Parameters


* <<cypher-parameters-introduction,Introduction>>
* <<cypher-parameters-string-literal,String literal>>
* <<cypher-parameters-regular-expression,Regular expression>>
* <<cypher-parameters-case-sensitive-pattern-matching,Case-sensitive string pattern matching>>
* <<cypher-parameters-create-node-with-properties,Create node with properties>>
* <<cypher-parameters-create-multiple-nodes-with-properties,Create multiple nodes with properties>>
* <<cypher-parameters-setting-all-properties-on-a-node,Setting all properties on a node>>
* <<cypher-parameters-skip-and-limit,`SKIP` and `LIMIT`>>
* <<cypher-parameters-node-id,Node id>>
* <<cypher-parameters-multiple-node-ids,Multiple node ids>>
* <<cypher-parameters-call-procedure,Calling procedures>>


[[cypher-parameters-introduction]]
== Introduction

Cypher supports querying with parameters.
This means developers don't have to resort to string building to create a query.
Additionally, parameters make caching of execution plans much easier for Cypher, thus leading to faster query execution times.

Parameters can be used for:

* literals and expressions
* node and relationship ids

Parameters cannot be used for the following constructs, as these form part of the query structure that is compiled into a query plan:

* property keys; so, `MATCH (n) WHERE n.$param = 'something'` is invalid
* relationship types
* labels

Parameters may consist of letters and numbers, and any combination of these, but cannot start with a number or a currency symbol.

Setting parameters when running a query is dependent on the client environment.
For example:

* To set a parameter in Cypher Shell use `:param name => 'Joe'`.
  For more information refer to <<operations-manual#cypher-shell-parameters, Operations Manual -> Cypher Shell - Query Parameters>>.
* For Neo4j Browser use the same syntax as Cypher Shell, `:param name => 'Joe'`.
* When using drivers, the syntax is dependent on the language choice.
  See the examples in _Transactions_ in the link:{docs-base-uri}[Neo4j Driver manuals].
* For usage via the Neo4j HTTP API, see the <<http-api#http-api, HTTP API documentation>>.

We provide below a comprehensive list of examples of parameter usage.
In these examples, parameters are given in JSON; the exact manner in which they are to be submitted depends upon the driver being used.

[NOTE]
====
The old parameter syntax `+{param}+` was deprecated in Neo4j 3.0 and removed entirely in Neo4j 4.0.
Using it will result in a syntax error.
However, it is still possible to use it, with warnings, if you prefix the query with `CYPHER 3.5`.
See <<cypher-compatibility, Cypher Compatibility>> for further information.
====


[[cypher-parameters-string-literal]]
== String literal

include::includes/exampleWithStringLiteralAsParameter.asciidoc[]

You can use parameters in this syntax as well:

include::includes/exampleWithShortSyntaxStringLiteralAsParameter.asciidoc[]


[[cypher-parameters-regular-expression]]
== Regular expression

include::includes/exampleWithParameterRegularExpression.asciidoc[]


[[cypher-parameters-case-sensitive-pattern-matching]]
== Case-sensitive string pattern matching

include::includes/exampleWithParameterCSCIStringPatternMatching.asciidoc[]


[[cypher-parameters-create-node-with-properties]]
== Create node with properties

include::includes/create_node_from_map.asciidoc[]


[[cypher-parameters-create-multiple-nodes-with-properties]]
== Create multiple nodes with properties

include::includes/create_multiple_nodes_from_map.asciidoc[]


[[cypher-parameters-setting-all-properties-on-a-node]]
== Setting all properties on a node

Note that this will replace all the current properties.

include::includes/set_properties_on_a_node_from_a_map.asciidoc[]


[[cypher-parameters-skip-and-limit]]
== `SKIP` and `LIMIT`

include::includes/exampleWithParameterForSkipLimit.asciidoc[]


[[cypher-parameters-node-id]]
== Node id

include::includes/exampleWithParameterForNodeId.asciidoc[]


[[cypher-parameters-multiple-node-ids]]
== Multiple node ids

include::includes/exampleWithParameterForMultipleNodeIds.asciidoc[]


[[cypher-parameters-call-procedure]]
== Calling procedures

include::includes/exampleWithParameterProcedureCall.asciidoc[]

