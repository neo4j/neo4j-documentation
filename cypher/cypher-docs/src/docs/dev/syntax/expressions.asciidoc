[[cypher-expressions]]
= Expressions

* <<cypher-expressions-general, Expressions in general>>
* <<cypher-expressions-string-literals, Note on string literals>>
* <<query-syntax-case, `CASE` expressions>>
 ** <<syntax-simple-case, Simple `CASE` form: comparing an expression against multiple values>>
 ** <<syntax-generic-case, Generic `CASE` form: allowing for multiple conditionals to be expressed>>
 ** <<syntax-distinguish-case, Distinguishing between when to use the simple and generic `CASE` forms>>

[[cypher-expressions-general]]
== Expressions in general

[NOTE]
Most expressions in Cypher evaluate to `null` if any of their inner expressions are `null`.
Notable exceptions are the operators `IS NULL` and `IS NOT NULL`.

An expression in Cypher can be:

* A decimal (integer or float) literal: `13`, `-40000`, `3.14`, `6.022E23`.
* A hexadecimal integer literal (starting with `0x`): `0x13af`, `0xFC3A9`, `-0x66eff`.
* An octal integer literal (starting with `0o` or `0`): `0o1372`, `02127`, `-0o5671`.
* A string literal: `'Hello'`, `"World"`.
* A boolean literal:  `true`, `false`, `TRUE`, `FALSE`.
* A variable: `n`, `x`, `rel`, `myFancyVariable`, `++`A name with weird stuff in it[]!`++`.
* A property: `n.prop`, `x.prop`, `rel.thisProperty`, `++myFancyVariable.`(weird property name)`++`.
* A dynamic property: `n["prop"]`, `rel[n.city + n.zip]`, `map[coll[0]]`.
* A parameter: `$param`, `$0`
* A list of expressions: `['a', 'b']`, `[1, 2, 3]`, `['a', 2, n.property, $param]`, `[ ]`.
* A function call: `length(p)`, `nodes(p)`.
* An aggregate function: `avg(x.prop)`, `count(*)`.
* A path-pattern: `+(a)-->()<--(b)+`.
* An operator application: `1 + 2` and `3 < 4`.
* A predicate expression is an expression that returns true or false: `a.prop = 'Hello'`, `length(p) > 10`,
`exists(a.name)`.
* An existential subquery is an expression that returns true or false:
`EXISTS {
  MATCH (n)-[r]->(p)
  WHERE p.name = 'Sven'
}`.
* A regular expression: `a.name =~ 'Tim.*'`
* A case-sensitive string matching expression: `a.surname STARTS WITH 'Sven'`, `a.surname ENDS WITH 'son'` or `a.surname CONTAINS 'son'`
* A `CASE` expression.


[[cypher-expressions-string-literals]]
== Note on string literals

String literals can contain the following escape sequences:

[options="header", cols=">1,<2", width="50%"]
|===================
|Escape sequence|Character
|`\t`|Tab
|`\b`|Backspace
|`\n`|Newline
|`\r`|Carriage return
|`\f`|Form feed
|`\'`|Single quote
|`\"`|Double quote
|`\\`|Backslash
|`\uxxxx`|Unicode UTF-16 code point (4 hex digits must follow the `\u`)
|`\Uxxxxxxxx`|Unicode UTF-32 code point (8 hex digits must follow the `\U`)
|===================

include::../ql/query-syntax-case.adoc[leveloffset=+1]
