[[cypher-expressions]]
= Expressions

[abstract]
--
This section contains an overview of expressions in Cypher with examples.
--

* <<cypher-expressions-general, Expressions in general>>
* <<cypher-expressions-string-literals, Note on string literals>>
* <<cypher-expressions-number-literals, Note on number literals>>
* <<query-syntax-case, `CASE` expressions>>
 ** <<syntax-simple-case, Simple `CASE` form: comparing an expression against multiple values>>
 ** <<syntax-generic-case, Generic `CASE` form: allowing for multiple conditionals to be expressed>>
 ** <<syntax-distinguish-case, Distinguishing between when to use the simple and generic `CASE` forms>>
 ** <<syntax-use-case-result, Using the result of `CASE` in the succeeding clause or statement>>
 ** <<syntax-use-case-with-null, Using `CASE` with null values>>
* <<query-syntax-label, Label expressions>>
 ** <<syntax-no-label, Match without label expression>>
 ** <<syntax-on-single-label, Match on single node label>>
 ** <<syntax-and-label, Match with an `AND` expression for the node labels>>
 ** <<syntax-or-label, Match with an `OR` expression for the node labels>>
 ** <<syntax-not-label, Match with a `NOT` expression for the node labels>>
 ** <<syntax-wild-label, Match with a `%` expression for the node labels>>
 ** <<syntax-list-label, List of label expressions examples>>
 ** <<syntax-nesting-label, Match with a nesting expression for the node labels>>
 ** <<syntax-predicate-label, Match with a label expression in the predicate>>
 ** <<syntax-return-label, Match with a label expression in the return>>
* <<query-syntax-type, Relationship type expressions>>
** <<syntax-no-type, Match without relationship type expression>>
** <<syntax-on-single-type, Match on single relationship type>>
** <<syntax-or-type, Match with an `OR` expression for the relationship type>>
** <<syntax-not-type, Match with a `NOT` expression for the relationship type>>
** <<syntax-nesting-type, Match with a nesting expression for the relationship type>>
** <<syntax-predicate-type, Match with a relationship type expression in the predicate>>
** <<syntax-return-type, Match with a relationship type expression in the return>>
** <<syntax-case-type, Match with a relationship type expression and a label expression in a case statement>>

[[cypher-expressions-general]]
== Expressions in general

[NOTE]
====
Most expressions in Cypher evaluate to `null` if any of their inner expressions are `null`.
Notable exceptions are the operators `IS NULL` and `IS NOT NULL`.
====

An expression in Cypher can be:

* A decimal (integer or float) literal: `13`, `-40000`, `3.14`
* A decimal (integer or float) literal in scientific notation: `6.022E23`.
* A hexadecimal integer literal (starting with `0x`): `0x13af`, `0xFC3A9`, `-0x66eff`.
* An octal integer literal (starting with `0o`): `0o1372`, `0o2127`, `-0o5671`.
* A float literal: `Inf`, `Infinity`, `NaN`
* A string literal: `'Hello'`, `"World"`.
* A boolean literal: `true`, `false`.
* A variable: `n`, `x`, `rel`, `myFancyVariable`, `++`A name with weird stuff in it[]!`++`.
* A property: `n.prop`, `x.prop`, `rel.thisProperty`, `++myFancyVariable.`(weird property name)`++`.
* A dynamic property: `n["prop"]`, `rel[n.city + n.zip]`, `map[coll[0]]`.
* A parameter: `$param`, `$0`.
* A list of expressions: `['a', 'b']`, `[1, 2, 3]`, `['a', 2, n.property, $param]`, `[]`.
* A function call: `length(p)`, `nodes(p)`.
* An aggregate function: `avg(x.prop)`, `+count(*)+`.
* A path-pattern: `+(a)-[r]->(b)+`, `+(a)-[r]-(b)+`, `+(a)--(b)+`, `+(a)-->()<--(b)+`.
* An operator application: `1 + 2`, `3 < 4`.
* A predicate expression is an expression that returns true or false: `a.prop = 'Hello'`, `length(p) > 10`, `a.name IS NOT NULL`.
* A special case of predicates are label and relationship type expressions: `(n:A|B)`, `()-[r:R1|R2]->()`.
* An existential subquery is an expression that returns true or false:
`EXISTS {
  MATCH (n)-[r]->(p)
  WHERE p.name = 'Sven'
}`.
* A regular expression: `a.name =~ 'Tim.*'`.
* A case-sensitive string matching expression: `a.surname STARTS WITH 'Sven'`, `a.surname ENDS WITH 'son'` or `a.surname CONTAINS 'son'`.
* A `CASE` expression.


[[cypher-expressions-string-literals]]
== Note on string literals

String literals can contain the following escape sequences:

[options="header", cols=">1,<2", width="50%"]
|===================
|Escape sequence|Character
|`\t`|Tab
|`\b`|Backspace
|`\n`|Newline
|`\r`|Carriage return
|`\f`|Form feed
|`\'`|Single quote
|`\"`|Double quote
|`\\`|Backslash
|`\uxxxx`|Unicode UTF-16 code point (4 hex digits must follow the `\u`)
|`\Uxxxxxxxx`|Unicode UTF-32 code point (8 hex digits must follow the `\U`)
|===================


[[cypher-expressions-number-literals]]
== Note on number literals

Any number literal may contain an underscore `_` between digits.
There may be an underscore between the `0x` or `0o` and the digits for hexadecimal and octal literals.

include::../ql/query-syntax-case.adoc[leveloffset=+1]
include::../ql/query-syntax-label.adoc[leveloffset=+1]


[[syntax-list-label]]
=== List of label expressions examples

The following table displays whether the label expression matches the node:

[cols="^3,^2,^2,^2,^2,^2,^2,^2,^2"]
|===
|
8+^|*Node*

|*Label expression* | `()` | `(:A)` | `(:B)` | `(:C)` | `(:A:B)` | `(:A:C)` | `(:B:C)` | `(:A:B:C)`
| `()` | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark}
| `(:A)` | | {check-mark} | | | {check-mark} | {check-mark} | | {check-mark}
| `(:A&B)` | | | | | {check-mark} | | | {check-mark}
| `(:A\|B)` | | {check-mark} | {check-mark} | | {check-mark} | {check-mark} | {check-mark} | {check-mark}
| `(:!A)` | {check-mark} | | {check-mark} | {check-mark} | | | {check-mark} |
| `(:!!A)` | | {check-mark} | | | {check-mark} | {check-mark} | | {check-mark}
| `(:A&!A)` | | | | | | | |
| `(:A\|!A)` | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark}
| `(:%)` | | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark}
| `(:!%)` | {check-mark} | | | | | | |
| `(:%\|!%)` | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark}
| `(:%&!%)` | | | | | | | |
| `(:A&%)` | | {check-mark} | | | {check-mark} | {check-mark} | | {check-mark}
| `(:A\|%)` | | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark} | {check-mark}
| `(:(A&B)&!(B&C))` | | | | | {check-mark} | | |
| `(:!(A&%)&%))` | | | {check-mark} | {check-mark} | | | {check-mark} |
|===

[WARNING]
Label expressions cannot be combined with label syntax.
For example, `:A:B&C` will throw an error.
Instead, use either `:A&B&C` or `:A:B:C`.

include::../ql/query-syntax-type.adoc[leveloffset=+1]

[[syntax-list-type]]
=== List of relationship type expressions examples

The following table displays whether the relationship type expression matches the node:

[cols="^3,^2,^2,^2"]
|===
|
3+^|*Relationship Type*

|*Relationship Type expression* |  `[:A]` | `[:B]` | `[:C]`
| `[]` | {check-mark} | {check-mark} | {check-mark}
| `[:A]` | {check-mark} |  |
| `[:A&B]` |||
| `[:A\|B]` | {check-mark} | {check-mark} |
| `[:!A]` || {check-mark} | {check-mark}
| `[:!!A]` | {check-mark} | |
| `[:A&!A]` |||
| `[:A\|!A]` | {check-mark} | {check-mark} | {check-mark}
| `[:%]` | {check-mark} | {check-mark} | {check-mark}
| `[:!%]` |||
| `[:%\|!%]` | {check-mark} | {check-mark} | {check-mark}
| `[:%&!%]` |||
| `[:A&%]` |||
| `[:A\|%]` | {check-mark} | {check-mark} | {check-mark}
|===

[NOTE]
====
<<cypher-pattern-varlength, Variable length relationships>> may only have relationship type expressions consisting of `|`.
That means that `()-[r:!R*]-()` is not allowed, whereas `()-[r:Q|R*]-()` is allowed.
====

[WARNING]
====
Relationships must have exactly one type so for example, `(a)-[r:R&Q]-(b)` or `(a)-[r:!%]-(b)` will never return any results.
====