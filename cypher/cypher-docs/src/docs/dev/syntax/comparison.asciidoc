[[cypher-comparison]]
== Equality and comparison of values

=== Equality

Cypher supports comparing values (see <<cypher-values>>) by equality using the `=` and `<>` operators.

Values of the same type are only equal if they are the same identical value (e.g. `3 = 3` and `"x" <> "xy"`).

Maps are only equal if they map exactly the same keys to equal values and lists are only equal if they contain the same sequence of equal values (e.g. `[3, 4] = [1+2, 8/2]`).

Values of different types are considered as equal according to the following rules:

* Paths are treated as lists of alternating nodes and relationships and are equal to all lists that contain that very same sequence of nodes and relationships.
* Testing any value against `null` with both the `=` and the `<>` operators always is `null`.
This includes `null = null` and `null <> null`.
The only way to reliably test if a value `v` is  `null` is by using the special `v IS NULL`, or `v IS NOT NULL` equality operators.

All other combinations of types of values cannot be compared with each other.
Especially, nodes, relationships, and literal maps are incomparable with each other.

It is an error to compare values that cannot be compared.


[[cypher-ordering]]
== Ordering and comparison of values

The comparison operators `\<=`, `<` (for ascending) and `>=`, `>` (for descending) are used to compare values for ordering.
The following points give some details on how the comparison is performed.

* Numerical values are compared for ordering using numerical order (e.g. `3 < 4` is true).
* The special value `java.lang.Double.NaN` is regarded as being larger than all other numbers.
* String values are compared for ordering using lexicographic order (e.g. `"x" < "xy"`).
* Boolean values are compared for ordering such that `false < true`.
* *Comparison* of spatial values:
 ** Point values can only be compared within the same Coordinate Reference System (CRS) -- otherwise, the result will be `null`.
 ** For two points `a` and `b` within the same CRS, `a` is considered to be greater than `b` if `a.x > b.x` and `a.y > b.y` (and `a.z > b.z` for 3D points).
 ** `a` is considered less than `b` if `a.x < b.x` and `a.y < b.y` (and `a.z < b.z` for 3D points).
 ** If none if the above is true, the points are considered incomparable and any comparison operator between them will return `null`.
* *Ordering* of spatial values:
 ** `ORDER BY` requires all values to be orderable.
 ** Points are ordered after arrays and before temporal types.
 ** Points of different CRS are ordered by the CRS code (the value of SRID field). For the currently supported set of <<cypher-spatial-crs, Coordinate Reference Systems>> this means the order: 4326, 4979, 7302, 9157
 ** Points of the same CRS are ordered by each coordinate value in turn, `x` first, then `y` and finally `z`.
 ** Note that this order is different to the order returned by the spatial index, which will be the order of the space filling curve.
* *Comparison* of temporal values:
 ** <<cypher-temporal-instants, Temporal instant values>> are comparable within the same type.
 An instant is considered less than another instant if it occurs before that instant in time, and it is considered greater than if it occurs after.
 ** Instant values that occur at the same point in time -- but that have a different time zone -- are not considered equal, and must therefore be ordered in some predictable way.
 Cypher prescribes that, after the primary order of point in time, instant values be ordered by effective time zone offset, from west (negative offset from UTC) to east (positive offset from UTC).
 This has the effect that times that represent the same point in time will be ordered with the time with the earliest local time first.
 If two instant values represent the same point in time, and have the same time zone offset, but a different named time zone (this is possible for _DateTime_ only, since _Time_ only has an offset), these values are not considered equal, and ordered by the time zone identifier, alphabetically, as its third ordering component.
 If the type, point in time, offset, and time zone name are all equal, then the values are equal, and any difference in order is impossible to observe.
 ** <<cypher-temporal-durations, _Duration_>> values cannot be compared, since the length of a _day_, _month_ or _year_ is not known without knowing which _day_, _month_ or _year_ it is.
 Since _Duration_ values are not comparable, the result of applying a comparison operator between two _Duration_ values is `null`.
* *Ordering* of temporal values:
 ** `ORDER BY` requires all values to be orderable.
 ** Temporal instances are ordered after spatial instances and before strings.
 ** Comparable values should be ordered in the same order as implied by their comparison order.
 ** Temporal instant values are first ordered by type, and then by comparison order within the type.
 ** Since no complete comparison order can be defined for _Duration_ values, we define an order for `ORDER BY` specifically for _Duration_:
 *** _Duration_ values are ordered by normalising all components as if all years were `365.2425` days long (`PT8765H49M12S`), all months were `30.436875` (`1/12` year) days long (`PT730H29M06S`), and all days were `24` hours long footnote:[The `365.2425` days per year comes from the frequency of leap years.
 A leap year occurs on a year with an ordinal number divisible by `4`, that is not divisible by `100`, unless it divisible by `400`.
 This means that over `400` years there are `((365 * 4 + 1) * 25 - 1) * 4 + 1 = 146097` days, which means an average of `365.2425` days per year.].
* Comparing for ordering when one argument is `null` (e.g. `null < 3` is `null`).


[[cypher-operations-chaining]]
== Chaining comparison operations
Comparisons can be chained arbitrarily, e.g., `x < y \<= z` is equivalent to `x < y AND y \<= z`.

Formally, if `a, b, c, \..., y, z` are expressions and `op1, op2, \..., opN` are comparison operators, then `a op1 b op2 c \... y opN z` is equivalent to `a op1 b and b op2 c and \... y opN z`.

Note that `a op1 b op2 c` does not imply any kind of comparison between `a` and `c`, so that, e.g., `x < y > z` is perfectly legal (although perhaps not elegant).

The example:

[source, cypher]
----
MATCH (n) WHERE 21 < n.age <= 30 RETURN n
----

is equivalent to

[source, cypher]
----
MATCH (n) WHERE 21 < n.age AND n.age <= 30 RETURN n
----

Thus it will match all nodes where the age is between 21 and 30.

This syntax extends to all equality and inequality comparisons, as well as extending to chains longer than three.

For example:

[source, cypher]
----
a < b = c <= d <> e
----

Is equivalent to:

[source, cypher]
----
a < b AND b = c AND c <= d AND d <> e
----
