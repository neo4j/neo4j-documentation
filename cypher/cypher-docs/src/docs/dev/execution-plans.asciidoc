[[execution-plans]]
= Execution plans

[abstract]
--
This section describes the characteristics of query execution plans and provides details about each of the operators.
--

* <<execution-plan-introduction, Introduction>>
* <<execution-plan-operators-summary, Execution plan operators>>
* <<execution-plans-dbhits, Database hits (DbHits)>>
* <<execution-plans-operators, Execution plan operators in detail>>
* <<query-shortestpath-planning, Shortest path planning>>

[NOTE]
For information on replanning, see <<cypher-replanning>>.


[[execution-plan-introduction]]
== Introduction

The task of executing a query is decomposed into _operators_, each of which implements a specific piece of work.
The operators are combined into a tree-like structure called an _execution plan_.
Each operator in the execution plan is represented as a node in the tree.
Each operator takes as input zero or more rows, and produces as output zero or more rows.
This means that the output from one operator becomes the input for the next operator.
Operators that join two branches in the tree combine input from two incoming streams and produce a single output.

.Evaluation model
Evaluation of the execution plan begins at the leaf nodes of the tree.
Leaf nodes have no input rows and generally comprise operators such as scans and seeks.
These operators obtain the data directly from the storage engine, thus incurring <<execution-plans-dbhits, database hits>>.
Any rows produced by leaf nodes are then piped into their parent nodes, which in turn pipe their output rows to their parent nodes and so on, all the way up to the root node.
The root node produces the final results of the query.

[[eagerness-laziness]]
.Eager and lazy evaluation
In general, query evaluation is _lazy_: most operators pipe their output rows to their parent operators as soon as they are produced.
This means that a child operator may not be fully exhausted before the parent operator starts consuming the input rows produced by the child.

However, some operators, such as those used for aggregation and sorting, need to aggregate all their rows before they can produce output.
Such operators need to complete execution in its entirety before any rows are sent to their parents as input.
These operators are called _eager_ operators, and are denoted as such in <<execution-plan-operators-summary>>.
Eagerness can cause high memory usage and may therefore be the cause of query performance issues.

.Statistics
Each operator is annotated with statistics.

`Rows`::
The number of rows that the operator produced.
This is only available if the query was profiled.
`EstimatedRows`::
This is the estimated number of rows that is expected to be produced by the operator.
The estimate is an approximate number based on the available statistical information.
The compiler uses this estimate to choose a suitable execution plan.
`DbHits`::
Each operator will ask the Neo4j storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.
The actions triggering a database hit are listed in <<execution-plans-dbhits>>.
`Page Cache Hits`, `Page Cache Misses`, `Page Cache Hit Ratio`::
These metrics are only shown for some queries when using Neo4j Enterprise Edition.
The page cache is used to cache data and avoid accessing disk, so having a high number of `hits` and a low number of `misses` will typically make the query run faster.
Whenever several operators are fused together for more efficient execution we can no longer associate this metric with a given operator and then nothing will appear here.

`Time`::
`Time` is only shown for some operators when using the `pipelined` runtime.
The number shown is the time in milliseconds it took to execute the given operator.
Whenever several operators are fused together for more efficient execution we can no longer associate a duration with a given operator and then nothing will appear here.

To produce an efficient plan for a query, the Cypher query planner requires information about the Neo4j database.
This information includes which indexes and constraints are available, as well as various statistics maintained by the database.
The Cypher query planner uses this information to determine which access patterns will produce the best execution plan.

The statistical information maintained by Neo4j is:

. The number of nodes having a certain label.
. The number of relationships by type.
. Selectivity per index.
. The number of relationships by type, ending with or starting from a node with a specific label.

Information about how the statistics are kept up to date, as well as configuration options for managing query replanning and caching, can be found in the <<operations-manual#statistics-execution-plans, Operations Manual -> Statistics and execution plans>>.

<<query-tuning>> describes how to tune Cypher queries.
In particular, see <<how-do-i-profile-a-query>> for how to view the execution plan for a query and <<query-using>> for how to use _hints_ to influence the decisions of the planner when building an execution plan for a query.

For a deeper understanding of how each operator works, refer to <<execution-plan-operators-summary>> and the linked sections per operator.
Please remember that the statistics of the particular database where the queries run will decide the plan used.
There is no guarantee that a specific query will always be solved with the same plan.


[[execution-plan-operators-summary]]
== Execution plan operators at a glance

This table comprises all the execution plan operators ordered lexicographically.

* _Leaf_ operators, in most cases, locate the starting nodes and relationships required in order to execute the query.

* _Updating_ operators are used in queries that update the graph.

* _Eager_ operators <<eagerness-laziness, accumulate all their rows>> before piping them to the next operator.

[options="header"]
|===
|Name                                                                       | Description | Leaf? | Updating? | Considerations
| <<query-plan-all-nodes-scan, AllNodesScan>>                                | Reads all nodes from the node store. | Y | |
| <<query-plan-anti-conditional-apply, AntiConditionalApply>>                | Performs a nested loop. If a variable is `null`, the right-hand side will be executed. | | |
| <<query-plan-anti-semi-apply, AntiSemiApply>>                              | Performs a nested loop. Tests for the absence of a pattern predicate. | | |
| <<query-plan-apply, Apply>>                                                | Performs a nested loop. Yields rows from both the left-hand and right-hand side operators.  | | |
| <<query-plan-argument, Argument>>                                | Indicates the variable to be used as an argument to the right-hand side of an `Apply` operator.  | Y | |
| <<query-plan-assert-same-node, AssertSameNode>>                            | Used to ensure that no unique constraints are violated.  | | |
| <<query-plan-cache-properties, CacheProperties>>                 | Reads node or relationship properties and caches them. | | |
| <<query-plan-cartesian-product, CartesianProduct>>                 | Produces a cartesian product of the inputs from the left-hand and right-hand operators.  | | |
| <<query-plan-conditional-apply, ConditionalApply>>                         | Performs a nested loop. If a variable is not `null`, the right-hand side will be executed.  | | |
| <<query-plan-create-index, CreateIndex>>              | Creates an index on a property for all nodes having a certain label.  | | Y |
| <<query-plan-create-node-key-constraint, CreateNodeKeyConstraint>>     |  Creates a node key constraint on a set of properties for all nodes having a certain label.  | | Y |
| <<query-plan-create-nodes---relationships, Create>>              | Creates nodes and relationships.  | | Y |
| <<query-plan-create-node-property-existence-constraint, CreateNodePropertyExistenceConstraint>>     |  Creates an existence constraint on a property for all nodes having a certain label.  | | Y |
| <<query-plan-create-relationship-property-existence-constraint, CreateRelationshipPropertyExistenceConstraint>>     | Creates an existence constraint on a property for all relationships of a certain type.  | | Y |
| <<query-plan-create-unique-constraint, CreateUniqueConstraint>>                  | Creates a unique constraint on a property for all nodes having a certain label.  | | Y |
| <<query-plan-delete, Delete>>                                          | Deletes a node or relationship.  | | Y |
| <<query-plan-detach-delete, DetachDelete>>               | Deletes a node and its relationships.  | | Y |
| <<query-plan-directed-relationship-by-id-seek, DirectedRelationshipByIdSeek>>  | Reads one or more relationships by id from the relationship store.  | Y | |
| <<query-plan-distinct, Distinct>>                                          | Drops duplicate rows from the incoming stream of rows.  | | | Eager
| <<query-plan-create-constraint-only-if-it-does-not-already-exist, DoNothingIfExists(CONSTRAINT)>> | Checks if a constraint already exists, if it does then it stops the execution, if not it continues | Y | |
| <<query-plan-create-index-only-if-it-does-not-already-exist, DoNothingIfExists(INDEX)>> | Checks if an index already exists, if it does then it stops the execution, if not it continues | Y | |
| <<query-plan-drop-index-by-schema, DropIndex>> (deprecated syntax) | Drops an index from a property for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-drop-index-by-name, DropIndex>> (new syntax) | Drops an index using its name.  | Y | Y |
| <<query-plan-drop-constraint-by-name, DropConstraint>>     |  Drops a constraint using its name.  | Y | Y |
| <<query-plan-drop-node-key-constraint, DropNodeKeyConstraint>>     |  Drops a node key constraint from a set of properties for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-drop-node-property-existence-constraint, DropNodePropertyExistenceConstraint>>     | Drops an existence constraint from a property for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-drop-relationship-property-existence-constraint, DropRelationshipPropertyExistenceConstraint>>     | Drops an existence constraint from a property for all relationships of a certain type.  | Y | Y | Deprecated
| <<query-plan-drop-result, DropResult>>     | Produces zero rows when an expression is guaranteed to produce an empty result.  |  |  |
| <<query-plan-drop-unique-constraint, DropUniqueConstraint>>                  | Drops a unique constraint from a property for all nodes having a certain label.  | Y | Y | Deprecated
| <<query-plan-eager, Eager>>                                                | For isolation purposes, `Eager` ensures that operations affecting subsequent operations are executed fully for the whole dataset before continuing execution.  | | | Eager
| <<query-plan-eager-aggregation, EagerAggregation>>                         | Evaluates a grouping expression. | | | Eager
| <<query-plan-empty-result, EmptyResult>>                                   | Eagerly loads all incoming data and discards it. | | |
| <<query-plan-empty-row, EmptyRow>>                                   | Returns a single row with no columns. | Y | |
| <<query-plan-expand-all, Expand(All) >>                                    | Traverses incoming or outgoing relationships from a given node. | | |
| <<query-plan-expand-into, Expand(Into)>>                                   | Finds all relationships between two nodes. | | |
| <<query-plan-filter, Filter>>                                              | Filters each row coming from the child operator, only passing through rows that evaluate the predicates to `true`. | | |
| <<query-plan-foreach, Foreach>>                                              | Performs a nested loop. Yields rows from the left-hand operator and discards rows from the right-hand operator. | | |
| <<query-plan-let-anti-semi-apply, LetAntiSemiApply>>                       | Performs a nested loop. Tests for the absence of a pattern predicate in queries containing multiple pattern predicates. | | |
| <<query-plan-let-select-or-semi-apply, LetSelectOrSemiApply>>              | Performs a nested loop. Tests for the presence of a pattern predicate that is combined with other predicates. | | |
| <<query-plan-let-select-or-anti-semi-apply, LetSelectOrAntiSemiApply>>     | Performs a nested loop. Tests for the absence of a pattern predicate that is combined with other predicates. | | |
| <<query-plan-let-semi-apply, LetSemiApply>>                                | Performs a nested loop. Tests for the presence of a pattern predicate in queries containing multiple pattern predicates. | | |
| <<query-plan-limit, Limit>>                                                | Returns the first 'n' rows from the incoming input. | | |
| <<query-plan-load-csv, LoadCSV>>                                                  | Loads data from a CSV source into the query. | Y | |
| <<query-plan-lock-nodes, LockNodes>>                                                | Locks the start and end node when creating a relationship. | | |
| <<query-plan-merge-create-node, MergeCreateNode>>            | Creates the node when failing to find the node. | Y | Y |
| <<query-plan-merge-create-relationship, MergeCreateRelationship>>            | Creates the relationship when failing to find the relationship. | | Y |
| <<query-plan-node-by-id-seek, NodeByIdSeek>>                               | Reads one or more nodes by id from the node store. | Y | |
| <<query-plan-node-by-label-scan, NodeByLabelScan>>                         | Fetches all nodes with a specific label from the node label index. | Y | |
| <<query-plan-node-count-from-count-store, NodeCountFromCountStore>>        | Uses the count store to answer questions about node counts. | Y | |
| <<query-plan-node-hash-join, NodeHashJoin>>                                | Executes a hash join on node ids. | | | Eager
| <<query-plan-node-index-contains-scan, NodeIndexContainsScan>>             | Examines all values stored in an index, searching for entries containing a specific string. | Y | |
| <<query-plan-node-index-ends-with-scan, NodeIndexEndsWithScan>>        | Examines all values stored in an index, searching for entries ending in a specific string. | Y | |
| <<query-plan-node-index-scan, NodeIndexScan>>                              | Examines all values stored in an index, returning all nodes with a particular label having a specified property. | Y | |
| <<query-plan-node-index-seek, NodeIndexSeek>>                              | Finds nodes using an index seek. | Y | |
| <<query-plan-node-index-seek-by-range, NodeIndexSeekByRange>>                 | Finds nodes using an index seek where the value of the property matches the given prefix string. | Y | |
| <<query-plan-node-left-right-outer-hash-join, NodeLeftOuterHashJoin>>                 | Executes a left outer hash join. |  |  | Eager
| <<query-plan-node-left-right-outer-hash-join, NodeRightOuterHashJoin>>                 | Executes a right outer hash join. |  |  | Eager
| <<query-plan-node-unique-index-seek, NodeUniqueIndexSeek>>                        | Finds nodes using an index seek within a unique index. | Y | |
| <<query-plan-node-unique-index-seek-by-range, NodeUniqueIndexSeekByRange>>                 | Finds nodes using an index seek within a unique index where the value of the property matches the given prefix string. | Y | |
| <<query-plan-ordered-aggregation, OrderedAggregation>>                    | Like `EagerAggregation` but relies on the ordering of incoming rows. Is not eager. | | |
| <<query-plan-ordered-distinct, OrderedDistinct>>                    | Like `Distinct` but relies on the ordering of incoming rows. | | |
| <<query-plan-optional, Optional>>                    | Yields a single row with all columns set to `null` if no data is returned by its source. | | |
| <<query-plan-optional-expand-all, OptionalExpand(All)>>                    | Traverses relationships from a given node, producing a single row with the relationship and end node set to `null` if the predicates are not fulfilled. | | |
| <<query-plan-optional-expand-into, OptionalExpand(Into)>>                    | Traverses all relationships between two nodes, producing a single row with the relationship and end node set to `null` if no matching relationships are found (the start node will be the node with the smallest degree). | | |
| <<query-plan-partial-sort, PartialSort>>                               | Sorts a row by multiple columns if there is already an ordering.| | |
| <<query-plan-partial-top, PartialTop>>                                 | Returns the first 'n' rows sorted by multiple columns if there is already an ordering.| | |
| <<query-plan-procedure-call, ProcedureCall>>                               | Calls a procedure. | | |
| <<query-plan-produce-results, ProduceResults>>                                   | Prepares the result so that it is consumable by the user. | | |
| <<query-plan-project-endpoints, ProjectEndpoints>>                         | Projects the start and end node of a relationship. | | |
| <<query-plan-projection, Projection>>                                      | Evaluates a set of expressions, producing a row with the results thereof. | Y | |
| <<query-plan-relationship-count-from-count-store, RelationshipCountFromCountStore>>    | Uses the count store to answer questions about relationship counts. | Y | |
| <<query-plan-remove-labels, RemoveLabels>>   | Deletes labels from a node. | | Y |
| <<query-plan-roll-up-apply, RollUpApply>>      | Performs a nested loop. Executes a pattern expression or pattern comprehension. | | |
| <<query-plan-select-or-anti-semi-apply, SelectOrAntiSemiApply>>            | Performs a nested loop. Tests for the absence of a pattern predicate if an expression predicate evaluates to `false`. | | |
| <<query-plan-select-or-semi-apply, SelectOrSemiApply>>                     | Performs a nested loop. Tests for the presence of a pattern predicate if an expression predicate evaluates to `false`. | | |
| <<query-plan-semi-apply, SemiApply>>                                       | Performs a nested loop. Tests for the presence of a pattern predicate. | | |
| <<query-plan-set-labels, SetLabels>>                            | Sets labels on a node. | | Y |
| <<query-plan-set-node-properties-from-map, SetNodePropertiesFromMap>>          | Sets properties from a map on a node. | | Y |
| <<query-plan-set-property, SetProperty>>          | Sets a property on a node or relationship. | | Y |
| <<query-plan-set-relationship-properties-from-map, SetRelationshipPropertiesFromMap>>    | Sets properties from a map on a relationship. | | Y |
| <<query-plan-list-constraints, ShowConstraints>>                           | List constraints with either verbose of brief output. | Y | |
| <<query-plan-list-indexes, ShowIndexes>>                                   | List indexes with either verbose of brief output. | Y | |
| <<query-plan-skip, Skip>>                                                  | Skips 'n' rows from the incoming rows. | | |
| <<query-plan-sort, Sort>>                                                  | Sorts rows by a provided key. | | | Eager
| <<query-plan-top, Top>>                                                    | Returns the first 'n' rows sorted by a provided key. | | | Eager
| <<query-plan-triadic-selection, TriadicSelection>>                                            | Solves triangular queries, such as the very common 'find my friend-of-friends that are not already my friend'. | | |
| <<query-plan-undirected-relationship-by-id-seek, UndirectedRelationshipByIdSeek>> | Reads one or more relationships by id from the relationship store. | Y | |
| <<query-plan-union, Union>>                                                | Concatenates the results from the right-hand operator with the results from the left-hand operator. | | |
| <<query-plan-unwind, Unwind>>                                              | Returns one row per item in a list. | | |
| <<query-plan-value-hash-join, ValueHashJoin>>                       | Executes a hash join on arbitrary values. | | | Eager
| <<query-plan-varlength-expand-all, VarLengthExpand(All)>>                                   | Traverses variable-length relationships from a given node. | | |
| <<query-plan-varlength-expand-into, VarLengthExpand(Into)>>                                   | Finds all variable-length relationships between two nodes. | | |
| <<query-plan-varlength-expand-pruning, VarLengthExpand(Pruning)>>                                   | Traverses variable-length relationships from a given node and only returns unique end nodes. | | |
|===


[[execution-plans-dbhits]]
== Database hits (DbHits)

Each operator will send a request to the storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.

We list below all the actions that trigger one or more database hits:

* Create actions
** Create a node
** Create a relationship
** Create a new node label
** Create a new relationship type
** Create a new ID for property keys with the same name

* Delete actions
** Delete a node
** Delete a relationship

* Update actions
** Set one or more labels on a node
** Remove one or more labels from a node

* Node-specific actions
** Get a node by its ID
** Get the degree of a node
** Determine whether a node is dense
** Determine whether a label is set on a node
** Get the labels of a node
** Get a property of a node
** Get an existing node label
** Get the name of a label by its ID, or its ID by its name

* Relationship-specific actions
** Get a relationship by its ID
** Get a property of a relationship
** Get an existing relationship type
** Get a relationship type name by its ID, or its ID by its name


* General actions
** Get the name of a property key by its ID, or its ID by the key name
** Find a node or relationship through an index seek or index scan
** Find a path in a variable-length expand
** Find a shortest path
** Ask the count store for a value


* Schema actions
** Add an index
** Drop an index
** Get the reference of an index
** Listing indexes
** Create a constraint
** Drop a constraint
** Listing constraints

* Call a procedure
* Call a user-defined function

[NOTE]
--
The presented value can vary slightly depending on the <<cypher-runtime, Cypher runtime>> that was used to execute the query.
In the pipelined runtime the number of _database hits_ will typically be higher since it uses a more accurate way of measuring.
--
include::execution-plan-groups/operators.asciidoc[leveloffset=+1]

include::execution-plan-groups/query-shortestpath-planning.adoc[leveloffset=+1]
