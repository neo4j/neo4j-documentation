[[cypher-glossary]]
= Glossary of keywords

[abstract]
--
This section comprises a glossary of all the keywords -- grouped by category and thence ordered lexicographically -- in the Cypher query language.
--

* <<glossary-clauses, Clauses>>
* <<glossary-operators, Operators>>
* <<glossary-functions, Functions>>
* <<glossary-expressions, Expressions>>
* <<glossary-cypher-query-options, Cypher query options>>


[[glossary-clauses]]
== <<query-clause, Clauses>>

[options="header"]
|===
|Clause                                     | Category      |   Description
|<<query-call, CALL [...YIELD]>>                        | Reading/Writing   | Invoke a procedure deployed in the database.
|<<query-create, CREATE>>                    | Writing     |  Create nodes and relationships.
|<<constraints-create-node-property-existence-constraint, CREATE CONSTRAINT ON (n:Label) ASSERT exists(n.property)>>  | Schema   | Create a constraint ensuring that all nodes with a particular label have a certain property.
|<<constraints-create-a-node-key, CREATE CONSTRAINT ON (n:Label) ASSERT (n.prop1, ..., n.propN) IS NODE KEY>>  |  Schema | Create a constraint ensuring all nodes with a particular label have all the specified properties and that the combination of property values is unique; i.e. ensures existence and uniqueness.
|<<constraints-create-relationship-property-existence-constraint, CREATE CONSTRAINT ON ()-[r:REL_TYPE]-() ASSERT exists(r.property)>>  | Schema   | Create a constraint ensuring that all relationship with a particular type have a certain property.
|<<constraints-create-unique-constraint, CREATE CONSTRAINT ON (n:Label) ASSERT n.property IS UNIQUE>>  |  Schema | Create a constraint ensuring the uniqueness of the combination of node label and property value for a particular property key across all nodes.
|<<schema-index-create-a-single-property-index, CREATE INDEX ON :Label(property)>>  | Schema  | Create an index on all nodes with a particular label and a single property; i.e. create a single-property index.
|<<schema-index-create-a-composite-index, CREATE INDEX ON :Label(prop1, ..., propN)>>  | Schema  | Create an index on all nodes with a particular label and multiple properties; i.e. create a composite index.
|<<query-delete, DELETE>>                    | Writing     |  Delete graph elements — nodes, relationships or paths. Any node to be deleted must also have all associated relationships explicitly deleted.
|<<query-delete, DETACH DELETE>>             | Writing     |  Delete a node or set of nodes. All associated relationships will automatically be deleted.
|<<constraints-drop-node-property-existence-constraint, DROP CONSTRAINT ON (n:Label) ASSERT exists(n.property)>>      | Schema   | Drop a constraint ensuring that all nodes with a particular label have a certain property.
|<<constraints-drop-relationship-property-existence-constraint, DROP CONSTRAINT ON ()-[r:REL_TYPE]-() ASSERT exists(r.property)>>      | Schema   | Drop a constraint ensuring that all relationship with a particular type have a certain property.
|<<constraints-drop-unique-constraint, DROP CONSTRAINT ON (n:Label) ASSERT n.property IS UNIQUE>>       | Schema | Drop a constraint ensuring the uniqueness of the combination of node label and property value for a particular property key across all nodes.
|<<constraints-drop-a-node-key, DROP CONSTRAINT ON (n:Label) ASSERT (n.prop1, ..., n.propN) IS NODE KEY>>       | Schema | Drop a constraint ensuring all nodes with a particular label have all the specified properties and that the combination of property values is unique.
|<<schema-index-drop-a-single-property-index, DROP INDEX ON :Label(property)>>       | Schema | Drop an index from all nodes with a particular label and a single property; i.e. drop a single-property index.
|<<schema-index-drop-a-composite-index, DROP INDEX ON :Label(prop1, ..., propN)>>       | Schema | Drop an index from all nodes with a particular label and multiple properties; i.e. drop a composite index.
|<<query-foreach, FOREACH>>                  | Writing     |  Update data within a list, whether components of a path, or the result of aggregation.
|<<query-limit, LIMIT>>                          | Reading sub-clause | A sub-clause used to constrain the number of rows in the output.
|<<query-load-csv, LOAD CSV>>                | Importing data     |  Use when importing data from CSV files.
|<<query-match, MATCH>>                      | Reading      |  Specify the patterns to search for in the database.
|<<query-merge, MERGE>>                      | Reading/Writing     |  Ensures that a pattern exists in the graph. Either the pattern already exists, or it needs to be created.
|<<query-merge-on-create-on-match, ON CREATE>>   | Reading/Writing | Used in conjunction with `MERGE`, specifying the actions to take if the pattern needs to be created.
|<<query-merge-on-create-on-match, ON MATCH>>    | Reading/Writing | Used in conjunction with `MERGE`, specifying the actions to take if the pattern already exists.
|<<query-optional-match, OPTIONAL MATCH>>    | Reading      |  Specify the patterns to search for in the database while using `nulls` for missing parts of the pattern.
|<<query-order, ORDER BY [ASC[ENDING] \| DESC[ENDING]]>>                       | Reading sub-clause | A sub-clause following `RETURN` or `WITH`, specifying that the output should be sorted in either ascending (the default) or descending order.
|<<query-remove, REMOVE>>                    | Writing     |  Remove properties and labels from nodes and relationships.
|<<query-return, RETURN ... [AS]>>                    | Projecting   |  Defines what to include in the query result set.
|<<query-set, SET>>                          | Writing     |  Update labels on nodes and properties on nodes and relationships.
|<<query-skip, SKIP>>                            | Reading/Writing | A sub-clause defining from which row to start including the rows in the output.
|<<query-union, UNION>>                      | Set operations   |  Combines the result of multiple queries. Duplicates are removed.
|<<query-union, UNION ALL>>                      | Set operations   |  Combines the result of multiple queries. Duplicates are retained.
|<<query-unwind, UNWIND ... [AS]>>                    | Projecting   |  Expands a list into a sequence of rows.
|<<query-using-index-hint, USING INDEX variable:Label(property)>>  | Hint | Index hints are used to specify which index, if any, the planner should use as a starting point.
|<<query-using-index-hint, USING INDEX SEEK variable:Label(property)>>  | Hint | Index seek hint instructs the planner to use an index seek for this clause.
|<<query-using-join-hint, USING JOIN ON variable>>                 | Hint | Join hints are used to enforce a join operation at specified points.
|<<query-using-periodic-commit-hint, USING PERIODIC COMMIT>>       | Hint | This query hint may be used to prevent an out-of-memory error from occurring when importing large amounts of data using `LOAD CSV`.
|<<query-using-scan-hint, USING SCAN variable:Label>>              | Hint | Scan hints are used to force the planner to do a label scan (followed by a filtering operation) instead of using an index.
|<<query-with, WITH ... [AS]>>                        | Projecting   |  Allows query parts to be chained together, piping the results from one to be used as starting points or criteria in the next.
|<<query-where, WHERE>>                          | Reading sub-clause | A sub-clause used to add constraints to the patterns in a `MATCH` or `OPTIONAL MATCH` clause, or to filter the results of a `WITH` clause.
|===


[[glossary-operators]]
== <<query-operators, Operators>>

[options="header"]
|===
|Operator                                                   | Category          | Description
| <<query-operators-mathematical, %>>                      | Mathematical  | Modulo division
| <<query-operators-mathematical, *>>                      | Mathematical  | Multiplication
| <<query-operators-temporal, *>>                      | Temporal  | Multiplying a duration with a number
| <<query-operators-mathematical, +>>                      | Mathematical  | Addition
| <<query-operators-string, +>>                            | String        | Concatenation
| <<query-operators-list, +>>                              | List          | Concatenation
| <<query-operators-temporal, +>>                            | Temporal        | Adding two durations, or a duration and a temporal instant
| <<query-operators-mathematical, \->>                      | Mathematical  | Subtraction or unary minus
| <<query-operators-temporal, \->>                            | Temporal        | Subtracting a duration from a temporal instant or from another duration
| <<query-operators-general, .>>                             | General      | Property access
| <<query-operators-mathematical, />>                      | Mathematical  | Division
| <<query-operators-temporal, />>                      | Temporal  | Dividing a duration by a number
| <<query-operators-comparison, <>>                        | Comparison    | Less than
| <<query-operators-comparison, \<\=>>                       | Comparison    | Less than or equal to
| <<query-operators-comparison, <> >>                       | Comparison    | Inequality
| <<query-operators-comparison, \=>>                        | Comparison    | Equality
| <<query-operators-string, =~>>                           | String        | Regular expression match
| <<query-operators-comparison, > >>                        | Comparison    | Greater than
| <<query-operators-comparison, >\=>>                       | Comparison    | Greater than or equal to
| <<query-operators-boolean, AND>>                         | Boolean       | Conjunction
| <<query-operator-comparison-string-specific, CONTAINS>>  | String comparison | Case-sensitive inclusion search
| <<query-operators-general, DISTINCT>>           | General           | Duplicate removal
| <<query-operator-comparison-string-specific, ENDS WITH>> | String comparison | Case-sensitive suffix search
| <<query-operators-list, IN>>                             | List          | List element existence check
| <<query-operators-comparison, IS NOT NULL>>              | Comparison    | Non-`null` check
| <<query-operators-comparison, IS NULL>>                  | Comparison    | `null` check
| <<query-operators-boolean, NOT>>                         | Boolean       | Negation
| <<query-operators-boolean, OR>>                          | Boolean       | Disjunction
| <<query-operator-comparison-string-specific, STARTS WITH>>   | String comparison | Case-sensitive prefix search
| <<query-operators-boolean, XOR>>                         | Boolean     | Exclusive disjunction
| <<query-operators-general, []>>                            | General        | Subscript (dynamic property access)
| <<query-operators-list, []>>                            | List        | Subscript (accessing element(s) in a list)
| <<query-operators-mathematical, ^>>                      | Mathematical  | Exponentiation
|===


[[glossary-functions]]
== <<query-function, Functions>>

[options="header"]
|===
|Function                                       | Category              | Description
|<<functions-abs, abs()>>                       |  Numeric          | Returns the absolute value of a number.
|<<functions-acos, acos()>>                     | Trigonometric     | Returns the arccosine of a number in radians.
|<<functions-all, all()>>                        | Predicate         | Tests whether the predicate holds for all elements in a list.
|<<functions-any, any()>>                        | Predicate         | Tests whether the predicate holds for at least one element in a list.
|<<functions-asin, asin()>>                     | Trigonometric     | Returns the arcsine of a number in radians.
|<<functions-atan, atan()>>                     | Trigonometric     | Returns the arctangent of a number in radians.
|<<functions-atan2, atan2()>>                   | Trigonometric     | Returns the arctangent2 of a set of coordinates in radians.
|<<functions-avg, avg()>>                        | Aggregating       | Returns the average of a set of values.
|<<functions-ceil, ceil()>>                     | Numeric           | Returns the smallest floating point number that is greater than or equal to a number and equal to a mathematical integer.
|<<functions-coalesce, coalesce()>>              | Scalar            | Returns the first non-`null` value in a list of expressions.
|<<functions-collect, collect()>>                | Aggregating       | Returns a list containing the values returned by an expression.
|<<functions-cos, cos()>>                       | Trigonometric     | Returns the cosine of a number.
|<<functions-cot, cot()>>                       | Trigonometric     | Returns the cotangent of a number.
|<<functions-count, count()>>                    | Aggregating       | Returns the number of values or rows.
| <<functions-date-current, date()>> | Temporal  | Returns the current _Date_.
| <<functions-date-calendar, date({year [, month, day]})>> | Temporal  | Returns a calendar (Year-Month-Day) _Date_.
| <<functions-date-week, date({year [, week, dayOfWeek]})>>  | Temporal | Returns a week (Year-Week-Day) _Date_.
| <<functions-date-quarter, date({year [, quarter, dayOfQuarter]})>> | Temporal  | Returns a quarter (Year-Quarter-Day) _Date_.
| <<functions-date-ordinal, date({year [, ordinalDay]})>> | Temporal  | Returns an ordinal (Year-Day) _Date_.
| <<functions-date-create-string, date(string)>> | Temporal  | Returns a _Date_ by parsing a string.
| <<functions-date-temporal, date({map})>>  | Temporal | Returns a _Date_ from a map of another temporal value's components.
| <<functions-date-current-realtime, date.realtime()>> | Temporal  | Returns the current _Date_ using the `realtime` clock.
| <<functions-date-current-statement, date.statement()>> | Temporal  | Returns the current _Date_ using the `statement` clock.
| <<functions-date-current-transaction, date.transaction()>> | Temporal  | Returns the current _Date_ using the `transaction` clock.
| <<functions-date-truncate, date.truncate()>> | Temporal  | Returns a _Date_ obtained by truncating a value at a specific component boundary. <<functions-temporal-truncate-overview, Truncation summary>>.
| <<functions-datetime-current, datetime()>> | Temporal  | Returns the current _DateTime_.
| <<functions-datetime-calendar, datetime({year [, month, day, ...]})>> | Temporal  | Returns a calendar (Year-Month-Day) _DateTime_.
| <<functions-datetime-week, datetime({year [, week, dayOfWeek, ...]})>> | Temporal  | Returns a week (Year-Week-Day) _DateTime_.
| <<functions-datetime-quarter, datetime({year [, quarter, dayOfQuarter, ...]})>> | Temporal  | Returns a quarter (Year-Quarter-Day) _DateTime_.
| <<functions-datetime-ordinal, datetime({year [, ordinalDay, ...]})>> | Temporal  | Returns an ordinal (Year-Day) _DateTime_.
| <<functions-datetime-create-string, datetime(string)>> | Temporal  | Returns a _DateTime_ by parsing a string.
| <<functions-datetime-temporal, datetime({map})>> | Temporal  | Returns a _DateTime_ from a map of another temporal value's components.
| <<functions-datetime-timestamp, datetime({epochSeconds})>>  | Temporal | Returns a _DateTime_ from a timestamp.
| <<functions-datetime-current-realtime, datetime.realtime()>>  | Temporal | Returns the current _DateTime_ using the `realtime` clock.
| <<functions-datetime-current-statement, datetime.statement()>> | Temporal  | Returns the current _DateTime_ using the `statement` clock.
| <<functions-datetime-current-transaction, datetime.transaction()>> | Temporal  | Returns the current _DateTime_ using the `transaction` clock.
| <<functions-datetime-truncate, datetime.truncate()>>  | Temporal | Returns a _DateTime_ obtained by truncating a value at a specific component boundary. <<functions-temporal-truncate-overview, Truncation summary>>.
|<<functions-degrees, degrees()>>               | Trigonometric     | Converts radians to degrees.
|<<functions-distance, distance()>>              | Spatial           | Returns a floating point number representing the geodesic distance between any two points in the same CRS.
| <<functions-duration-create-components, duration({map})>> | Temporal | Returns a _Duration_ from a map of its components.
| <<functions-duration-create-string, duration(string)>> | Temporal | Returns a _Duration_ by parsing a string.
| <<functions-duration-between, duration.between()>> | Temporal | Returns a _Duration_ equal to the difference between two given instants.
| <<functions-duration-indays, duration.inDays()>> | Temporal | Returns a _Duration_ equal to the difference in whole days or weeks between two given instants.
| <<functions-duration-inmonths, duration.inMonths()>> | Temporal | Returns a _Duration_ equal to the difference in whole months, quarters or years between two given instants.
| <<functions-duration-inseconds, duration.inSeconds()>> | Temporal | Returns a _Duration_ equal to the difference in seconds and fractions of seconds, or minutes or hours, between two given instants.
|<<functions-e, e()>>                           | Logarithmic       | Returns the base of the natural logarithm, `e`.
|<<functions-endnode, endNode()>>                | Scalar            | Returns the end node of a relationship.
|<<functions-exists, exists()>>                  | Predicate         | Returns true if a match for the pattern exists in the graph, or if the specified property exists in the node, relationship or map.
|<<functions-exp, exp()>>                       | Logarithmic       | Returns `e^n`, where `e` is the base of the natural logarithm, and `n` is the value of the argument expression.
|<<functions-extract, extract()>>                | List              | Returns a list `l~result~` containing the values resulting from an expression which has been applied to each element in a list `list`.
|<<functions-filter, filter()>>                  | List              | Returns a list `l~result~` containing all the elements from a list `list` that comply with a predicate.
|<<functions-floor, floor()>>                   | Numeric           | Returns the largest floating point number that is less than or equal to a number and equal to a mathematical integer.
|<<functions-haversin, haversin()>>             | Trigonometric     | Returns half the versine of a number.
|<<functions-head, head()>>                      | Scalar            | Returns the first element in a list.
|<<functions-id, id()>>                          | Scalar            | Returns the id of a relationship or node.
|<<functions-keys, keys()>>                      | List              | Returns a list containing the string representations for all the property names of a node, relationship, or map.
|<<functions-labels, labels()>>                  | List              | Returns a list containing the string representations for all the labels of a node.
|<<functions-last, last()>>                      | Scalar            | Returns the last element in a list.
|<<functions-left, left()>>                      | String            | Returns a string containing the specified number of leftmost characters of the original string.
|<<functions-length, length()>>                  | Scalar            | Returns the length of a path.
| <<functions-localdatetime-current, localdatetime()>> | Temporal  | Returns the current _LocalDateTime_.
| <<functions-localdatetime-calendar, localdatetime({year [, month, day, ...]})>>  | Temporal | Returns a calendar (Year-Month-Day) _LocalDateTime_.
| <<functions-localdatetime-week, localdatetime({year [, week, dayOfWeek, ...]})>> | Temporal  | Returns a week (Year-Week-Day) _LocalDateTime_.
| <<functions-localdatetime-quarter, localdatetime({year [, quarter, dayOfQuarter, ...]})>> | Temporal  | Returns a quarter (Year-Quarter-Day) _DateTime_.
| <<functions-localdatetime-ordinal, localdatetime({year [, ordinalDay, ...]})>> | Temporal  | Returns an ordinal (Year-Day) _LocalDateTime_.
| <<functions-localdatetime-create-string, localdatetime(string)>> | Temporal  | Returns a _LocalDateTime_ by parsing a string.
| <<functions-localdatetime-temporal, localdatetime({map})>> | Temporal  | Returns a _LocalDateTime_ from a map of another temporal value's components.
| <<functions-localdatetime-current-realtime, localdatetime.realtime()>> | Temporal  | Returns the current _LocalDateTime_ using the `realtime` clock.
| <<functions-localdatetime-current-statement, localdatetime.statement()>> | Temporal  | Returns the current _LocalDateTime_ using the `statement` clock.
| <<functions-localdatetime-current-transaction, localdatetime.transaction()>> | Temporal  | Returns the current _LocalDateTime_ using the `transaction` clock.
| <<functions-localdatetime-truncate, localdatetime.truncate()>> | Temporal  | Returns a _LocalDateTime_ obtained by truncating a value at a specific component boundary. <<functions-temporal-truncate-overview, Truncation summary>>.
| <<functions-localtime-current, localtime()>> | Temporal   | Returns the current _LocalTime_.
| <<functions-localtime-create, localtime({hour [, minute, second, ...]})>> | Temporal   | Returns a _LocalTime_ with the specified component values.
| <<functions-localtime-create-string, localtime(string)>> | Temporal   | Returns a _LocalTime_ by parsing a string.
| <<functions-localtime-temporal, localtime({time [, hour, ...]})>> | Temporal   | Returns a _LocalTime_ from a map of another temporal value's components.
| <<functions-localtime-current-realtime, localtime.realtime()>> | Temporal   | Returns the current _LocalTime_ using the `realtime` clock.
| <<functions-localtime-current-statement, localtime.statement()>> | Temporal   | Returns the current _LocalTime_ using the `statement` clock.
| <<functions-localtime-current-transaction, localtime.transaction()>> | Temporal   | Returns the current _LocalTime_ using the `transaction` clock.
| <<functions-localtime-truncate, localtime.truncate()>> | Temporal   | Returns a _LocalTime_ obtained by truncating a value at a specific component boundary. <<functions-temporal-truncate-overview, Truncation summary>>.
|<<functions-log, log()>>                       | Logarithmic       | Returns the natural logarithm of a number.
|<<functions-log10, log10()>>                   | Logarithmic       | Returns the common logarithm (base 10) of a number.
|<<functions-ltrim, lTrim()>>                    | String            | Returns the original string with leading whitespace removed.
|<<functions-max, max()>>                        | Aggregating       | Returns the maximum value in a set of values.
|<<functions-min, min()>>                        | Aggregating       | Returns the minimum value in a set of values.
|<<functions-nodes, nodes()>>                    | List              | Returns a list containing all the nodes in a path.
|<<functions-none, none()>>                      | Predicate         | Returns true if the predicate holds for no element in a list.
|<<functions-percentilecont, percentileCont()>>  | Aggregating       | Returns the percentile of the given value over a group using linear interpolation.
|<<functions-percentiledisc, percentileDisc()>>  | Aggregating       | Returns the nearest value to the given percentile over a group using a rounding method.
|<<functions-pi, pi()>>                         | Trigonometric     | Returns the mathematical constant _pi_.
|<<functions-point-cartesian-2d, point() - Cartesian 2D>>  | Spatial           | Returns a 2D point object, given two coordinate values in the Cartesian coordinate system.
|<<functions-point-cartesian-3d,point() - Cartesian 3D>> | Spatial           | Returns a 3D point object, given three coordinate values in the Cartesian coordinate system.
|<<functions-point-wgs84-2d, point() - WGS 84 2D>>          | Spatial           | Returns a 2D point object, given two coordinate values in the WGS 84 coordinate system.
|<<functions-point-wgs84-3d,point() - WGS 84 3D>> | Spatial         |  Returns a 3D point object, given three coordinate values in the WGS 84 coordinate system.
|<<functions-properties, properties()>>          | Scalar            | Returns a map containing all the properties of a node or relationship.
|<<functions-radians, radians()>>               | Trigonometric     | Converts degrees to radians.
|<<functions-rand, rand()>>                     | Numeric           | Returns a random floating point number in the range from 0 (inclusive) to 1 (exclusive); i.e. `[0, 1)`.
|<<functions-randomuuid, randomUUID()>>         | Scalar            | Returns a string value corresponding to a randomly-generated UUID.
|<<functions-range, range()>>                    | List              | Returns a list comprising all integer values within a specified range.
|<<functions-reduce, reduce()>>                  | List              | Runs an expression against individual elements of a list, storing the result of the expression in an accumulator.
|<<functions-relationships, relationships()>>    | List              | Returns a list containing all the relationships in a path.
|<<functions-replace, replace()>>                | String            | Returns a string in which all occurrences of a specified string in the original string have been replaced by another (specified) string.
|<<functions-reverse-list, reverse()>>           | List              | Returns a list in which the order of all elements in the original list have been reversed.
|<<functions-reverse, reverse()>>                | String            | Returns a string in which the order of all characters in the original string have been reversed.
|<<functions-right, right()>>                    | String            | Returns a string containing the specified number of rightmost characters of the original string.
|<<functions-round, round()>>                   | Numeric           | Returns the value of a number rounded to the nearest integer.
|<<functions-rtrim, rTrim()>>                    | String            | Returns the original string with trailing whitespace removed.
|<<functions-sign, sign()>>                     | Numeric           | Returns the signum of a number: `0` if the number is `0`, `-1` for any negative number, and `1` for any positive number.
|<<functions-sin, sin()>>                       | Trigonometric     | Returns the sine of a number.
|<<functions-single, single()>>                  | Predicate         | Returns true if the predicate holds for exactly one of the elements in a list.
|<<functions-size, size()>>                      | Scalar            | Returns the number of items in a list.
|<<functions-size-of-pattern-expression, size() applied to pattern expression>>  | Scalar   | Returns the number of sub-graphs matching the pattern expression.
|<<functions-size-of-string, size() applied to string>>  | Scalar          | Returns the number of Unicode characters in a string.
|<<functions-split, split()>>                    | String            | Returns a list of strings resulting from the splitting of the original string around matches of the given delimiter.
|<<functions-sqrt, sqrt()>>                     | Logarithmic       | Returns the square root of a number.
|<<functions-startnode, startNode()>>            | Scalar            | Returns the start node of a relationship.
|<<functions-stdev, stDev()>>                    | Aggregating       | Returns the standard deviation for the given value over a group for a sample of a population.
|<<functions-stdevp, stDevP()>>                  | Aggregating       | Returns the standard deviation for the given value over a group for an entire population.
|<<functions-substring, substring()>>            | String            | Returns a substring of the original string, beginning  with a 0-based index start and length.
|<<functions-sum, sum()>>                        | Aggregating       | Returns the sum of a set of numeric values.
|<<functions-tail, tail()>>                      | List              | Returns all but the first element in a list.
|<<functions-tan, tan()>>                       | Trigonometric     | Returns the tangent of a number.
| <<functions-time-current, time()>> | Temporal   | Returns the current _Time_.
| <<functions-time-create, time({hour [, minute, ...]})>>  | Temporal  | Returns a _Time_ with the specified component values.
| <<functions-time-create-string, time(string)>> | Temporal   | Returns a _Time_ by parsing a string.
| <<functions-time-temporal, time({time [, hour, ..., timezone]})>> | Temporal   | Returns a _Time_ from a map of another temporal value's components.
| <<functions-time-current-realtime, time.realtime()>> | Temporal   | Returns the current _Time_ using the `realtime` clock.
| <<functions-time-current-statement, time.statement()>> | Temporal   | Returns the current _Time_ using the `statement` clock.
| <<functions-time-current-transaction, time.transaction()>> | Temporal   | Returns the current _Time_ using the `transaction` clock.
| <<functions-time-truncate, time.truncate()>> | Temporal   | Returns a _Time_ obtained by truncating a value at a specific component boundary. <<functions-temporal-truncate-overview, Truncation summary>>.
|<<functions-timestamp, timestamp()>>            | Scalar            | Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.
|<<functions-toboolean, toBoolean()>>                | Scalar            | Converts a string value to a boolean value.
|<<functions-tofloat, toFloat()>>                | Scalar            | Converts an integer or string value to a floating point number.
|<<functions-tointeger, toInteger()>>                    | Scalar            | Converts a floating point or string value to an integer value.
|<<functions-tolower, toLower()>>                    | String            | Returns the original string in lowercase.
|<<functions-tostring, toString()>>              | String            | Converts an integer, float, boolean or temporal (i.e. Date, Time, LocalTime, DateTime, LocalDateTime or Duration) value to a string.
|<<functions-toupper, toUpper()>>                    | String            | Returns the original string in uppercase.
|<<functions-trim, trim()>>                      | String            | Returns the original string with leading and trailing whitespace removed.
|<<functions-type, type()>>                      | Scalar            | Returns the string representation of the relationship type.
|===


[[glossary-expressions]]
== Expressions

[options="header"]
|===
|Name           | Description
| <<query-syntax-case, CASE Expression>>  | A generic conditional expression, similar to if/else statements available in other languages.
|===


[[glossary-cypher-query-options]]
== Cypher query options

[options="header"]
|===
|Name           | Type | Description
| <<cypher-version, CYPHER $version query>>  | Version | This will force `'query'` to use Neo4j Cypher `$version`. The default is `3.3`.
| <<cypher-planner, CYPHER planner=rule query>> | Planner | This will force `'query'` to use the rule planner. As the rule planner was removed in 3.2, doing this will cause `'query'` to fall back to using Cypher 3.1.
| <<cypher-planner, CYPHER planner=cost query>> | Planner | Neo4j {neo4j-version} uses the cost planner for all queries.
| <<cypher-runtime, CYPHER runtime=interpreted query>> | Runtime | This will force the query execution engine to use the interpreted runtime. This is the only option in Neo4j Community Edition.
| <<cypher-runtime, CYPHER runtime=slotted query>> | Runtime | This will cause the query execution engine to use the slotted runtime. This is only available in Neo4j Enterprise Edition.
| <<cypher-runtime, CYPHER runtime=compiled query>> | Runtime | This will cause the query execution engine to use the compiled runtime if it supports `'query'`. This is only available in Neo4j Enterprise Edition.
|===

