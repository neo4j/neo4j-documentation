[[query-clause]]
= Clauses

[abstract]
--
This section contains information on all the clauses in the Cypher query language.
--

* <<header-reading-clauses,Reading clauses>>
* <<header-projecting-clauses,Projecting clauses>>
* <<header-reading-sub-clauses,Reading sub-clauses>>
* <<header-reading-hints,Reading hints>>
* <<header-writing-clauses,Writing clauses>>
* <<header-reading-writing-clauses,Reading/Writing clauses>>
* <<header-set-operations-clauses,Set operations>>
* <<header-importing-clauses,Importing data>>
* <<header-schema-clauses,Schema clauses>>


[[header-reading-clauses]]
**Reading clauses**

These comprise clauses that read data from the database.

The flow of data within a Cypher query is an unordered sequence of maps with key-value pairs -- a set of possible bindings between the variables in the query and values derived from the database.
This set is refined and augmented by subsequent parts of the query.

[options="header"]
|===
|Clause                                     |   Description
|<<query-match,MATCH>>                      |   Specify the patterns to search for in the database.
|<<query-optional-match,OPTIONAL MATCH>>    |   Specify the patterns to search for in the database while using `nulls` for missing parts of the pattern.
|<<query-start,START>>                      |   Find starting points through legacy indexes.
|===


[[header-projecting-clauses]]
**Projecting clauses**

These comprise clauses that define which expressions to return in the result set.
The returned expressions may all be aliased using `AS`.

[options="header"]
|===
|Clause                      |   Description
|<<query-return,RETURN ... [AS]>>     | Defines what to include in the query result set.
|<<query-with,WITH ... [AS]>>         | Allows query parts to be chained together, piping the results from one to be used as starting points or criteria in the next.
|<<query-unwind,UNWIND ... [AS]>>                    | Expands a list into a sequence of rows.
|===


[[header-reading-sub-clauses]]
**Reading sub-clauses**

These comprise sub-clauses that must operate as part of reading clauses.

[options="header"]
|===
|Sub-clause                                         | Description
|<<query-where,WHERE>>                          | Adds constraints to the patterns in a `MATCH` or `OPTIONAL MATCH` clause or filters the results of a `WITH` clause.
|<<query-order,ORDER BY [ASC[ENDING] \| DESC[ENDING]]>>                       | A sub-clause following `RETURN` or `WITH`, specifying that the output should be sorted in either ascending (the default) or descending order.
|<<query-skip,SKIP>>                            | Defines from which row to start including the rows in the output.
|<<query-limit,LIMIT>>                          | Constrains the number of rows in the output.
|===


[[header-reading-hints]]
**Reading hints**

These comprise clauses used to specify planner hints when tuning a query.
More details regarding the usage of these -- and query tuning in general -- can be found in <<query-using>>.

[options="header"]
|===
|Hint                                       | Description
|<<query-using-index-hint,USING INDEX>>       | Index hints are used to specify which index, if any, the planner should use as a starting point.
|<<query-using-scan-hint,USING SCAN>>         | Scan hints are used to force the planner to do a label scan (followed by a filtering operation) instead of using an index.
|<<query-using-join-hint,USING JOIN>>         | Join hints are used to enforce a join operation at specified points.
|===


[[header-writing-clauses]]
**Writing clauses**

These comprise clauses that write the data to the database.

[options="header"]
|===
|Clause                                     |   Description
|<<query-create,CREATE>>                    |   Create nodes and relationships.
|<<query-delete,DELETE>>                    |   Delete graph elements — nodes, relationships or paths. Any node to be deleted must also have all associated relationships explicitly deleted.
|<<query-delete,DETACH DELETE>>             |   Delete a node or set of nodes. All associated relationships will automatically be deleted.
|<<query-set,SET>>                          |   Update labels on nodes and properties on nodes and relationships.
|<<query-remove,REMOVE>>                    |   Remove properties and labels from nodes and relationships.
|<<query-foreach,FOREACH>>                  |   Update data within a list, whether components of a path, or the result of aggregation.
|===


[[header-reading-writing-clauses]]
**Reading/Writing clauses**

These comprise clauses that both read data from and write data to the database.

[options="header"]
|===
|Clause                                             |   Description
|<<query-merge,MERGE>>                              |   Ensures that a pattern exists in the graph. Either the pattern already exists, or it needs to be created.
|--- <<query-merge-on-create-on-match,ON CREATE>>   | Used in conjunction with `MERGE`, this write sub-clause specifies the actions to take if the pattern needs to be created.
|--- <<query-merge-on-create-on-match,ON MATCH>>    | Used in conjunction with `MERGE`, this write sub-clause specifies the actions to take if the pattern already exists.
|<<query-call,CALL [...YIELD]>>         | Invoke a procedure deployed in the database and return any results.
|<<query-create-unique,CREATE UNIQUE>>      |   A mixture of `MATCH` and `CREATE`, matching what it can, and creating what is missing.
|===


[[header-set-operations-clauses]]
**Set operations**

[options="header"]
|===
|Clause                             |   Description
|<<query-union,UNION>>              | Combines the result of multiple queries into a single result set. Duplicates are removed.
|<<query-union,UNION ALL>>          | Combines the result of multiple queries into a single result set. Duplicates are retained.
|===


[[header-importing-clauses]]
**Importing data**

[options="header"]
|===
|Clause                              |   Description
|<<query-load-csv,LOAD CSV>>                        |   Use when importing data from CSV files.
|--- <<query-using-periodic-commit-hint,USING PERIODIC COMMIT>>        | This query hint may be used to prevent an out-of-memory error from occurring when importing large amounts of data using `LOAD CSV`.
|===


[[header-schema-clauses]]
**Schema clauses**

These comprise clauses used to manage the schema; further details can found in <<cypher-schema>>.

[options="header"]
|===
|Clause                                             |   Description
|<<query-constraints,CREATE \| DROP CONSTRAINT>>     | Create or drop an index on all nodes with a particular label and property.
|<<query-schema-index,CREATE \| DROP INDEX>>         | Create or drop a constraint pertaining to either a node label or relationship type, and a property.
|===


//Reading
include::ql/query-match.adoc[leveloffset=+1]

include::ql/query-optional-match.adoc[leveloffset=+1]

include::ql/start/index.asciidoc[leveloffset=+1]

//Projecting
include::ql/query-return.adoc[leveloffset=+1]

include::ql/query-with.adoc[leveloffset=+1]

include::ql/query-unwind.adoc[leveloffset=+1]

//Reading sub-clauses
include::ql/query-where.adoc[leveloffset=+1]

include::ql/query-order.adoc[leveloffset=+1]

include::ql/query-skip.adoc[leveloffset=+1]

include::ql/query-limit.adoc[leveloffset=+1]

//Writing
include::ql/create/index.asciidoc[leveloffset=+1]

include::ql/query-delete.adoc[leveloffset=+1]

include::ql/query-set.adoc[leveloffset=+1]

include::ql/query-remove.adoc[leveloffset=+1]

include::ql/query-foreach.adoc[leveloffset=+1]


//Reading/Writing
include::ql/merge/index.asciidoc[leveloffset=+1]

include::ql/call/index.asciidoc[leveloffset=+1]

include::ql/create-unique/index.asciidoc[leveloffset=+1]

//Set
include::ql/query-union.adoc[leveloffset=+1]

//Importing
include::ql/load-csv/index.asciidoc[leveloffset=+1]
