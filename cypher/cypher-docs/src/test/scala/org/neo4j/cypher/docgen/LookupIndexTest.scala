/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.neo4j.cypher.docgen

import com.neo4j.configuration.OnlineBackupSettings
import org.junit.Test
import org.neo4j.configuration.helpers.SocketAddress
import org.neo4j.cypher.GraphIcing
import org.neo4j.cypher.QueryStatisticsTestSupport
import org.neo4j.graphdb.config.Setting
import org.neo4j.graphdb.schema.IndexType
import org.neo4j.kernel.impl.index.schema.RelationshipTypeScanStoreSettings

import java.util
import scala.collection.JavaConverters._

class LookupIndexTest extends DocumentingTestBase with QueryStatisticsTestSupport with GraphIcing {
  // The lookup index feature flag breaks other tests so for now they are in their own file
  // once the feature flag goes away we can add them to SchemaIndexTest with the other index tests

  override def parent: Option[String] = Some("Administration")
  override def section = "Indexes"

  override protected def databaseConfig(): util.Map[Setting[_], Object] =
    Map[Setting[_], Object](
      OnlineBackupSettings.online_backup_listen_address -> new SocketAddress("127.0.0.1", 0),
      OnlineBackupSettings.online_backup_enabled -> java.lang.Boolean.FALSE,
      RelationshipTypeScanStoreSettings.enable_scan_stores_as_token_indexes -> java.lang.Boolean.TRUE
    ).asJava

  @Test def create_lookup_index() {
    // remove autogenerated lookup indexes
    val res = execute("SHOW LOOKUP INDEXES YIELD name")
    res.columnAs[String]("name").foreach(n => execute(s"DROP INDEX $n"))

    testQuery(
      title = "Create a lookup index for nodes",
      text = "A named lookup index for all nodes that have any label can be created with `CREATE LOOKUP INDEX index_name FOR (n) ON EACH labels(n)`. " +
        "Note that the index is not immediately available, but will be created in the background.",
      queryText = "CREATE LOOKUP INDEX node_lookup_index FOR (n) ON EACH labels(n)",
      optionalResultExplanation = "Note that it can only be created once and that the index name must be unique.",
      assertions = _ => assertLookupIndexExists("node_lookup_index", isNodeIndex = true)
    )
    testQuery(
      title = "Create a lookup index for relationships",
      text = "A named index for all relationships that have any relationship type can be created with `CREATE LOOKUP INDEX index_name FOR ()-[r]-() ON EACH type(r)`. " +
        "Note that the index is not immediately available, but will be created in the background.",
      queryText = "CREATE LOOKUP INDEX rel_lookup_index FOR ()-[r]-() ON EACH type(r)",
      optionalResultExplanation = "Note that it can only be created once and that the index name must be unique.",
      assertions = _ => assertLookupIndexExists("rel_lookup_index", isNodeIndex = false)
    )
  }

  private def assertLookupIndexExists(name: String, isNodeIndex: Boolean) {
    val transaction = graphOps.beginTx()
    try {
      val indexDef = transaction.schema.getIndexByName(name)
      assert(indexDef.getIndexType.equals(IndexType.LOOKUP))
      assert(indexDef.isNodeIndex === isNodeIndex)
    } finally {
      transaction.close()
    }
  }
}
